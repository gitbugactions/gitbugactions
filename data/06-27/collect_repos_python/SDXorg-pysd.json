{
    "repository": "SDXorg/pysd",
    "stars": 292,
    "language": "python",
    "size": 23640,
    "clone_url": "https://github.com/SDXorg/pysd.git",
    "timestamp": "2023-06-28T10:23:45.927457Z",
    "clone_success": true,
    "number_of_actions": 4,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_join_calls[0]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_join_calls[1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_join_calls[2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_join_calls[3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[2a]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[2b]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[2c]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test__get_final_subscripts[3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_referencebuilder_subscripts_warning[reference_str0-Abc Jki-namespace0-subscripts0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_cross_reference]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_cross_reference'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_referencebuilder_subscripts_warning[reference_str1-abc_jki-namespace1-subscripts1]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_referencebuilder_subscripts_nowarning[reference_str0-subscripts0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestStructureBuilder",
                "name": "test_referencebuilder_subscripts_nowarning[reference_str1-subscripts1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestSubscriptManager",
                "name": "test_invalid_subscripts[invalid definition]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestNamespaceManager",
                "name": "test_get_original_name_invalid_identifier[my_value-elements0-ValueError-'my_value' not found in the namespace\\\\.]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_expression]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_expression'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestNamespaceManager",
                "name": "test_get_original_name_invalid_identifier[my_value-elements1-ValueError-'my_value' not found in the namespace\\\\.]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestNamespaceManager",
                "name": "test_get_original_name[my_value-elements0-my_value]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_builders.pytest_python.TestNamespaceManager",
                "name": "test_get_original_name[my_value-elements1-My Value]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_multi_expression]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_euler.TestEulerConvergence",
                "name": "test_local_truncation_error[teacup]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_euler.TestEulerConvergence",
                "name": "test_local_truncation_error[harmonic]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_euler.TestEulerConvergence",
                "name": "test_root_mean_square_error[teacup]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_multi_macros]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_macros'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_euler.TestEulerConvergence",
                "name": "test_root_mean_square_error[harmonic]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_stock]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_stock'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[macro_trailing_definition]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_trailing_definition'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[model_doc]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[abs]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[active_initial]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[multiple_lines_def]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/multiple_lines_def'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[na]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/na'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[active_initial_circular]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial_circular'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[nested_functions]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/nested_functions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[number_handling]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[odd_number_quotes]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/odd_number_quotes'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[parentheses]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[allocate_available]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_available'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[partial_range_definitions]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[power]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/power'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[allocate_by_priority]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_by_priority'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[arithmetics]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[reality_checks]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[reference_capitalization]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[arithmetics_exp]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[repeated_subscript]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/repeated_subscript'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[arguments]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arguments'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[rounding]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[array_with_line_break]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/array_with_line_break'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[sample_if_true]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[smaller_range]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smaller_range'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[builtin_max]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[smooth]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[smooth_and_stock]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth_and_stock'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[builtin_min]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[special_characters]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/special_characters'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[chained_initialization]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[sqrt]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subrange_merge]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subrange_merge'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[conditional_subscripts]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/conditional_subscripts'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[constant_expressions]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_1d_arrays]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_2d_arrays]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[control_vars]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_3d_arrays]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[data_from_other_model]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_3d_arrays_lengthwise]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_lengthwise'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[delay_fixed]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_3d_arrays_widthwise]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[delay_numeric_error]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_numeric_error'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_aggregation]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_aggregation'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[delay_parentheses]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_parentheses'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_constant_call]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_constant_call'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[delay_pipeline]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_pipeline'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_copy]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[delays]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_copy2]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_definition]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_definition'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[dynamic_final_time]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/dynamic_final_time'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_docs]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_docs'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[elm_count]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/elm_count'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_element_name]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_element_name'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[euler_step_vs_saveper]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/euler_step_vs_saveper'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[except]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays_from_floats]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays_from_floats'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[except_multiple]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_multiple'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_individually_defined_1d_arrays]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[except_subranges]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_subranges'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[exp]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_individually_defined_stocks]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_stocks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_logicals]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_logicals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_mapping_simple]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_simple'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[exponentiation]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_mapping_vensim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[forecast]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_mixed_assembly]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mixed_assembly'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[function_capitalization]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_multiples]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_multiples'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_numeric_range]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_numeric_range'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[fully_invalid_names]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/fully_invalid_names'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_selection]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_selection'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[game]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_constants]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "csv files not implemented",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_constants_subranges]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_data]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "csv files not implemented",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_subranges]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_subranges_equal]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges_equal'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_data_args_3d_xls]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_lookups_data_3d_xls]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_switching]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_switching'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_lookups_subscripted_args]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_lookups_subset]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_transposition]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_transposition'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_mixed_definitions]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_subscript_3d_arrays_xls]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscript_updimensioning]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_updimensioning'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_time_value]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_time_value'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_delays]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_delays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_values_order]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_values_order'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_flows]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_flows'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_with_missing_values_xlsx]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[get_xls_cellrange]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_xls_cellrange'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_if_then_else]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_if_then_else'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[if_stmt]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[initial_function]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[input_functions]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/input_functions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[invert_matrix]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/invert_matrix'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_logicals]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_logicals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[limits]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[line_breaks]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_lookups]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[line_continuation]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_ramp_step]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_ramp_step'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_round]",
                "time": 0.054,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_round'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[ln]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_smooth]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[log]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_trend]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[logicals]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_trig]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subscripted_xidz]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_xidz'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_funcnames]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_funcnames'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[subset_duplicated_coord]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subset_duplicated_coord'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_inline]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_inline_bounded]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_bounded'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[tabbed_arrays]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/tabbed_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_inline_spaces]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_spaces'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[time]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/time'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_with_expr]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_with_expr'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[trend]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trend'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[trig]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[unchangeable_constant]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unchangeable_constant'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[lookups_without_range]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_without_range'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[unicode_characters]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unicode_characters'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[eval_order]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/eval_order'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[variable_ranges]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/variable_ranges'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[vector_order]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_order'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[exp]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[vector_select]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_select'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[exponentiation]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[function_capitalization]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[with_lookup]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/with_lookup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[game]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[xidz_zidz]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[if_stmt]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_vensim_pathway.TestIntegrateVensim",
                "name": "test_read_vensim_file[zeroled_decimals]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[abs]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[initial_function]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[active_initial]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[limits]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[arithmetics_exp]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[builtin_max]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[builtin_min]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[chained_initialization]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[line_breaks]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[line_continuation]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[comparisons]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/comparisons'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[constant_expressions]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_zeros_demand[normal]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_zeros_demand[exponential]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[invalid-kind]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[fixed-quantity]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[constant-elasticity-demand]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[invalid-func]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[supply]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[negative-width]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priorities_errors[zero-width]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[ln]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateAvailable",
                "name": "test_allocate_available_errors[requests0-pp0-15-ValueError-There are some negative request values\\\\. Ensure that your request is always non-negative\\\\. Allocation requires all quantities to be positive or 0\\\\.\\\\n.*]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateAvailable",
                "name": "test_allocate_available_errors[requests1-pp1--7.5-ValueError-avail=-7\\\\.5 is not allowed\\\\. avail should be non-negative\\\\.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority[requests0-priority0-3-15-expected0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority[requests1-priority1-3-5-expected1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority[requests2-priority2-3-7.5-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test__allocate_by_priority_1d[requests0-priority0-3-15-expected0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test__allocate_by_priority_1d[requests1-priority1-3-5-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test__allocate_by_priority_1d[requests2-priority2-3-7.5-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test__allocate_by_priority_1d[requests3-priority3-0.5-1.5-expected3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test__allocate_by_priority_1d[requests4-priority4-0.5-0.0-expected4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority_errors[requests0-priority0-3-15-ValueError-There are some negative request values\\\\. Ensure that your request is always non-negative\\\\. Allocation requires all quantities to be positive or 0\\\\.\\\\n.*]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority_errors[requests1-priority1-0-5-ValueError-width=0 \\\\n is not allowed\\\\. width must be greater than 0\\\\.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority_errors[requests2-priority2--3-7.5-ValueError-width=-3 \\\\n is not allowed\\\\. width must be greater than 0\\\\.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestAllocateByPriority",
                "name": "test_allocate_by_priority_errors[requests3-priority3-3--7.5-ValueError-supply=-7\\\\.5 \\\\n is not allowed\\\\. supply must not be negative\\\\.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_not_model",
                "time": 2.728,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[log]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[logicals]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups_no-indirect]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups_xpts_sep]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups_xscale]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups_ypts_sep]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[lookups_inline]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[macro_expression]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[macro_multi_expression]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[macro_multi_macros]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[macro_stock]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[min_max_1arg]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/min_max_1arg'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[model_doc]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_all1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_all2]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_flows]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_flows_behavior]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_stocks]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[non_negative_stocks_behavior]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[number_handling]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[parentheses]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[pi]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/pi'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[reference_capitalization]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[rounding]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[smooth_and_stock]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[special_characters]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "failing originally",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[sqrt]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_1d_arrays]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_constant_call]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_individually_defined_1d_arrays]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_mixed_assembly]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_multiples]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_subranges]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_subranges_equal]",
                "time": 0.071,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscript_updimensioning]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscripted_flows]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "eqn with ??? in the model",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[subscripted_trig]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[trig]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_model_not_exists",
                "time": 2.432,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[xidz_zidz]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_integration.pytest_integration_xmile_pathway.TestIntegrateXmile",
                "name": "test_read_vensim_file[zeroled_decimals]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_demand[rectangular]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_demand[triangular]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_demand[normal]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_demand[exponential]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_supply[rectangular]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_supply[triangular]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_supply[normal]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_supply_supply[exponential]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_shape_demand[rectangular]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_shape_demand[triangular]",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_shape_demand[normal]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_shape_demand[exponential]",
                "time": 0.07,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_zeros_demand[rectangular]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_allocation.TestPriorities",
                "name": "test_priority_zeros_demand[triangular]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_return_array",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_flatten",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_flatten_transposed",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_times",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run[model_path0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_ignore_missing",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx/test_get_with_missing_values_xlsx.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_includes_last_value[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_build_timeseries[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_progress[model_path0]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_progress_dynamic[model_path0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_return_timestamps[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_return_timestamps_past_final_time[model_path0]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_return_timestamps_with_range[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_return_columns_original_names[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_return_columns_step[model_path0]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_reload[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_run_return_columns_pysafe_names[model_path0]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_conditions_invalid[model_path0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_conditions_tuple_pysafe_names[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_conditions_tuple_original_names[model_path0]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_conditions_current[model_path0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_condition_bad_value[model_path0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initial_conditions_subscripted_value_with_numpy_error[model_path0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_constant_parameter[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_constant_parameter_inline[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_timeseries_parameter[model_path0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_timeseries_parameter_inline[model_path0]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_component_with_real_name[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_components_warnings[model_path0]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_components_with_function[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_value_with_constant[model_path0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_value_with_partial_xarray[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_value_with_xarray[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_parameter_data[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_constant_parameter_lookup[model_path0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_timeseries_parameter_lookup[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_value_with_numpy_error[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_timeseries_parameter_with_constant[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_timeseries_parameter_with_partial_xarray[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_subscripted_timeseries_parameter_with_xarray[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_docs[model_path0]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_stepwise_cache",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_runwise_cache",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initialize[model_path0]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_initialize_order",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_with_deps",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_value[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_value_subscripted_value_with_constant[model_path0]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_value_subscripted_value_with_partial_xarray[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_value_subscripted_value_with_xarray[model_path0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_value_subscripted_value_with_numpy_error[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_replace_element[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_condition_origin_full[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_condition_origin_short[model_path0]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_condition_for_stock_component[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_set_initial_condition_for_constant_component[model_path0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_get_args[model_path0-args0]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_get_args[model_path1-args1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_get_coords[model_path0-coords0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_get_coords[model_path1-coords1]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_getitem",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_not_valid_output",
                "time": 2.838,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_get_series_data",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test__integrate[model_path0]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_default_returns_with_construction_functions",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_default_returns_with_lookups[model_path0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/lookups/test_lookups.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestPySD",
                "name": "test_files[model_path0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestModelInteraction",
                "name": "test_multiple_load",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestModelInteraction",
                "name": "test_no_crosstalk",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestModelInteraction",
                "name": "test_restart_cache[model_path0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestModelInteraction",
                "name": "test_not_able_to_update_stateful_object",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestMultiRun",
                "name": "test_delay_reinitializes",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestDependencies",
                "name": "test_deps[teacup]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestDependencies",
                "name": "test_deps[multiple]",
                "time": 0.472,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestDependencies",
                "name": "test_deps[constant]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestDependencies",
                "name": "test_change_constant_pipe[model_path0]",
                "time": 0.202,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[integ]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[delays]",
                "time": 0.08,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delays/test_delays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[delay_fixed]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delay_fixed/test_delay_fixed.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[forecast]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/forecast/test_forecast.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[sample_if_true]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/sample_if_true/test_sample_if_true.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[smooth]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[trend]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_trend/test_subscripted_trend.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_pysd.TestExportImport",
                "name": "test_run_export_import[initial]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/initial_function/test_initial.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_random.TestRandomModel",
                "name": "test_translate",
                "time": 4.486,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_not_valid_time_stamps",
                "time": 5.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test__get_dependencies[split_views]",
                "time": 0.41,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test__get_dependencies[split_subviews]",
                "time": 0.156,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_not_valid_new_value[test-models/samples/teacup/teacup.mdl]",
                "time": 2.239,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert 'PySD: error: when parsing foo=[1,2,3]' in \"usage: python -m pysd [-h] [-v] [-o FILE] [-p] [-r 'var1, var2, .., varN' or FILE .txt]\\n            [-e FILE] [-i FI...596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl\\nThe model file does not exist...\\n\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test__get_dependencies[split_sub_subviews]",
                "time": 0.293,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_get_dependencies[split_views]",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_get_dependencies[split_subviews]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_get_dependencies[split_sub_subviews]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_select_submodel[split_views]",
                "time": 1.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_select_submodel[split_subviews]",
                "time": 0.603,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestSubmodel",
                "name": "test_select_submodel[split_sub_subviews]",
                "time": 0.609,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_print_version",
                "time": 5.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestGetVarsInModuleErrors",
                "name": "test_get_vars_in_module_errors[module_not_found]",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel.TestGetVarsInModuleErrors",
                "name": "test_get_vars_in_module_errors[not_modularized_model]",
                "time": 0.196,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel",
                "name": "test_merge_nested_dicts[views0-expected0-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel",
                "name": "test_merge_nested_dicts[views1-expected1-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel",
                "name": "test_merge_nested_dicts[views2-expected2-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_select_submodel",
                "name": "test_merge_nested_dicts[views3-expected3-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_file_content[model_path0]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_different_types[data]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_different_types[data_exclude]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_different_types[lookup]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_different_types[lookup_subranges]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_externals_different_types[constant]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_mixed_definitions[model_path0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_ext_subscript[model_path0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path0-all-exclude0-included0-excluded0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path1-all-exclude1-included1-excluded1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path2-all-None-included2-excluded2]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path3-include3-None-included3-excluded3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path4-include4-None-included4-excluded4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_serialize_combine_vars_and_excels[model_path5-include5-None-included5-excluded5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_incomplete_constant_definition[model_path0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_serialize_externals.TestSerialization",
                "name": "test_exceptions[model_path0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_xrsplit",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_get_return_elements_subscirpts",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_get_return_elements_realnames",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_get_return_elements_pysafe_names",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_get_return_elements_not_found_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_doctests",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_compute_shape",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_compute_shape_reshape",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_rearrange",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_unique_dims_in_dataset[dim1-inputs0-expected_unique0-expected_return0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestUtils",
                "name": "test_unique_dims_in_dataset[dim2-inputs1-expected_unique1-expected_return1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestLoadOutputs",
                "name": "test_non_valid_outputs",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestLoadOutputs",
                "name": "test_transposed_frame",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestLoadOutputs",
                "name": "test_load_columns",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_utils.TestProgressbar",
                "name": "test_progressbar",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_canonical_file_not_found",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_non_valid_model",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_different_frames_error",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_different_frames_warning",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_different_frames_return",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_different_cols",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_invalid_input",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_benchmarking.TestErrors",
                "name": "test_run_python",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: \nCanonical output file not found.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_nc_path_errors[Wrong type]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_nc_path_errors[Not found]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_nc_path_errors[Wrong extension]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_nc_path_errors[Correct path]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_ds_subset[empty]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_ds_subset[one var]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_ds_subset[non existing single var]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__validate_ds_subset[wrong type]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__index_da_by_coord_labels[time-dependent data var]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test__index_da_by_coord_labels[constant data var]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_da_to_dict[time-dependent data var]",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_da_to_dict[constant data var]",
                "time": 0.112,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_dict_to_df[ok]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_dict_to_df[missing time]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_df_to_text_file_errors",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.csv-True-True]",
                "time": 0.377,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.csv-True-False]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.csv-False-True]",
                "time": 0.373,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.csv-False-False]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.tab-True-True]",
                "time": 0.363,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.tab-True-False]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.tab-False-True]",
                "time": 0.365,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_to_text_file[.tab-False-False]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_tools.pytest_ncfile.TestNCFile",
                "name": "test_ds_to_df",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model[split_views]",
                "time": 1.926,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_print_help",
                "time": 7.674,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model[split_subviews]",
                "time": 0.95,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model[split_sub_subviews]",
                "time": 1.497,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model[split_macro]",
                "time": 0.232,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model[split_vensim_8_2_1]",
                "time": 1.36,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViews",
                "name": "test_read_vensim_split_model_warnings[split_multiviews_vars]",
                "time": 0.382,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViewsWarnings",
                "name": "test_split_view_warnings[warning_noviews]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViewsWarnings",
                "name": "test_split_view_warnings[not_match_separator]",
                "time": 0.24,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_split_views.TestSplitViewsWarnings",
                "name": "test_split_view_warnings[no_sketch]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_read_vensim_file[teacup]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_read_vensim_file[macros]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_read_vensim_file[mapping]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_read_vensim_file[data]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_read_vensim_file[except]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_file_split_file_sections[teacup]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_file_split_file_sections[macros]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_file_split_file_sections[mapping]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_file_split_file_sections[data]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestVensimFile",
                "name": "test_file_split_file_sections[except]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_subscript_range_error[no-letter]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_subscript_range_error[greater]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_subscript_range_error[different-leading]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_complex_mapping[single]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_complex_mapping[single2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_complex_mapping[multiple]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_complex_mapping[multiple2]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_simple_mapping[single]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_simple_mapping[single2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_simple_mapping[multiple]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestElements",
                "name": "test_simple_mapping[multiple2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_translators.pytest_vensim.TestRealityChecks",
                "name": "test_reality_checks[test-models/tests/reality_checks/test_reality_checks.mdl]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks/test_reality_checks.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestComponents",
                "name": "test_load_components",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestTime",
                "name": "test_set_control_vars",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestTime",
                "name": "test_set_control_vars_with_constants",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestTime",
                "name": "test_in_bounds",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestTime",
                "name": "test_in_return_saveperper",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.components.pytest_components.TestTime",
                "name": "test_in_return_timestamps",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumns",
                "name": "test_clean_columns",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumns",
                "name": "test_transposed_frame",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumns",
                "name": "test_get_columns",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumns",
                "name": "test_get_columns_subscripted",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise/output.tab'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumnsErrors",
                "name": "test_columns_errors[invalid_file_type]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_columns.TestColumnsErrors",
                "name": "test_columns_errors[invalid_file_format]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataErrors",
                "name": "test_data_errors[not_loaded_data]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataErrors",
                "name": "test_data_errors[try_except]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataErrors",
                "name": "test_invalid_interp_method",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[float-constant]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[float-series]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[array-constantfloat]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[array-seriesfloat]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[array-constantarray]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data.TestDataSetValues",
                "name": "test_data_set_value[array-seriesarray]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[one_file_tab]",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[one_file_netcdf]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_translate_file[test-models/samples/teacup/teacup.mdl]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model[more-tests/split_model/test_split_model.mdl]",
                "time": 3.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[two_files_tab]",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[two_files_netcdf]",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[two_files_mix]",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[transposed_file]",
                "time": 0.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_get_data_and_run[dict_file]",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[one_file_tab]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[one_file_netcdf]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[two_files_tab]",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[two_files_netcdf]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[two_files_mix]",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[transposed_file]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDData",
                "name": "test_modify_data[dict_file]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDDataErrors",
                "name": "test_run_error",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDDataErrors",
                "name": "test_loading_error[missing_data]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.data.pytest_data_with_model.TestPySDDataErrors",
                "name": "test_loading_error[data_variable_not_found_from_dict_file]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExcels",
                "name": "test_read_clean",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExcels",
                "name": "test_read_clean_opyxl",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExcels",
                "name": "test_close_file",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_col_to_num",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_split_excel_cell",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_reshape",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_series_selector",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_fill_missing",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_resolve_file",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_read_empty_cells_openpyxl",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestExternalMethods",
                "name": "test_read_empty_cells_pandas",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_h1d_1",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_hn1d_1",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_h1d",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_v1d",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_hn1d",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_vn1d",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_h1d",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_v1d",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_hn1d",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_vn1d",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_h1d",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_v1d",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_hn1d",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_vn1d",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_vn2d",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_hn2d",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_v2d",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_interp_h3d",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_forward_v3d",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_backward_hn3d",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestData",
                "name": "test_data_raw_h1d",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_h1d",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_v1d",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_hn1d",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_vn1d",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_h2d",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_vn3d",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_vn3d_shape0",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_vn2d_xarray",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestLookup",
                "name": "test_lookup_vn3d_xarray",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_0d",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_n0d",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_h1d",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_v1d",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_hn1d",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_vn1d",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_h2d",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_v2d",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_hn2d",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_vn2d",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_h3d",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_v3d",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_hn3d",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestConstant",
                "name": "test_constant_vn3d",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestSubscript",
                "name": "test_subscript_h",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestSubscript",
                "name": "test_subscript_v",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_not_implemented_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_non_existent_file",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_non_existent_sheet_pyxl",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_non_existent_cellrange_name_pyxl",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_non_existent_cellrange_name_in_sheet_pyxl",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1dm_row",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1dm_row2",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1dm",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1dm_ignore",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1dm_raise",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_v1dm",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_v1dm_ignore",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_v1dm_raise",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn1dm",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn1dm_ignore",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn1dm_raise",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn3dmd",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn3dmd_raw",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_lookup_hn3dmd_raise",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_lookup_hn3dmd_ignore",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_h3dm",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_h3dm_ignore",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_h3dm_raise",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_hn3dm_raise",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_h1d0",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_v1d0",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn1d0",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hn1dt",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hns",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_vnss",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_interp_hnnwd",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_raw_hnnm",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_h3d_interpnv",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_h3d_interp",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_data_h3d_add",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_lookup_h3d_add",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_h3d_add",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.external.pytest_external.TestWarningsErrors",
                "name": "test_constant_hns",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[float-constant]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[float-series]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[array-constantfloat]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[array-seriesfloat]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[array-constantarray]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsSetValues",
                "name": "test_lookups_set_value[array-seriesarray]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsError",
                "name": "test_hardcoded_lookups_error[repeated]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsError",
                "name": "test_hardcoded_lookups_error[diff-len1]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.lookup.pytest_lookups.TestLookupsError",
                "name": "test_hardcoded_lookups_error[diff-len2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_integ",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_stateful_identification",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_delay",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_delay_subscript",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_delay_order",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_forecast",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_initial",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_sampleiftrue",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_smooth",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStateful",
                "name": "test_trend",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestStatefulErrors",
                "name": "test_not_initialized_object",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_types.statefuls.pytest_statefuls.TestMacroMethods",
                "name": "test_get_elements_to_initialize",
                "time": 0.032,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model_subviews[more-tests/split_model/test_split_model_subviews.mdl]",
                "time": 3.546,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model_subviews_hyphen[separators0-expected0-more-tests/split_model/test_split_model_subviews.mdl]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model_subviews_hyphen[separators1-expected1-more-tests/split_model/test_split_model_subviews.mdl]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model_subviews_hyphen[separators2-expected2-more-tests/split_model/test_split_model_subviews.mdl]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_read_vensim_split_model_subviews_hyphen[separators3-expected3-more-tests/split_model/test_split_model_subviews.mdl]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_run_return_timestamps[test-models/samples/teacup/teacup.mdl]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_run_return_columns[test-models/samples/teacup/teacup.mdl]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_model_arguments[test-models/samples/teacup/teacup.mdl]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_initial_conditions_tuple_pysafe_names[test-models/samples/teacup/teacup.mdl]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_set_constant_parameter[test-models/samples/teacup/teacup.xmile]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_set_timeseries_parameter_lookup[test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_export_import[test-models/samples/teacup/teacup.mdl]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_run_model_with_data[test-models/tests/data_from_other_model/test_data_from_other_model.mdl]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestPySD",
                "name": "test_save_without_name[test-models/samples/teacup/teacup.mdl]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestCLI",
                "name": "test_cli_arguments_parsing[subview_sep_last-more-tests/split_model/test_split_model_sub_subviews.mdl]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestCLI",
                "name": "test_cli_arguments_parsing[subview_sep_first-more-tests/split_model/test_split_model_sub_subviews.mdl]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestCLI",
                "name": "test_positional_arguments_after_subview_sep[cli_args0-expected0-more-tests/split_model/test_split_model_sub_subviews.mdl]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Passing positional arguments after nargs argument",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_cli.TestCLI",
                "name": "test_positional_arguments_after_subview_sep[cli_args1-expected1-more-tests/split_model/test_split_model_sub_subviews.mdl]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Passing positional arguments after nargs argument",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_loading_error[old_version]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_loading_error[load_type]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_loading_error[not_vensim_model]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_loading_error[not_xmile_model]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_loading_error[circular_reference]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_errors",
                "name": "test_not_implemented_and_incomplete[not_implemented_and_incomplete-mdl]",
                "time": 0.228,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_ramp",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_step",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_pulse",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_pulse_chain",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_pulse_magnitude",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_numeric_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_xidz",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestInputFunctions",
                "name": "test_zidz",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestLogicFunctions",
                "name": "test_if_then_else_basic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestLogicFunctions",
                "name": "test_if_then_else_with_subscripted",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_sum",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_prod",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vmin",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vmax",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_invert_matrix",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[2020-1-1-25-23-45-5-233]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[2020-1-3-4-15-10-23-3323]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[195-2-4-4-15-10-23-3323]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[195-2-6-4-15-10-23-3323]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[2045-3-7-31-0-15-55-33233]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[1330-3-9-30-0-15-55-33233]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[3000-4-10-1-13-15-55-33233]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_machine[1995-4-12-1-13-15-55-33233]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_errors[relativeto=1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_errors[relativeto=3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_errors[measure=0;relativeto=2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_errors[measure=11]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_get_time_value_errors[relativeto=0;measure=2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select_errors[error_action=1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select_errors[error_action=2]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select_errors[error_action=3a]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select_errors[error_action=3b]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_vector_select_errors[numerical_action=11]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_incomplete",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_functions.TestFunctions",
                "name": "test_not_implemented_function",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_model_attributes.TestModelProperties",
                "name": "test_propierties[teacup]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_model_attributes.TestModelProperties",
                "name": "test_propierties[split_views]",
                "time": 0.449,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_model_attributes.TestModelProperties",
                "name": "test_propierties[split_subviews]",
                "time": 0.153,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_model_attributes.TestModelProperties",
                "name": "test_propierties[split_sub_subviews]",
                "time": 0.232,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_handler_interface",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_invalid_output_file[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_nc[lookups]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_nc[constants]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_nc[numeric_coords]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_nc[variable_step]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_nc[partial_definitions]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_csv[model_path0-csv-,]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_output_csv[model_path1-tab-\\t]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_dataset_handler_step_setter[model_path0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: The model doesn't exist\nassert False\n +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_0dxarray",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pytest_pysd.pytest_output.TestOutput",
                "name": "test_make_flat_df_nosubs",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \ud83d\ude80  Start image=crawlergpt:latest\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd] user=0 workdir=\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=v2\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \u2b50 Run Pre Coveralls\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2705  Success - Pre Coveralls\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \u2b50 Run Main actions/checkout@v3\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2705  Success - Main actions/checkout@v3\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \u2b50 Run Main Set up Python 3.7\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/771ad96e-b55e-4e66-9491-325a7e1a6fb0/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2753  ::group::Installed versions\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? false\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::explicit? true\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully set up CPython (3.7.11)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2753  ::endgroup::\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2705  Success - Main Set up Python 3.7\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-output:: python-version=3.7.11\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \u2b50 Run Main Install dependencies\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Installing collected packages: pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Attempting uninstall: pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     Found existing installation: pip 21.2.4\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     Uninstalling pip-21.2.4:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |       Successfully uninstalled pip-21.2.4\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully installed pip-23.1.2\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting wheel\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 529.8 kB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Installing collected packages: wheel\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully installed wheel-0.40.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] To update, run: pip install --upgrade pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Ignoring netCDF4: markers 'platform_system == \"Windows\" and python_version == \"3.7\"' don't match your environment\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pytest (from -r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 17.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pytest-cov (from -r tests/requirements.txt (line 4))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pytest-mock (from -r tests/requirements.txt (line 5))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pytest_mock-3.11.1-py3-none-any.whl (9.6 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pytest-xdist (from -r tests/requirements.txt (line 6))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pytest_xdist-3.3.1-py3-none-any.whl (41 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.8/41.8 kB 293.8 kB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting coverage (from -r tests/requirements.txt (line 7))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 6.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting coveralls (from -r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting psutil (from -r tests/requirements.txt (line 9))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading psutil-5.9.5-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (282 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 282.1/282.1 kB 6.3 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting netCDF4==1.6.* (from -r tests/requirements.txt (line 11))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading netCDF4-1.6.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.4 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 5.4/5.4 MB 6.3 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting dask[array] (from -r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading dask-2022.2.0-py3-none-any.whl (1.1 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.1/1.1 MB 12.4 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting importlib-metadata==2.0 (from -r tests/requirements.txt (line 15))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading importlib_metadata-2.0.0-py2.py3-none-any.whl (31 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting cftime (from netCDF4==1.6.*->-r tests/requirements.txt (line 11))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading cftime-1.6.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (257 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 257.7/257.7 kB 18.3 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting certifi (from netCDF4==1.6.*->-r tests/requirements.txt (line 11))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 2.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting numpy (from netCDF4==1.6.*->-r tests/requirements.txt (line 11))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 15.7/15.7 MB 16.4 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting zipp>=0.5 (from importlib-metadata==2.0->-r tests/requirements.txt (line 15))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting iniconfig (from pytest->-r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting packaging (from pytest->-r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 3.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pluggy<2.0,>=0.12 (from pytest->-r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->-r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting tomli>=1.0.0 (from pytest->-r tests/requirements.txt (line 3))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting execnet>=1.1 (from pytest-xdist->-r tests/requirements.txt (line 6))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading execnet-1.9.0-py2.py3-none-any.whl (39 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting coverage (from -r tests/requirements.txt (line 7))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-6.5.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (210 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 210.1/210.1 kB 5.4 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting docopt>=0.6.1 (from coveralls->-r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Preparing metadata (setup.py): started\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Preparing metadata (setup.py): finished with status 'done'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting requests>=1.0.0 (from coveralls->-r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 2.1 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting cloudpickle>=1.1.1 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading cloudpickle-2.2.1-py3-none-any.whl (25 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting fsspec>=0.6.0 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading fsspec-2023.1.0-py3-none-any.whl (143 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 143.0/143.0 kB 4.7 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting partd>=0.3.10 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading partd-1.4.0-py3-none-any.whl (18 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pyyaml>=5.3.1 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 596.3/596.3 kB 6.7 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting toolz>=0.8.2 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading toolz-0.12.0-py3-none-any.whl (55 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 55.8/55.8 kB 2.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting bokeh>=2.1.1 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading bokeh-2.4.3-py3-none-any.whl (18.5 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 18.5/18.5 MB 10.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting jinja2 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 5.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting distributed==2022.02.0 (from dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading distributed-2022.2.0-py3-none-any.whl (837 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 837.0/837.0 kB 8.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting click>=6.6 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 14.1 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting msgpack>=0.6.0 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading msgpack-1.0.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (299 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 299.7/299.7 kB 7.9 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting sortedcontainers!=2.0.0,!=2.0.1 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting tblib>=1.6.0 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading tblib-2.0.0-py3-none-any.whl (11 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting zict>=0.1.3 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading zict-2.2.0-py2.py3-none-any.whl (23 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12)) (47.1.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting tornado>=5 (from distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading tornado-6.2-cp37-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (423 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 424.0/424.0 kB 10.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pillow>=7.1.0 (from bokeh>=2.1.1->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading Pillow-9.5.0-cp37-cp37m-manylinux_2_28_x86_64.whl (3.4 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.4/3.4 MB 14.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting typing-extensions>=3.10.0 (from bokeh>=2.1.1->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | INFO: pip is looking at multiple versions of coverage[toml] to determine which version is compatible with other requirements. This could take a while.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->-r tests/requirements.txt (line 4))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.5/225.5 kB 3.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.5-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.0/225.0 kB 2.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.0/225.0 kB 15.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 224.8/224.8 kB 8.7 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 224.3/224.3 kB 15.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 224.2/224.2 kB 5.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.2.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 224.2/224.2 kB 16.3 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | INFO: pip is looking at multiple versions of coverage[toml] to determine which version is compatible with other requirements. This could take a while.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.1.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (223 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 223.5/223.5 kB 4.5 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.5-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (222 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 222.7/222.7 kB 10.9 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (222 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 222.2/222.2 kB 14.7 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (221 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 221.6/221.6 kB 10.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (221 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 221.2/221.2 kB 11.2 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 212.8/212.8 kB 2.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading coverage-7.0.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 212.8/212.8 kB 7.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting MarkupSafe>=2.0 (from jinja2->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting locket (from partd>=0.3.10->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading locket-1.0.0-py2.py3-none-any.whl (4.4 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting charset-normalizer<4,>=2 (from requests>=1.0.0->coveralls->-r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 5.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting idna<4,>=2.5 (from requests>=1.0.0->coveralls->-r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting urllib3<3,>=1.21.1 (from requests>=1.0.0->coveralls->-r tests/requirements.txt (line 8))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 4.5 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting heapdict (from zict>=0.1.3->distributed==2022.02.0->dask[array]->-r tests/requirements.txt (line 12))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading HeapDict-1.0.1-py3-none-any.whl (3.9 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Building wheels for collected packages: docopt\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Building wheel for docopt (setup.py): started\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Building wheel for docopt (setup.py): finished with status 'done'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13705 sha256=da3d874f2de588d6dd7f93a42f0f6719e99fcb0edbf33e7d5f054d52f452696b\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/72/b0/3f/1d95f96ff986c7dfffe46ce2be4062f38ebd04b506c77c81b9\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully built docopt\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Installing collected packages: sortedcontainers, msgpack, heapdict, docopt, zipp, zict, urllib3, typing-extensions, tornado, toolz, tomli, tblib, pyyaml, psutil, pillow, packaging, numpy, MarkupSafe, locket, iniconfig, idna, fsspec, execnet, exceptiongroup, coverage, cloudpickle, charset-normalizer, certifi, requests, partd, jinja2, importlib-metadata, cftime, pluggy, netCDF4, dask, coveralls, click, bokeh, pytest, distributed, pytest-xdist, pytest-mock, pytest-cov\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully installed MarkupSafe-2.1.3 bokeh-2.4.3 certifi-2023.5.7 cftime-1.6.2 charset-normalizer-3.1.0 click-8.1.3 cloudpickle-2.2.1 coverage-6.5.0 coveralls-3.3.1 dask-2022.2.0 distributed-2022.2.0 docopt-0.6.2 exceptiongroup-1.1.1 execnet-1.9.0 fsspec-2023.1.0 heapdict-1.0.1 idna-3.4 importlib-metadata-2.0.0 iniconfig-2.0.0 jinja2-3.1.2 locket-1.0.0 msgpack-1.0.5 netCDF4-1.6.4 numpy-1.21.6 packaging-23.1 partd-1.4.0 pillow-9.5.0 pluggy-1.2.0 psutil-5.9.5 pytest-7.4.0 pytest-cov-4.1.0 pytest-mock-3.11.1 pytest-xdist-3.3.1 pyyaml-6.0 requests-2.31.0 sortedcontainers-2.4.0 tblib-2.0.0 tomli-2.0.1 toolz-0.12.0 tornado-6.2 typing-extensions-4.6.3 urllib3-2.0.3 zict-2.2.0 zipp-3.15.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] To update, run: pip install --upgrade pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Preparing metadata (setup.py): started\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Preparing metadata (setup.py): finished with status 'done'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: numpy<1.24 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from pysd==3.10.0) (1.21.6)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pandas (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pandas-1.3.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.3 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.3/11.3 MB 29.8 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting parsimonious (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading parsimonious-0.10.0-py3-none-any.whl (48 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.4/48.4 kB 4.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting xarray (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading xarray-0.20.2-py3-none-any.whl (845 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 845.2/845.2 kB 15.4 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting xlrd (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading xlrd-2.0.1-py2.py3-none-any.whl (96 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.5/96.5 kB 5.2 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting lxml (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading lxml-4.9.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (6.6 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6.6/6.6 MB 26.1 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting regex (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading regex-2023.6.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (755 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 755.7/755.7 kB 12.9 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting chardet (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading chardet-5.1.0-py3-none-any.whl (199 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 199.1/199.1 kB 24.3 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting black (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading black-23.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 16.6 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting openpyxl<3.1 (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading openpyxl-3.0.10-py2.py3-none-any.whl (242 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 242.1/242.1 kB 5.5 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting scipy (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading scipy-1.7.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (38.1 MB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 38.1/38.1 MB 22.7 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting progressbar2 (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading progressbar2-4.2.0-py2.py3-none-any.whl (27 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting portion (from pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading portion-2.4.0-py3-none-any.whl (27 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting et-xmlfile (from openpyxl<3.1->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: click>=8.0.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->pysd==3.10.0) (8.1.3)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting mypy-extensions>=0.4.3 (from black->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: packaging>=22.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->pysd==3.10.0) (23.1)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pathspec>=0.9.0 (from black->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting platformdirs>=2 (from black->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: tomli>=1.1.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->pysd==3.10.0) (2.0.1)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting typed-ast>=1.4.2 (from black->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 39.4 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: typing-extensions>=3.10.0.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->pysd==3.10.0) (4.6.3)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting python-dateutil>=2.7.3 (from pandas->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 11.0 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting pytz>=2017.3 (from pandas->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 15.2 MB/s eta 0:00:00\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: sortedcontainers~=2.2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from portion->pysd==3.10.0) (2.4.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting python-utils>=3.0.0 (from progressbar2->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading python_utils-3.5.2-py2.py3-none-any.whl (24 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: importlib-metadata in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from xarray->pysd==3.10.0) (2.0.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Collecting six>=1.5 (from python-dateutil>=2.7.3->pandas->pysd==3.10.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Requirement already satisfied: zipp>=0.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from importlib-metadata->xarray->pysd==3.10.0) (3.15.0)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Installing collected packages: pytz, xlrd, typed-ast, six, scipy, regex, python-utils, portion, platformdirs, pathspec, mypy-extensions, lxml, et-xmlfile, chardet, python-dateutil, progressbar2, parsimonious, openpyxl, pandas, black, xarray, pysd\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |   Running setup.py develop for pysd\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Successfully installed black-23.3.0 chardet-5.1.0 et-xmlfile-1.1.0 lxml-4.9.2 mypy-extensions-1.0.0 openpyxl-3.0.10 pandas-1.3.5 parsimonious-0.10.0 pathspec-0.11.1 platformdirs-3.8.0 portion-2.4.0 progressbar2-4.2.0 pysd-3.10.0 python-dateutil-2.8.2 python-utils-3.5.2 pytz-2023.3 regex-2023.6.3 scipy-1.7.3 six-1.16.0 typed-ast-1.5.4 xarray-0.20.2 xlrd-2.0.1\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [notice] To update, run: pip install --upgrade pip\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u2705  Success - Main Install dependencies\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \u2b50 Run Main Test and coverage\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ============================= test session starts ==============================\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | configfile: pytest.ini\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | plugins: mock-3.11.1, xdist-3.3.1, cov-4.1.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | created: 2/2 workers\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | 2 workers [694 items]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ...........E.....E...EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 10%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEExExEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 20%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | EEEEEEEEEEEEEEEEEEEEEEEEEEEExEEEEEEEEE.........E..............EEExEEEExx [ 31%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | xxEEEEEEEEEEEEExxExxExxxxxxE.EEE..................EFEEEEEEEEEEEEEEEEEEEE [ 41%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | EEEEEEEEEEEEEEE..E..EEEEEEEEEEEEEE.FFEFEEFFE.FE...EEEEEEEE...........F.. [ 51%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | .....EEEEEEEEEEEEEEEE......................F............................ [ 62%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ...E..FFFFFFFFFF...........FF........F.............E.................... [ 72%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ........................................................................ [ 82%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ........................................F.....EEEEEEEEE..xx............. [ 93%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | .............................E....EEEEEEEEE...                           [100%]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ==================================== ERRORS ====================================\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_cross_reference] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_cr0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_cross_reference.mdl', 'folder': 'macro_cross_reference'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_cross_reference')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_cr0/macro_cross_reference')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_cross_reference'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_expression] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e3d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_ex0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_expression.mdl', 'folder': 'macro_expression'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_expression')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_ex0/macro_expression')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_expression'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_multi_expression] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e490>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_mu0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_multi_expression.mdl', 'folder': 'macro_multi_expression'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_mu0/macro_multi_expression')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestEulerConvergence.test_local_truncation_error[teacup] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_local_truncation_error_te0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestEulerConvergence.test_local_truncation_error[harmonic] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_local_truncation_error_ha0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestEulerConvergence.test_root_mean_square_error[teacup] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_root_mean_square_error_te0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_multi_macros] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e550>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_mu1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_multi_macros.mdl', 'folder': 'macro_multi_macros'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_macros')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_mu1/macro_multi_macros')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_macros'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestEulerConvergence.test_root_mean_square_error[harmonic] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_root_mean_square_error_ha0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_stock] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_st0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_stock.mdl', 'folder': 'macro_stock'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_stock')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_st0/macro_stock')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_stock'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[macro_trailing_definition] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e6d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_tr0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_macro_trailing_definition.mdl', 'folder': 'macro_trailing_definition'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_trailing_definition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_macro_tr0/macro_trailing_definition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_trailing_definition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[model_doc] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e790>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_model_do0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'model_doc.mdl', 'folder': 'model_doc'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_model_do0/model_doc')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[abs] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ffecd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_abs_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_abs.mdl', 'folder': 'abs'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_abs_0/abs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[active_initial] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001ed0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_active_i0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_active_initial.mdl', 'folder': 'active_initial'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_active_i0/active_initial')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[multiple_lines_def] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e850>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_multiple0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_multiple_lines_def.mdl', 'folder': 'multiple_lines_def'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/multiple_lines_def')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_multiple0/multiple_lines_def')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/multiple_lines_def'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[na] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e910>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_na_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_na.mdl', 'folder': 'na'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/na')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_na_0/na')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/na'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[active_initial_circular] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001090>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_active_i1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_active_initial_circular.mdl', 'folder': 'active_initial_circular'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial_circular')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_active_i1/active_initial_circular')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial_circular'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[nested_functions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4e9d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_nested_f0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_nested_functions.mdl', 'folder': 'nested_functions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/nested_functions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_nested_f0/nested_functions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/nested_functions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[number_handling] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ea90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_number_h0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_number_handling.mdl', 'folder': 'number_handling'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_number_h0/number_handling')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[odd_number_quotes] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4eb50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_odd_numb0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'teacup_3quotes.mdl', 'folder': 'odd_number_quotes'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/odd_number_quotes')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_odd_numb0/odd_number_quotes')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/odd_number_quotes'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[parentheses] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ec10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_parenthe0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_parens.mdl', 'folder': 'parentheses'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_parenthe0/parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[allocate_available] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a0010d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_allocate0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_allocate_available.mdl', 'folder': 'allocate_available', 'rtol': 0.02}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_available')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_allocate0/allocate_available')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_available'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[partial_range_definitions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ecd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_partial_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_partial_range_definitions.mdl', 'folder': 'partial_range_definitions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_partial_0/partial_range_definitions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[power] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ed90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_power_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'power.mdl', 'folder': 'power'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/power')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_power_0/power')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/power'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[allocate_by_priority] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001210>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_allocate1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_allocate_by_priority.mdl', 'folder': 'allocate_by_priority'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_by_priority')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_allocate1/allocate_by_priority')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_by_priority'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[arithmetics] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001390>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_arithmet0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_arithmetics.mdl', 'folder': 'arithmetics'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_arithmet0/arithmetics')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[reality_checks] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ee50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_reality_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_reality_checks.mdl', 'folder': 'reality_checks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_reality_0/reality_checks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[reference_capitalization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4ef10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_referenc0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_reference_capitalization.mdl', 'folder': 'reference_capitalization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_referenc0/reference_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[arithmetics_exp] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001450>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_arithmet1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_arithmetics_exp.mdl', 'folder': 'arithmetics_exp'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_arithmet1/arithmetics_exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[repeated_subscript] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e4efd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_repeated0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_repeated_subscript.mdl', 'folder': 'repeated_subscript'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/repeated_subscript')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_repeated0/repeated_subscript')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/repeated_subscript'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[arguments] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001510>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_argument0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_arguments.mdl', 'folder': 'arguments', 'rtol': 0.01}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arguments')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_argument0/arguments')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arguments'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[rounding] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e600d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_rounding0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_rounding.mdl', 'folder': 'rounding'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_rounding0/rounding')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[array_with_line_break] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a0015d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_array_wi0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_array_with_line_break.mdl', 'folder': 'array_with_line_break'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/array_with_line_break')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_array_wi0/array_with_line_break')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/array_with_line_break'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[sample_if_true] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60190>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_sample_i0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_sample_if_true.mdl', 'folder': 'sample_if_true'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_sample_i0/sample_if_true')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[smaller_range] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60250>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smaller_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_smaller_range.mdl', 'folder': 'smaller_range'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smaller_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smaller_0/smaller_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smaller_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[builtin_max] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001690>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_builtin_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'builtin_max.mdl', 'folder': 'builtin_max'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_builtin_0/builtin_max')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[smooth] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smooth_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_smooth.mdl', 'folder': 'smooth'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smooth_0/smooth')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[smooth_and_stock] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e603d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smooth_a0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_smooth_and_stock.mdl', 'folder': 'smooth_and_stock'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth_and_stock')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_smooth_a0/smooth_and_stock')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth_and_stock'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[builtin_min] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001750>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_builtin_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'builtin_min.mdl', 'folder': 'builtin_min'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_builtin_1/builtin_min')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[special_characters] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60490>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_special_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_special_variable_names.mdl', 'folder': 'special_characters'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/special_characters')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_special_0/special_characters')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/special_characters'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[chained_initialization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001810>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_chained_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_chained_initialization.mdl', 'folder': 'chained_initialization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_chained_0/chained_initialization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[sqrt] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60550>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_sqrt_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_sqrt.mdl', 'folder': 'sqrt'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_sqrt_0/sqrt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subrange_merge] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subrange0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subrange_merge.mdl', 'folder': 'subrange_merge'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subrange_merge')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subrange0/subrange_merge')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subrange_merge'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[conditional_subscripts] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a0018d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_conditio0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_conditional_subscripts.mdl', 'folder': 'conditional_subscripts'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/conditional_subscripts')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_conditio0/conditional_subscripts')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/conditional_subscripts'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[constant_expressions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001990>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_constant0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_constant_expressions.mdl', 'folder': 'constant_expressions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_constant0/constant_expressions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_1d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e606d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_1d_arrays.mdl', 'folder': 'subscript_1d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip0/subscript_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_2d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60790>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_2d_arrays.mdl', 'folder': 'subscript_2d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip1/subscript_2d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[control_vars] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a001a50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_control_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_control_vars.mdl', 'folder': 'control_vars'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_control_0/control_vars')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_3d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60850>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_3d_arrays.mdl', 'folder': 'subscript_3d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip2/subscript_3d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[data_from_other_model] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0690>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_data_fro0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'data_files': 'data.tab', 'file': 'test_data_from_other_model.mdl', 'folder': 'data_from_other_model'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_data_fro0/data_from_other_model')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_3d_arrays_lengthwise] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60910>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_3d_arrays_lengthwise.mdl', 'folder': 'subscript_3d_arrays_lengthwise'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_lengthwise')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip3/subscript_3d_arrays_lengthwise')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_lengthwise'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[delay_fixed] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0750>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_fi0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_delay_fixed.mdl', 'folder': 'delay_fixed'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_fi0/delay_fixed')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_3d_arrays_widthwise] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e609d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip4')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_3d_arrays_widthwise.mdl', 'folder': 'subscript_3d_arrays_widthwise'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip4/subscript_3d_arrays_widthwise')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[delay_numeric_error] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0810>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_nu0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_delay_numeric_error.mdl', 'folder': 'delay_numeric_error'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_numeric_error')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_nu0/delay_numeric_error')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_numeric_error'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_aggregation] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60a90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip5')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_aggregation.mdl', 'folder': 'subscript_aggregation'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_aggregation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip5/subscript_aggregation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_aggregation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[delay_parentheses] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0f10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_pa0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_delay_parentheses.mdl', 'folder': 'delay_parentheses'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_pa0/delay_parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_constant_call] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60b50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip6')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_constant_call.mdl', 'folder': 'subscript_constant_call'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_constant_call')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip6/subscript_constant_call')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_constant_call'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[delay_pipeline] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0e10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_pi0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_pipeline_delays.mdl', 'folder': 'delay_pipeline'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_pipeline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delay_pi0/delay_pipeline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_pipeline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_copy] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60c10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip7')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_copy.mdl', 'folder': 'subscript_copy'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip7/subscript_copy')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[delays] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0ad0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delays_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_delays.mdl', 'folder': 'delays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_delays_0/delays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_copy2] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60cd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip8')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_copy2.mdl', 'folder': 'subscript_copy'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip8/subscript_copy')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_definition] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60d90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip9')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_definition.mdl', 'folder': 'subscript_definition'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_definition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip9/subscript_definition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_definition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[dynamic_final_time] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0d10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_dynamic_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_dynamic_final_time.mdl', 'folder': 'dynamic_final_time'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/dynamic_final_time')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_dynamic_0/dynamic_final_time')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/dynamic_final_time'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_docs] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60e50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip10')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_docs.mdl', 'folder': 'subscript_docs'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_docs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip10/subscript_docs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_docs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[elm_count] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0a90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_elm_coun0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_elm_count.mdl', 'folder': 'elm_count'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/elm_count')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_elm_coun0/elm_count')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/elm_count'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_element_name] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60f10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip11')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_element_name.mdl', 'folder': 'subscript_element_name'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_element_name')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip11/subscript_element_name')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_element_name'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[euler_step_vs_saveper] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0550>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_euler_st0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_euler_step_vs_saveper.mdl', 'folder': 'euler_step_vs_saveper'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/euler_step_vs_saveper')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_euler_st0/euler_step_vs_saveper')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/euler_step_vs_saveper'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e60fd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip12')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_individually_defined_1_of_2d_arrays.mdl', 'folder': 'subscript_individually_defined_1_of_2d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip12/subscript_individually_defined_1_of_2d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[except] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0450>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_except.mdl', 'folder': 'except'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_0/except')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays_from_floats] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df00d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip13')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_individually_defined_1_of_2d_arrays_from_floats.mdl', 'folder': 'subscript_individually_defined_1_of_2d_arrays_from_floats'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays_from_floats')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip13/subscript_individually_defined_1_of_2d_arrays_from_floats')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays_from_floats'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[except_multiple] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0350>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_except_multiple.mdl', 'folder': 'except_multiple'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_multiple')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_m0/except_multiple')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_multiple'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_individually_defined_1d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0190>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip14')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_individually_defined_1d_arrays.mdl', 'folder': 'subscript_individually_defined_1d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip14/subscript_individually_defined_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[except_subranges] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff03d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_s0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_except_subranges.mdl', 'folder': 'except_subranges'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_except_s0/except_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[exp] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff08d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exp_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_exp.mdl', 'folder': 'exp'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exp_0/exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_individually_defined_stocks] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0250>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip15')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_individually_defined_stocks.mdl', 'folder': 'subscript_individually_defined_stocks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip15/subscript_individually_defined_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_logicals] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip16')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_logicals.mdl', 'folder': 'subscript_logicals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip16/subscript_logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_mapping_simple] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df03d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip17')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_mapping_simple.mdl', 'folder': 'subscript_mapping_simple'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_simple')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip17/subscript_mapping_simple')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_simple'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[exponentiation] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff00d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exponent0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'exponentiation.mdl', 'folder': 'exponentiation'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exponent0/exponentiation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_mapping_vensim] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0490>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip18')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_mapping_vensim.mdl', 'folder': 'subscript_mapping_vensim'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip18/subscript_mapping_vensim')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[forecast] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0390>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_forecast0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_forecast.mdl', 'folder': 'forecast'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_forecast0/forecast')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_mixed_assembly] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0550>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip19')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_mixed_assembly.mdl', 'folder': 'subscript_mixed_assembly'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mixed_assembly')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip19/subscript_mixed_assembly')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mixed_assembly'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[function_capitalization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff0110>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_function0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_function_capitalization.mdl', 'folder': 'function_capitalization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_function0/function_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_multiples] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip20')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_multiple_subscripts.mdl', 'folder': 'subscript_multiples'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_multiples')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip20/subscript_multiples')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_multiples'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_numeric_range] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df06d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip21')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_numeric_range.mdl', 'folder': 'subscript_numeric_range'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_numeric_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip21/subscript_numeric_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_numeric_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[fully_invalid_names] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2b5fcd50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_fully_in0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_fully_invalid_names.mdl', 'folder': 'fully_invalid_names'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/fully_invalid_names')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_fully_in0/fully_invalid_names')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/fully_invalid_names'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_selection] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0790>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip22')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_selection.mdl', 'folder': 'subscript_selection'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_selection')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip22/subscript_selection')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_selection'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[game] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2b5fc210>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_game_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_game.mdl', 'folder': 'game'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_game_0/game')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_constants_subranges] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9d50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_cons1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_constants_subranges.mdl', 'folder': 'get_constants_subranges'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_cons1/get_constants_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_subranges] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0850>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip23')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_subrange.mdl', 'folder': 'subscript_subranges'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip23/subscript_subranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_subranges_equal] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0910>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip24')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_subrange_equal.mdl', 'folder': 'subscript_subranges_equal'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges_equal')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip24/subscript_subranges_equal')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges_equal'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_data_args_3d_xls] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9350>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_data1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_data_args_3d_xls.mdl', 'folder': 'get_data_args_3d_xls'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_data1/get_data_args_3d_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_lookups_data_3d_xls] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9650>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_lookups_data_3d_xls.mdl', 'folder': 'get_lookups_data_3d_xls'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look0/get_lookups_data_3d_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_switching] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df09d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip25')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_switching.mdl', 'folder': 'subscript_switching'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_switching')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip25/subscript_switching')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_switching'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_lookups_subscripted_args] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff96d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_lookups_subscripted_args.mdl', 'folder': 'get_lookups_subscripted_args'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look1/get_lookups_subscripted_args')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_lookups_subset] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9410>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_lookups_subset.mdl', 'folder': 'get_lookups_subset'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_look2/get_lookups_subset')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_transposition] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0a90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip26')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_transposition.mdl', 'folder': 'subscript_transposition'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_transposition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip26/subscript_transposition')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_transposition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_mixed_definitions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9c50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_mixe0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_mixed_definitions.mdl', 'folder': 'get_mixed_definitions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_mixe0/get_mixed_definitions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_subscript_3d_arrays_xls] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9b90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_subs0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_subscript_3d_arrays_xls.mdl', 'folder': 'get_subscript_3d_arrays_xls'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_subs0/get_subscript_3d_arrays_xls')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscript_updimensioning] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0b50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip27')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscript_updimensioning.mdl', 'folder': 'subscript_updimensioning'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_updimensioning')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip27/subscript_updimensioning')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_updimensioning'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_time_value] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9ad0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_time0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_time_value_simple.mdl', 'folder': 'get_time_value'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_time_value')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_time0/get_time_value')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_time_value'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_delays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0c10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip28')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_delays.mdl', 'folder': 'subscripted_delays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_delays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip28/subscripted_delays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_delays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_values_order] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9810>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_valu0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_values_order.mdl', 'folder': 'get_values_order'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_values_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_valu0/get_values_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_values_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_flows] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0cd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip29')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_flows.mdl', 'folder': 'subscripted_flows'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip29/subscripted_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_with_missing_values_xlsx] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9750>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_with0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_with_missing_values_xlsx.mdl', 'folder': 'get_with_missing_values_xlsx'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_with0/get_with_missing_values_xlsx')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[get_xls_cellrange] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9a10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_xls_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_get_xls_cellrange.mdl', 'folder': 'get_xls_cellrange'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_xls_cellrange')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_get_xls_0/get_xls_cellrange')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_xls_cellrange'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_if_then_else] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0d90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip30')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_if_then_else.mdl', 'folder': 'subscripted_if_then_else'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_if_then_else')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip30/subscripted_if_then_else')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_if_then_else'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[if_stmt] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9950>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_if_stmt_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'if_stmt.mdl', 'folder': 'if_stmt'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_if_stmt_0/if_stmt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[initial_function] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9fd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_initial_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_initial.mdl', 'folder': 'initial_function'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_initial_0/initial_function')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[input_functions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9090>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_input_fu0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_inputs.mdl', 'folder': 'input_functions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/input_functions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_input_fu0/input_functions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/input_functions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[invert_matrix] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9710>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_invert_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_invert_matrix.mdl', 'folder': 'invert_matrix'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/invert_matrix')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_invert_m0/invert_matrix')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/invert_matrix'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_logicals] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0e50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip31')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_logicals.mdl', 'folder': 'subscripted_logicals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip31/subscripted_logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[limits] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff91d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_limits_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_limits.mdl', 'folder': 'limits'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_limits_0/limits')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[line_breaks] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f29ff9190>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_bre0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_line_breaks.mdl', 'folder': 'line_breaks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_bre0/line_breaks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_lookups] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0f10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip32')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_lookups.mdl', 'folder': 'subscripted_lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip32/subscripted_lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[line_continuation] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a99d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_con0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_line_continuation.mdl', 'folder': 'line_continuation'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_con0/line_continuation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_ramp_step] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323df0fd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip33')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_ramp_step.mdl', 'folder': 'subscripted_ramp_step'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_ramp_step')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip33/subscripted_ramp_step')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_ramp_step'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_round] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e030d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip34')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_round.mdl', 'folder': 'subscripted_round'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_round')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip34/subscripted_round')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_round'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[ln] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9950>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_ln_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_ln.mdl', 'folder': 'ln'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_ln_0/ln')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_smooth] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03190>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip35')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_smooth.mdl', 'folder': 'subscripted_smooth'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip35/subscripted_smooth')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[log] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a96d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_log_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_log.mdl', 'folder': 'log'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_log_0/log')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_trend] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03250>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip36')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_trend.mdl', 'folder': 'subscripted_trend'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip36/subscripted_trend')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[logicals] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9750>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_logicals0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_logicals.mdl', 'folder': 'logicals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_logicals0/logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_trig] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip37')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_trig.mdl', 'folder': 'subscripted_trig'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip37/subscripted_trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9590>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups.mdl', 'folder': 'lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_0/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subscripted_xidz] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e033d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip38')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_xidz.mdl', 'folder': 'subscripted_xidz'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_xidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subscrip38/subscripted_xidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_xidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_funcnames] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9690>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_funcnames.mdl', 'folder': 'lookups_funcnames'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_funcnames')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_1/lookups_funcnames')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_funcnames'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[subset_duplicated_coord] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03490>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subset_d0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subset_duplicated_coord.mdl', 'folder': 'subset_duplicated_coord'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subset_duplicated_coord')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_subset_d0/subset_duplicated_coord')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subset_duplicated_coord'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_inline] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9410>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_inline.mdl', 'folder': 'lookups_inline'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_2/lookups_inline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_inline_bounded] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9a10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_inline_bounded.mdl', 'folder': 'lookups_inline_bounded'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_bounded')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_3/lookups_inline_bounded')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_bounded'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[tabbed_arrays] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03550>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_tabbed_a0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'tabbed_arrays.mdl', 'folder': 'tabbed_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/tabbed_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_tabbed_a0/tabbed_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/tabbed_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_inline_spaces] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9110>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_4')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_inline_spaces.mdl', 'folder': 'lookups_inline_spaces'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_spaces')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_4/lookups_inline_spaces')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_spaces'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[time] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_time_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_time.mdl', 'folder': 'time'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/time')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_time_0/time')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/time'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_with_expr] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a9090>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_5')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_with_expr.mdl', 'folder': 'lookups_with_expr'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_with_expr')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_5/lookups_with_expr')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_with_expr'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[trend] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e036d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_trend_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_trend.mdl', 'folder': 'trend'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trend')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_trend_0/trend')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trend'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[trig] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03790>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_trig_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_trig.mdl', 'folder': 'trig'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_trig_0/trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[unchangeable_constant] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03850>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_unchange0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_unchangeable_constant.mdl', 'folder': 'unchangeable_constant'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unchangeable_constant')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_unchange0/unchangeable_constant')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unchangeable_constant'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[lookups_without_range] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f4f2a2a92d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_6')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_without_range.mdl', 'folder': 'lookups_without_range'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_without_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_6/lookups_without_range')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_without_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[unicode_characters] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03910>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_unicode_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'unicode_test_model.mdl', 'folder': 'unicode_characters'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unicode_characters')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_unicode_0/unicode_characters')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unicode_characters'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[eval_order] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b250>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_eval_ord0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'eval_order.xmile', 'folder': 'eval_order'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/eval_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_eval_ord0/eval_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/eval_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[variable_ranges] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e039d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_variable0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_variable_ranges.mdl', 'folder': 'variable_ranges'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/variable_ranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_variable0/variable_ranges')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/variable_ranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[vector_order] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03a90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_vector_o0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_vector_order.mdl', 'folder': 'vector_order'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_vector_o0/vector_order')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[exp] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exp_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_exp.xmile', 'folder': 'exp'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exp_1/exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[vector_select] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03b50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_vector_s0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_vector_select.mdl', 'folder': 'vector_select'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_select')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_vector_s0/vector_select')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_select'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[exponentiation] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b450>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exponent1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'exponentiation.xmile', 'folder': 'exponentiation'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_exponent1/exponentiation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[function_capitalization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b590>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_function1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_function_capitalization.xmile', 'folder': 'function_capitalization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_function1/function_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[with_lookup] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03c10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_with_loo0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_with_lookup.mdl', 'folder': 'with_lookup'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/with_lookup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_with_loo0/with_lookup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/with_lookup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[game] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bc10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_game_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_game.xmile', 'folder': 'game'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_game_1/game')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[xidz_zidz] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03cd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_xidz_zid0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'xidz_zidz.mdl', 'folder': 'xidz_zidz'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_xidz_zid0/xidz_zidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[if_stmt] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bcd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_if_stmt_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'if_stmt.xmile', 'folder': 'if_stmt'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_if_stmt_1/if_stmt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateVensim.test_read_vensim_file[zeroled_decimals] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_vensim_pathway.TestIntegrateVensim object at 0x7f1323e03d90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_zeroled_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_zeroled_decimals.mdl', 'folder': 'zeroled_decimals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_vensim_pathway.py:598: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_zeroled_0/zeroled_decimals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[abs] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d87310>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_abs_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_abs.xmile', 'folder': 'abs'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_abs_0/abs')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[initial_function] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bd90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_initial_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_initial.xmile', 'folder': 'initial_function'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_initial_1/initial_function')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[limits] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18be50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_limits_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_limits.xmile', 'folder': 'limits'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_limits_1/limits')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[arithmetics_exp] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d899d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_arithmet0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_arithmetics_exp.xmile', 'folder': 'arithmetics_exp'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_arithmet0/arithmetics_exp')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[builtin_max] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d89a90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_builtin_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'builtin_max.xmile', 'folder': 'builtin_max'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_builtin_0/builtin_max')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[builtin_min] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d89b50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_builtin_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'builtin_min.xmile', 'folder': 'builtin_min'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_builtin_1/builtin_min')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[chained_initialization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d89c50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_chained_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_chained_initialization.xmile', 'folder': 'chained_initialization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_chained_0/chained_initialization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[line_breaks] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bf10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_bre1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_line_breaks.xmile', 'folder': 'line_breaks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_bre1/line_breaks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[line_continuation] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bfd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_con1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_line_continuation.xmile', 'folder': 'line_continuation'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_line_con1/line_continuation')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[comparisons] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d89d90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_comparis0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'comparisons.xmile', 'folder': 'comparisons'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/comparisons')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_comparis0/comparisons')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/comparisons'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[constant_expressions] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f1323d89090>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_constant0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_constant_expressions.xmile', 'folder': 'constant_expressions'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_read_vensim_file_constant0/constant_expressions')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[ln] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18bb10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_ln_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_ln.xmile', 'folder': 'ln'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_ln_1/ln')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[log] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b650>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_log_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_log.xmile', 'folder': 'log'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_log_1/log')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[logicals] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b710>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_logicals1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_logicals.xmile', 'folder': 'logicals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_logicals1/logicals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[lookups] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a18b7d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_7')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups.xmile', 'folder': 'lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_7/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[lookups_xpts_sep] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185110>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_9')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_xpts_sep.xmile', 'folder': 'lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_9/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[lookups_xscale] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a1851d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_10')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_xscale.xmile', 'folder': 'lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_10/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[lookups_ypts_sep] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185290>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_11')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_ypts_sep.xmile', 'folder': 'lookups'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_11/lookups')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[lookups_inline] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185350>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_12')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_lookups_inline.xmile', 'folder': 'lookups_inline'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_lookups_12/lookups_inline')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[min_max_1arg] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185710>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_min_max_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_min_max_1arg.xmile', 'folder': 'min_max_1arg'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/min_max_1arg')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_min_max_0/min_max_1arg')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/min_max_1arg'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[model_doc] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a1857d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_model_do0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'model_doc.xmile', 'folder': 'model_doc'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_model_do0/model_doc')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_all1] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185890>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_all1.xmile', 'folder': 'non_negative_all'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega0/non_negative_all')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_all2] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185950>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_all2.xmile', 'folder': 'non_negative_all'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega1/non_negative_all')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_flows] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185a10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_flows.xmile', 'folder': 'non_negative_flows'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega2/non_negative_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_flows_behavior] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185ad0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_flows_behavior.xmile', 'folder': 'non_negative_flows'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega3/non_negative_flows')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_stocks] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185b90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega4')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_stocks.xmile', 'folder': 'non_negative_stocks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega4/non_negative_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[non_negative_stocks_behavior] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185c50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega5')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_non_negative_stocks_behavior.xmile', 'folder': 'non_negative_stocks'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_non_nega5/non_negative_stocks')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[number_handling] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185d10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_number_h0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_number_handling.xmile', 'folder': 'number_handling'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_number_h0/number_handling')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[parentheses] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_parenthe0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_parens.xmile', 'folder': 'parentheses'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_parenthe0/parentheses')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[pi] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185e90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_pi_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_pi.xmile', 'folder': 'pi'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/pi')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_pi_0/pi')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/pi'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[reference_capitalization] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a185f50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_referenc0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_reference_capitalization.xmile', 'folder': 'reference_capitalization'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_referenc0/reference_capitalization')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[rounding] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19f050>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_rounding0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_rounding.xmile', 'folder': 'rounding'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_rounding0/rounding')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[sqrt] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19f210>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_sqrt_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_sqrt.xmile', 'folder': 'sqrt'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_sqrt_0/sqrt')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[subscript_individually_defined_1d_arrays] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19f450>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_subscrip2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'subscript_individually_defined_1d_arrays.xmile', 'folder': 'subscript_individually_defined_1d_arrays'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_subscrip2/subscript_individually_defined_1d_arrays')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[subscripted_trig] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19f990>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_subscrip9')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_subscripted_trig.xmile', 'folder': 'subscripted_trig'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_subscrip9/subscripted_trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[trig] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19fa50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_trig_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_trig.xmile', 'folder': 'trig'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_trig_0/trig')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[xidz_zidz] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19fb10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_xidz_zid0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'xidz_zidz.xmile', 'folder': 'xidz_zidz'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_xidz_zid0/xidz_zidz')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestIntegrateXmile.test_read_vensim_file[zeroled_decimals] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_integration_xmile_pathway.TestIntegrateXmile object at 0x7f4f2a19fbd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_zeroled_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _test_models = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_data = {'file': 'test_zeroled_decimals.xmile', 'folder': 'zeroled_decimals'}\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_folder(self, tmp_path, _test_models, test_data):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_data[\"folder\"])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         shutil.copytree(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             _test_models.joinpath(test_data[\"folder\"]),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           test_folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_integration/pytest_integration_xmile_pathway.py:272: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_read_vensim_file_zeroled_0/zeroled_decimals')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f4f4a993dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______________ ERROR at setup of TestPySD.test_run[model_path0] _______________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestPySD.test_run_includes_last_value[model_path0] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_includes_last_value_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestPySD.test_run_build_timeseries[model_path0] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_build_timeseries_mode0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __________ ERROR at setup of TestPySD.test_run_progress[model_path0] ___________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_progress_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestPySD.test_run_progress_dynamic[model_path0] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_progress_dynamic_mode0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/control_vars/test_control_vars.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestPySD.test_run_return_timestamps[model_path0] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_return_timestamps_mod0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_return_timestamps_past_final_time[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_return_timestamps_pas0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_return_timestamps_with_range[model_path0] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_return_timestamps_with_ra0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_return_columns_original_names[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_return_columns_origin0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestPySD.test_run_return_columns_step[model_path0] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_return_columns_step_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___________ ERROR at setup of TestPySD.test_run_reload[model_path0] ____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_reload_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_return_columns_pysafe_names[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_return_columns_pysafe0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestPySD.test_initial_conditions_invalid[model_path0] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_conditions_invali0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_initial_conditions_tuple_pysafe_names[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_conditions_tuple_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_initial_conditions_tuple_original_names[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_conditions_tuple_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestPySD.test_initial_conditions_current[model_path0] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_conditions_curren0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___ ERROR at setup of TestPySD.test_initial_condition_bad_value[model_path0] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_condition_bad_val0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_initial_conditions_subscripted_value_with_numpy_error[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initial_conditions_subscr0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestPySD.test_set_constant_parameter[model_path0] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_constant_parameter_mo0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_set_constant_parameter_inline[model_path0] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_constant_parameter_in0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestPySD.test_set_timeseries_parameter[model_path0] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_timeseries_parameter_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_timeseries_parameter_inline[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_timeseries_parameter_1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_set_component_with_real_name[model_path0] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_component_with_real_n0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestPySD.test_set_components_warnings[model_path0] _____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_components_warnings_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_set_components_with_function[model_path0] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_components_with_funct0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_value_with_constant[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_value_wit0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_value_with_partial_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_value_wit1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_value_with_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_value_wit2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestPySD.test_set_parameter_data[model_path0] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_parameter_data_model_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_set_constant_parameter_lookup[model_path0] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_constant_parameter_lo0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_timeseries_parameter_lookup[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_timeseries_parameter_2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_value_with_numpy_error[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_value_wit3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_timeseries_parameter_with_constant[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_timeserie0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_timeseries_parameter_with_partial_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_timeserie1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_subscripted_timeseries_parameter_with_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_subscripted_timeserie2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______________ ERROR at setup of TestPySD.test_docs[model_path0] _______________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_docs_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___________ ERROR at setup of TestPySD.test_initialize[model_path0] ____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_initialize_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________ ERROR at setup of TestPySD.test_set_initial_value[model_path0] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_value_model_p0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_value_subscripted_value_with_constant[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_value_subscri0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_value_subscripted_value_with_partial_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_value_subscri1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_value_subscripted_value_with_xarray[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_value_subscri2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_value_subscripted_value_with_numpy_error[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_value_subscri3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________ ERROR at setup of TestPySD.test_replace_element[model_path0] _________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_replace_element_model_pat0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_condition_origin_full[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_condition_ori0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_condition_origin_short[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_condition_ori1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_condition_for_stock_component[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_condition_for0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_initial_condition_for_constant_component[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_set_initial_condition_for1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________ ERROR at setup of TestPySD.test_get_args[model_path0-args0] __________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_get_args_model_path0_args0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________ ERROR at setup of TestPySD.test_get_args[model_path1-args1] __________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_get_args_model_path1_args0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestPySD.test_get_coords[model_path0-coords0] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_get_coords_model_path0_co0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestPySD.test_get_coords[model_path1-coords1] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_get_coords_model_path1_co0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___________ ERROR at setup of TestPySD.test__integrate[model_path0] ____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test__integrate_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestPySD.test_default_returns_with_lookups[model_path0] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_default_returns_with_look0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/lookups/test_lookups.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/lookups/test_lookups.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______________ ERROR at setup of TestPySD.test_files[model_path0] ______________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_files_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestModelInteraction.test_restart_cache[model_path0] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_restart_cache_model_path00')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________ ERROR at setup of TestDependencies.test_deps[teacup] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_deps_teacup_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestExportImport.test_run_export_import[integ] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_integ_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestExportImport.test_run_export_import[delays] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_delays_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/delays/test_delays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delays/test_delays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____ ERROR at setup of TestExportImport.test_run_export_import[delay_fixed] ____\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_delay_f0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/delay_fixed/test_delay_fixed.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delay_fixed/test_delay_fixed.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____ ERROR at setup of TestExportImport.test_run_export_import[forecast] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_forecas0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/forecast/test_forecast.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/forecast/test_forecast.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestExportImport.test_run_export_import[sample_if_true] ___\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_sample_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/sample_if_true/test_sample_if_true.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/sample_if_true/test_sample_if_true.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestExportImport.test_run_export_import[smooth] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_smooth_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestExportImport.test_run_export_import[trend] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_trend_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscripted_trend/test_subscripted_trend.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_trend/test_subscripted_trend.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestExportImport.test_run_export_import[initial] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_run_export_import_initial0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/initial_function/test_initial.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/initial_function/test_initial.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_file_content[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_file_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_different_types[data] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_diffe0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_different_types[data_exclude] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_diffe1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_different_types[lookup] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_diffe2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_different_types[lookup_subranges] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_diffe3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_externals_different_types[constant] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_externals_diffe4')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_mixed_definitions[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_mixed_definitio0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_ext_subscript[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_ext_subscript_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path0-all-exclude0-included0-excluded0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path1-all-exclude1-included1-excluded1] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an1')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path2-all-None-included2-excluded2] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an2')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path3-include3-None-included3-excluded3] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an3')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path4-include4-None-included4-excluded4] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an4')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_serialize_combine_vars_and_excels[model_path5-include5-None-included5-excluded5] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_serialize_combine_vars_an5')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSerialization.test_incomplete_constant_definition[model_path0] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_incomplete_constant_defin0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestSerialization.test_exceptions[model_path0] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/test_exceptions_model_path0_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestSplitViewsWarnings.test_split_view_warnings[warning_noviews] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_split_views.TestSplitViewsWarnings object at 0x7f4f29e45d50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | shared_tmpdir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/shared5')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(self, shared_tmpdir, model_path, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # move model file to temporary dir\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         file = shared_tmpdir.joinpath(model_path.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copy(_root.joinpath(model_path), file)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_split_views.py:306: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:248: in copy\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     copyfile(src, dst, follow_symlinks=follow_symlinks)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw1/shared5/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copyfile(src, dst, *, follow_symlinks=True):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Copy data from src to dst.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If follow_symlinks is not set and src is a symbolic link, a new\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         symlink will be created instead of copying the file it points to.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if _samefile(src, dst):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         for fn in [src, dst]:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             try:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 st = os.stat(fn)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             except OSError:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 # File most likely does not exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 pass\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 # XXX What about other special files? (sockets, devices...)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 if stat.S_ISFIFO(st.st_mode):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if not follow_symlinks and os.path.islink(src):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             os.symlink(os.readlink(src), dst)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           with open(src, 'rb') as fsrc:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:120: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_translate_file[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_translate_file_test_model0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_translate_file_test_model0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_return_timestamps[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_return_timestamps_tes0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_return_timestamps_tes0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_return_columns[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_return_columns_test_m0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_return_columns_test_m0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_model_arguments[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_model_arguments_test_mode0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_model_arguments_test_mode0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_initial_conditions_tuple_pysafe_names[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_initial_conditions_tuple_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_initial_conditions_tuple_0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_constant_parameter[test-models/samples/teacup/teacup.xmile] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_set_constant_parameter_te0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.xmile')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_set_constant_parameter_te0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_set_timeseries_parameter_lookup[test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_set_timeseries_parameter_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_set_timeseries_parameter_0/get_lookups_subscripted_args')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_export_import[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_export_import_test_models0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_export_import_test_models0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_run_model_with_data[test-models/tests/data_from_other_model/test_data_from_other_model.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_model_with_data_test_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_run_model_with_data_test_0/data_from_other_model')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ ERROR at setup of TestPySD.test_save_without_name[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_save_without_name_test_mo0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_copy(tmp_path, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy test folder to a temporary folder therefore we avoid creating\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         PySD model files in the original folder\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_folder = tmp_path.joinpath(test_model.parent.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       shutil.copytree(test_model.parent, test_folder)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:47: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_save_without_name_test_mo0/teacup')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | symlinks = False, ignore = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | copy_function = <function copy2 at 0x7f1350242dd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ignore_dangling_symlinks = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                  ignore_dangling_symlinks=False):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Recursively copy a directory tree.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The destination directory must not already exist.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If exception(s) occur, an Error is raised with a list of reasons.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the optional symlinks flag is true, symbolic links in the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         source tree result in symbolic links in the destination tree; if\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         it is false, the contents of the files pointed to by symbolic\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         links are copied. If the file pointed by the symlink doesn't\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         exist, an exception will be added in the list of errors raised in\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         an Error exception at the end of the copy process.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         You can set the optional ignore_dangling_symlinks flag to true if you\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         want to silence this exception. Notice that this has no effect on\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         platforms that don't support os.symlink.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional ignore argument is a callable. If given, it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is called with the `src` parameter, which is the directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         being visited by copytree(), and `names` which is the list of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         `src` contents, as returned by os.listdir():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             callable(src, names) -> ignored_names\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Since copytree() is called recursively, the callable will be\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         called once for each directory that is copied. It returns a\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         list of names relative to the `src` directory that should\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         not be copied.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         The optional copy_function argument is a callable that will be used\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to copy each file. It will be called with the source path and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         destination path as arguments. By default, copy2() is used, but any\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         function that supports the same signature (like copy()) can be used.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       names = os.listdir(src)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:318: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________ ERROR at setup of TestModelProperties.test_propierties[teacup] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_model_attributes.TestModelProperties object at 0x7f13238ea350>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | shared_tmpdir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/shared6')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | subview_sep = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | input_file = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(self, shared_tmpdir, model_path, subview_sep, _root, input_file):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Translate the model or read a translated version.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         This way each file is only translated once.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # expected file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         file = shared_tmpdir.joinpath(model_path.with_suffix(\".py\").name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if file.is_file():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # load already translated file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             return pysd.load(file)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # copy mdl file to tmp_dir and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             file = shared_tmpdir.joinpath(model_path.name)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           shutil.copy(_root.joinpath(model_path), file)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_model_attributes.py:55: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:248: in copy\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     copyfile(src, dst, follow_symlinks=follow_symlinks)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | src = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | dst = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/shared6/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def copyfile(src, dst, *, follow_symlinks=True):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"Copy data from src to dst.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If follow_symlinks is not set and src is a symbolic link, a new\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         symlink will be created instead of copying the file it points to.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if _samefile(src, dst):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         for fn in [src, dst]:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             try:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 st = os.stat(fn)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             except OSError:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 # File most likely does not exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 pass\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 # XXX What about other special files? (sockets, devices...)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 if stat.S_ISFIFO(st.st_mode):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if not follow_symlinks and os.path.islink(src):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             os.symlink(os.readlink(src), dst)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           with open(src, 'rb') as fsrc:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/shutil.py:120: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______ ERROR at setup of TestOutput.test_invalid_output_file[model_path0] ______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_invalid_output_file_model0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________ ERROR at setup of TestOutput.test_output_nc[lookups] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_nc_lookups_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____________ ERROR at setup of TestOutput.test_output_nc[constants] ____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_nc_constants_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________ ERROR at setup of TestOutput.test_output_nc[numeric_coords] __________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_nc_numeric_coords_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __________ ERROR at setup of TestOutput.test_output_nc[variable_step] __________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_nc_variable_step_0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/control_vars/test_control_vars.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestOutput.test_output_nc[partial_definitions] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_nc_partial_definit0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestOutput.test_output_csv[model_path0-csv-,] ________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_csv_model_path0_cs0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______ ERROR at setup of TestOutput.test_output_csv[model_path1-tab-\\t] _______\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_output_csv_model_path1_ta0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __ ERROR at setup of TestOutput.test_dataset_handler_step_setter[model_path0] __\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/popen-gw0/test_dataset_handler_step_sett0')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.fixture\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def model(_root, tmp_path, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Copy model to the tmp_path and translate it\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (_root / model_path).exists(), \"The model doesn't exist\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E        +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/conftest.py:35: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | =================================== FAILURES ===================================\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______________________ TestPySD.test_run_ignore_missing _______________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestPySD object at 0x7f4f29a76b10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_run_ignore_missing(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model_mdl = _root.joinpath(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             'test-models/tests/get_with_missing_values_xlsx/'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             + 'test_get_with_missing_values_xlsx.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model_py = _root.joinpath(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             'test-models/tests/get_with_missing_values_xlsx/'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             + 'test_get_with_missing_values_xlsx.py')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # ignore warnings for missing values\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       model = pysd.read_vensim(model_mdl, missing_values=\"ignore\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:55: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx/test_get_with_missing_values_xlsx.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx/test_get_with_missing_values_xlsx.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx/test_get_with_missing_values_xlsx.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____________________________ TestPySD.test_getitem _____________________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestPySD object at 0x7f4f29a55190>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_getitem(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       model = pysd.read_vensim(_root / test_model)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1123: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________________________ TestPySD.test_get_series_data _________________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestPySD object at 0x7f4f29a55890>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_get_series_data(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       model = pysd.read_vensim(_root / test_model)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1156: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __________ TestPySD.test_default_returns_with_construction_functions ___________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestPySD object at 0x7f4f29a55d10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_default_returns_with_construction_functions(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         If the run function is called with no arguments, should still be able\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         to get default return functions.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model = pysd.read_vensim(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           _root.joinpath(\"test-models/tests/delays/test_delays.mdl\"))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1250: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___________________ TestModelInteraction.test_multiple_load ____________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestModelInteraction object at 0x7f4f29a53f50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_multiple_load(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Test that we can load and run multiple models at the same time,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         and that the models don't interact with each other. This can\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         happen if we arent careful about class attributes vs instance\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         attributes\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         This test responds to issue:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         https://github.com/SDXorg/pysd/issues/23\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model_1 = pysd.read_vensim(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           _root.joinpath(\"test-models/samples/teacup/teacup.mdl\"))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1305: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____________________ TestModelInteraction.test_no_crosstalk ____________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestModelInteraction object at 0x7f4f29a554d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_no_crosstalk(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Need to check that if we instantiate two copies of the same model,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         changes to one copy do not influence the other copy.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Checks for issue: https://github.com/SDXorg/pysd/issues/108\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         that time is not shared between the two models\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # Todo: this test could be made more comprehensive\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model_1 = pysd.read_vensim(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           _root.joinpath(\"test-models/samples/teacup/teacup.mdl\"))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1327: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____________________ TestMultiRun.test_delay_reinitializes _____________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_pysd.TestMultiRun object at 0x7f4f29a53110>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_delay_reinitializes(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model = pysd.read_vensim(_root.joinpath(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           \"test-models/tests/delays/test_delays.mdl\"))\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_pysd.py:1371: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ TestPySD.test_read_not_valid_new_value[test-models/samples/teacup/teacup.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw0] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_cli.TestPySD object at 0x7f1323ad1f50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | test_model = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.mark.parametrize(\"model\", [test_model_ven])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_not_valid_new_value(self, test_model):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         new_value = \"foo=[1,2,3]\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         command = f\"{call} {test_model} {new_value}\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         out = subprocess.run(split_bash(command), capture_output=True)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         stderr = out.stderr.decode(encoding_stderr)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         assert out.returncode != 0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert f\"PySD: error: when parsing {new_value}\" in stderr\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       assert 'PySD: error: when parsing foo=[1,2,3]' in \"usage: python -m pysd [-h] [-v] [-o FILE] [-p] [-r 'var1, var2, .., varN' or FILE .txt]\\n            [-e FILE] [-i FI...596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl\\nThe model file does not exist...\\n\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_pysd/pytest_cli.py:135: AssertionError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __________________________ TestErrors.test_run_python __________________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_benchmarking.TestErrors object at 0x7f4f29e94ed0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_run_python(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_model = _root.joinpath(\"test-models/samples/teacup/teacup.mdl\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       assert (\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             runner(str(test_model))[0]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             == runner(test_model.with_suffix(\".py\"))[0]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         ).all().all()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_tools/pytest_benchmarking.py:132: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_file = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | canonical_file = None, transpose = False, data_files = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def runner(model_file, canonical_file=None, transpose=False, data_files=None):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Translates and runs a model and returns its output and the\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         canonical output.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Parameters\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         ----------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         model_file: str\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Name of the original model file. Must be '.mdl' or '.xmile'.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         canonical_file: str or None (optional)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Canonical output file to read. If None, will search for 'output.csv'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             and 'output.tab' in the model directory. Default is None.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         transpose: bool (optional)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             If True reads transposed canonical file, i.e. one variable per row.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Default is False.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         data_files: list (optional)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             List of the data files needed to run the model.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Returns\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         -------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         output, canon: (pandas.DataFrame, pandas.DataFrame)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             pandas.DataFrame of the model output and the canonical output.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if isinstance(model_file, str):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             model_file = Path(model_file)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         directory = model_file.parent\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # load canonical output\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if not canonical_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             if directory.joinpath('output.csv').is_file():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 canonical_file = directory.joinpath('output.csv')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             elif directory.joinpath('output.tab').is_file():\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 canonical_file = directory.joinpath('output.tab')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >               raise FileNotFoundError(\"\\nCanonical output file not found.\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E               FileNotFoundError: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E               Canonical output file not found.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/tools/benchmarking.py:58: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________________ TestVensimFile.test_read_vensim_file[teacup] _________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f29b7ad50>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_vensim_file(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # assert that the files don't exist in the temporary directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:42: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________________ TestVensimFile.test_read_vensim_file[macros] _________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f29b7a290>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_vensim_file(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # assert that the files don't exist in the temporary directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:42: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ________________ TestVensimFile.test_read_vensim_file[mapping] _________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f29b7ab90>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_vensim_file(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # assert that the files don't exist in the temporary directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:42: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | __________________ TestVensimFile.test_read_vensim_file[data] __________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f29b7a3d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_vensim_file(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # assert that the files don't exist in the temporary directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:42: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _________________ TestVensimFile.test_read_vensim_file[except] _________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f29b7a9d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_read_vensim_file(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # assert that the files don't exist in the temporary directory\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:42: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________ TestVensimFile.test_file_split_file_sections[teacup] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f2a0a0050>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_file_split_file_sections(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:53: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________ TestVensimFile.test_file_split_file_sections[macros] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f2a0a0bd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_file_split_file_sections(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:53: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ____________ TestVensimFile.test_file_split_file_sections[mapping] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f2a0a0fd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_file_split_file_sections(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:53: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ______________ TestVensimFile.test_file_split_file_sections[data] ______________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f2a0a0610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_file_split_file_sections(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:53: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________ TestVensimFile.test_file_split_file_sections[except] _____________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestVensimFile object at 0x7f4f2a0a05d0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_file_split_file_sections(self, model_path):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       ven_file = VensimFile(model_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:53: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ TestRealityChecks.test_reality_checks[test-models/tests/reality_checks/test_reality_checks.mdl] _\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_vensim.TestRealityChecks object at 0x7f4f29afffd0>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | model_path = 'test-models/tests/reality_checks/test_reality_checks.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     @pytest.mark.parametrize(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"model_path\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         [\"test-models/tests/reality_checks/test_reality_checks.mdl\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |          ]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_reality_checks(self, model_path, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         with pytest.warns(UserWarning) as ws:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             model = pysd.read_vensim(_root.joinpath(model_path),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >                                    initialize=False)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_translators/pytest_vensim.py:162: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks/test_reality_checks.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks/test_reality_checks.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks/test_reality_checks.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _____________________ TestComponents.test_load_components ______________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_components.TestComponents object at 0x7f4f29b64610>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_load_components(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_model = _root.joinpath(\"test-models/samples/teacup/teacup.mdl\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_model_py = _root.joinpath(\"test-models/samples/teacup/teacup.py\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       read_vensim(test_model)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_types/components/pytest_components.py:12: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ___________________ TestColumns.test_get_columns_subscripted ___________________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_columns.TestColumns object at 0x7f4f29f7de10>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_get_columns_subscripted(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # test get subscripted columns\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         data_file = _root.joinpath(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"test-models/tests/subscript_3d_arrays_widthwise/output.tab\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         data_file2 = _root.joinpath(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"test-models/tests/subscript_2d_arrays/output.tab\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         subsd = {\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"d3\": [\"Depth 1\", \"Depth 2\"],\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"d2\": [\"Column 1\", \"Column 2\"],\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"d1\": [\"Entry 1\", \"Entry 2\", \"Entry 3\"]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         }\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         cols1 = Columns.get_columns(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             data_file,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >           vars=[\"Three Dimensional Constant\"])[0]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_types/data/pytest_columns.py:85: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/data.py:147: in get_columns\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     columns, transpose = cls.read(file_name, encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/data.py:28: in read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     columns = cls.read_file(file_name, encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/data.py:55: in read_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     out = cls.read_line(file_name, encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/data.py:91: in read_line\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     header=0).iloc[:, 1:])\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/util/_decorators.py:311: in wrapper\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     return func(*args, **kwargs)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/readers.py:683: in read_table\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     return _read(filepath_or_buffer, kwds)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/readers.py:482: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     parser = TextFileReader(filepath_or_buffer, **kwds)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/readers.py:811: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self._engine = self._make_engine(self.engine)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/readers.py:1040: in _make_engine\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/c_parser_wrapper.py:51: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self._open_handles(src, kwds)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/parsers/base_parser.py:229: in _open_handles\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     errors=kwds.get(\"encoding_errors\", \"strict\"),\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | path_or_buf = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise/output.tab')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | mode = 'r', encoding = 'utf-8', compression = None, memory_map = False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | is_text = True, errors = 'strict', storage_options = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def get_handle(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         path_or_buf: FilePathOrBuffer,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         mode: str,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         encoding: str | None = None,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         compression: CompressionOptions = None,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         memory_map: bool = False,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is_text: bool = True,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         errors: str | None = None,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         storage_options: StorageOptions = None,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ) -> IOHandles:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Get file handle for given path/buffer and mode.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Parameters\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         ----------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         path_or_buf : str or file handle\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             File path or object.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         mode : str\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Mode to open path_or_buf with.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         encoding : str or None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Encoding to use.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         compression : str or dict, default None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             If string, specifies compression mode. If dict, value at key 'method'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             specifies compression mode. Compression mode must be one of {'infer',\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             and `filepath_or_buffer` is path-like, then detect compression from\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             no compression). If dict and compression mode is one of\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             {'zip', 'gzip', 'bz2'}, or inferred as one of the above,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             other entries passed as additional compression options.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             .. versionchanged:: 1.0.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                May now be a dict with key 'method' as compression mode\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                and other keys as compression options if compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                mode is 'zip'.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             .. versionchanged:: 1.1.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                Passing compression options as keys in dict is now\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                supported for compression modes 'gzip' and 'bz2' as well as 'zip'.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         memory_map : bool, default False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             See parsers._parser_params for more information.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is_text : bool, default True\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Whether the type of the content passed to the file/buffer is string or\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             bytes. This is not the same as `\"b\" not in mode`. If a string content is\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             passed to a binary file/buffer, a wrapper is inserted.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         errors : str, default 'strict'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Specifies how encoding and decoding errors are to be handled.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             See the errors argument for :func:`open` for a full list\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             of options.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         storage_options: StorageOptions = None\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             Passed to _get_filepath_or_buffer\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         .. versionchanged:: 1.2.0\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         Returns the dataclass IOHandles\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         \"\"\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # Windows does not default to utf-8. Set to utf-8 for a consistent behavior\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         encoding = encoding or \"utf-8\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # read_csv does not know whether the buffer is opened in binary/text mode\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if _is_binary_mode(path_or_buf, mode) and \"b\" not in mode:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             mode += \"b\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # valdiate errors\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if isinstance(errors, str):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             errors = errors.lower()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if errors not in (\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             None,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"strict\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"ignore\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"replace\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"xmlcharrefreplace\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"backslashreplace\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"namereplace\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"surrogateescape\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             \"surrogatepass\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         ):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             raise ValueError(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 f\"Invalid value for `encoding_errors` ({errors}). Please see \"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 + \"https://docs.python.org/3/library/codecs.html#error-handlers \"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 + \"for valid values.\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # open URLs\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         ioargs = _get_filepath_or_buffer(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             path_or_buf,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             encoding=encoding,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             compression=compression,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             mode=mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             storage_options=storage_options,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         handle = ioargs.filepath_or_buffer\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         handles: list[Buffer]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # memory mapping needs to be the first step\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         handle, memory_map, handles = _maybe_memory_map(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             handle,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             memory_map,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             ioargs.encoding,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             ioargs.mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             errors,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             ioargs.compression[\"method\"] not in _compression_to_extension,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         is_path = isinstance(handle, str)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         compression_args = dict(ioargs.compression)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         compression = compression_args.pop(\"method\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         if compression:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # compression libraries do not like an explicit text-mode\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             ioargs.mode = ioargs.mode.replace(\"t\", \"\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # GZ Compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             if compression == \"gzip\":\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 if is_path:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     assert isinstance(handle, str)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     handle = gzip.GzipFile(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         filename=handle,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         mode=ioargs.mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         **compression_args,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     handle = gzip.GzipFile(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         # error: Argument \"fileobj\" to \"GzipFile\" has incompatible type\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         # \"Union[str, Union[IO[Any], RawIOBase, BufferedIOBase, TextIOBase,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         # TextIOWrapper, mmap]]\"; expected \"Optional[IO[bytes]]\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         fileobj=handle,  # type: ignore[arg-type]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         mode=ioargs.mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         **compression_args,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # BZ Compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             elif compression == \"bz2\":\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 handle = bz2.BZ2File(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     # Argument 1 to \"BZ2File\" has incompatible type \"Union[str,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     # Union[IO[Any], RawIOBase, BufferedIOBase, TextIOBase, TextIOWrapper,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     # mmap]]\"; expected \"Union[Union[str, bytes, _PathLike[str],\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     # _PathLike[bytes]], IO[bytes]]\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     handle,  # type: ignore[arg-type]\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     mode=ioargs.mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     **compression_args,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # ZIP Compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             elif compression == \"zip\":\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 handle = _BytesZipFile(handle, ioargs.mode, **compression_args)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 if handle.mode == \"r\":\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     handles.append(handle)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     zip_names = handle.namelist()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     if len(zip_names) == 1:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         handle = handle.open(zip_names.pop())\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     elif len(zip_names) == 0:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         raise ValueError(f\"Zero files found in ZIP file {path_or_buf}\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         raise ValueError(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                             \"Multiple files found in ZIP file. \"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                             f\"Only one file per ZIP: {zip_names}\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                         )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # XZ Compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             elif compression == \"xz\":\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 handle = get_lzma_file(lzma)(handle, ioargs.mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # Unrecognized Compression\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             else:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 msg = f\"Unrecognized compression type: {compression}\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 raise ValueError(msg)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             assert not isinstance(handle, str)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             handles.append(handle)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         elif isinstance(handle, str):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # Check whether the filename is to be opened in binary mode.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             # Binary mode does not support 'encoding' and 'newline'.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |             if ioargs.encoding and \"b\" not in ioargs.mode:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 # Encoding\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 handle = open(\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     handle,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     ioargs.mode,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     encoding=ioargs.encoding,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                     errors=errors,\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >                   newline=\"\",\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |                 )\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E               FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise/output.tab'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pandas/io/common.py:707: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _______________ TestMacroMethods.test_get_elements_to_initialize _______________\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | [gw1] linux -- Python 3.7.11 /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = <pytest_statefuls.TestMacroMethods object at 0x7f4f2a1c9450>\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _root = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def test_get_elements_to_initialize(self, _root):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         from pysd import read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         from pysd.py_backend.model import Macro\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         test_model = _root.joinpath(\"test-models/samples/teacup/teacup.mdl\")\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       read_vensim(test_model)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | tests/pytest_types/statefuls/pytest_statefuls.py:323: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py:144: in read_vensim\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     ven_file = VensimFile(mdl_file, encoding=encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:44: in __init__\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     self.model_text = self._read(encoding)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py:84: in _read\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     encoding = vu._detect_encoding_from_file(self.mdl_path)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py:147: in _detect_encoding_from_file\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     with mdl_file.open(\"rb\") as in_file:\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     opener=self._opener)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | self = PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | name = '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | flags = 524288, mode = 438\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |     def _opener(self, name, flags, mode=0o666):\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |         # A stub for the opener argument to built-in open()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | >       return self._accessor.open(self, flags, mode)\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/report.xml -\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Name                                                  Stmts   Miss  Cover\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | -------------------------------------------------------------------------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/__init__.py                                          4      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/__main__.py                                          6      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/_version.py                                          1      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/__init__.py                                 0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/__init__.py                          0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/imports.py                          27      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/namespace.py                        51      2    96%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/python_expressions_builder.py      634    244    62%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/python_functions.py                  1      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/python_model_builder.py            252     23    91%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/builders/python/subscripts.py                      144     51    65%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/cli/__init__.py                                      1      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/cli/main.py                                         36     16    56%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/cli/parser.py                                       89     18    80%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/__init__.py                               0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/allocation.py                           141     20    86%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/cache.py                                 23      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/components.py                           106      3    97%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/data.py                                 154     10    94%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/external.py                             363      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/functions.py                            185     46    75%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/lookups.py                              107     27    75%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/model.py                                609    144    76%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/output.py                               159     54    66%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/statefuls.py                            268     37    86%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/py_backend/utils.py                                158      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/pysd.py                                             27      6    78%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/tools/__init__.py                                    0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/tools/benchmarking.py                               71      5    93%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/tools/ncfiles.py                                   122      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/__init__.py                              0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/structures/__init__.py                   0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/structures/abstract_expressions.py     121      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/structures/abstract_model.py            68      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/__init__.py                       0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_element.py               267     37    86%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_file.py                  120      3    98%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_section.py                61      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_structures.py              5      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/vensim/vensim_utils.py                  67     14    79%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/__init__.py                        0      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/xmile_element.py                 236    159    33%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/xmile_file.py                     26      8    69%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/xmile_section.py                  69     53    23%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/xmile_structures.py                5      0   100%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | pysd/translators/xmile/xmile_utils.py                    51     33    35%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | -------------------------------------------------------------------------\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | TOTAL                                                  4835   1013    79%\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | =========================== short test summary info ============================\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_ignore_missing - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx/test_get_with_missing_values_xlsx.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestPySD::test_getitem - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestPySD::test_get_series_data - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestPySD::test_default_returns_with_construction_functions - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestModelInteraction::test_multiple_load - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestModelInteraction::test_no_crosstalk - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_pysd.py::TestMultiRun::test_delay_reinitializes - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_pysd/pytest_cli.py::TestPySD::test_read_not_valid_new_value[test-models/samples/teacup/teacup.mdl] - assert 'PySD: error: when parsing foo=[1,2,3]' in \"usage: python -m pysd [-h] [-v] [-o FILE] [-p] [-r 'var1, var2, .., varN' or FILE .txt]\\n            [-e FILE] [-i FI...596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl\\nThe model file does not exist...\\n\"\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_tools/pytest_benchmarking.py::TestErrors::test_run_python - FileNotFoundError: \n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | Canonical output file not found.\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_read_vensim_file[teacup] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_read_vensim_file[macros] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_read_vensim_file[mapping] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_read_vensim_file[data] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_read_vensim_file[except] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_file_split_file_sections[teacup] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_file_split_file_sections[macros] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression/test_macro_multi_expression.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_file_split_file_sections[mapping] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim/test_subscript_mapping_vensim.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_file_split_file_sections[data] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model/test_data_from_other_model.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestVensimFile::test_file_split_file_sections[except] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except/test_except.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_translators/pytest_vensim.py::TestRealityChecks::test_reality_checks[test-models/tests/reality_checks/test_reality_checks.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks/test_reality_checks.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_types/components/pytest_components.py::TestComponents::test_load_components - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_types/data/pytest_columns.py::TestColumns::test_get_columns_subscripted - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise/output.tab'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | FAILED tests/pytest_types/statefuls/pytest_statefuls.py::TestMacroMethods::test_get_elements_to_initialize - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_cross_reference] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_cross_reference'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_expression] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_expression'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_multi_expression] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_expression'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_euler.py::TestEulerConvergence::test_local_truncation_error[teacup] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_euler.py::TestEulerConvergence::test_local_truncation_error[harmonic] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_euler.py::TestEulerConvergence::test_root_mean_square_error[teacup] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_multi_macros] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_multi_macros'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_euler.py::TestEulerConvergence::test_root_mean_square_error[harmonic] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/simple_harmonic_oscillator/simple_harmonic_oscillator.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_stock] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_stock'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[macro_trailing_definition] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/macro_trailing_definition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[model_doc] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[abs] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[active_initial] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[multiple_lines_def] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/multiple_lines_def'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[na] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/na'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[active_initial_circular] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/active_initial_circular'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[nested_functions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/nested_functions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[number_handling] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[odd_number_quotes] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/odd_number_quotes'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[parentheses] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[allocate_available] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_available'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[partial_range_definitions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[power] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/power'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[allocate_by_priority] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/allocate_by_priority'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[arithmetics] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[reality_checks] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reality_checks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[reference_capitalization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[arithmetics_exp] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[repeated_subscript] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/repeated_subscript'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[arguments] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arguments'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[rounding] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[array_with_line_break] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/array_with_line_break'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[sample_if_true] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[smaller_range] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smaller_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[builtin_max] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[smooth] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[smooth_and_stock] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/smooth_and_stock'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[builtin_min] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[special_characters] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/special_characters'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[chained_initialization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[sqrt] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subrange_merge] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subrange_merge'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[conditional_subscripts] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/conditional_subscripts'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[constant_expressions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_1d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_2d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[control_vars] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_3d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[data_from_other_model] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_3d_arrays_lengthwise] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_lengthwise'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[delay_fixed] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_3d_arrays_widthwise] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_3d_arrays_widthwise'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[delay_numeric_error] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_numeric_error'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_aggregation] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_aggregation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[delay_parentheses] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_constant_call] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_constant_call'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[delay_pipeline] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_pipeline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_copy] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[delays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_copy2] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_copy'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_definition] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_definition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[dynamic_final_time] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/dynamic_final_time'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_docs] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_docs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[elm_count] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/elm_count'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_element_name] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_element_name'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[euler_step_vs_saveper] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/euler_step_vs_saveper'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[except] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_individually_defined_1_of_2d_arrays_from_floats] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1_of_2d_arrays_from_floats'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[except_multiple] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_multiple'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_individually_defined_1d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[except_subranges] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/except_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[exp] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_individually_defined_stocks] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_logicals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_mapping_simple] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_simple'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[exponentiation] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_mapping_vensim] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mapping_vensim'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[forecast] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_mixed_assembly] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_mixed_assembly'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[function_capitalization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_multiples] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_multiples'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_numeric_range] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_numeric_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[fully_invalid_names] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/fully_invalid_names'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_selection] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_selection'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[game] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_constants_subranges] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_subranges] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_subranges_equal] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_subranges_equal'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_data_args_3d_xls] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_lookups_data_3d_xls] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_switching] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_switching'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_lookups_subscripted_args] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_lookups_subset] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_transposition] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_transposition'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_mixed_definitions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_subscript_3d_arrays_xls] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscript_updimensioning] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_updimensioning'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_time_value] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_time_value'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_delays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_delays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_values_order] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_values_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_flows] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_with_missing_values_xlsx] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_with_missing_values_xlsx'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[get_xls_cellrange] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_xls_cellrange'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_if_then_else] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_if_then_else'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[if_stmt] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[initial_function] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[input_functions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/input_functions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[invert_matrix] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/invert_matrix'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_logicals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[limits] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[line_breaks] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_lookups] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[line_continuation] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_ramp_step] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_ramp_step'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_round] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_round'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[ln] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_smooth] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[log] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_trend] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[logicals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_trig] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subscripted_xidz] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_xidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_funcnames] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_funcnames'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[subset_duplicated_coord] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subset_duplicated_coord'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_inline] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_inline_bounded] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_bounded'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[tabbed_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/tabbed_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_inline_spaces] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline_spaces'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[time] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/time'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_with_expr] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_with_expr'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[trend] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trend'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[trig] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[unchangeable_constant] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unchangeable_constant'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[lookups_without_range] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_without_range'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[unicode_characters] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/unicode_characters'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[eval_order] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/eval_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[variable_ranges] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/variable_ranges'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[vector_order] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_order'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[exp] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[vector_select] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/vector_select'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[exponentiation] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/exponentiation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[function_capitalization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/function_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[with_lookup] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/with_lookup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[game] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/game'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[xidz_zidz] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[if_stmt] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/if_stmt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_vensim_pathway.py::TestIntegrateVensim::test_read_vensim_file[zeroled_decimals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[abs] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/abs'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[initial_function] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[limits] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/limits'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[arithmetics_exp] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/arithmetics_exp'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[builtin_max] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_max'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[builtin_min] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/builtin_min'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[chained_initialization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/chained_initialization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[line_breaks] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_breaks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[line_continuation] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/line_continuation'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[comparisons] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/comparisons'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[constant_expressions] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/constant_expressions'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[ln] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/ln'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[log] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/log'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[logicals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/logicals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[lookups] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[lookups_xpts_sep] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[lookups_xscale] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[lookups_ypts_sep] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[lookups_inline] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups_inline'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[min_max_1arg] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/min_max_1arg'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[model_doc] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/model_doc'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_all1] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_all2] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_all'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_flows] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_flows_behavior] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_flows'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_stocks] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[non_negative_stocks_behavior] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/non_negative_stocks'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[number_handling] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/number_handling'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[parentheses] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/parentheses'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[pi] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/pi'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[reference_capitalization] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/reference_capitalization'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[rounding] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/rounding'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[sqrt] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sqrt'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[subscript_individually_defined_1d_arrays] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_individually_defined_1d_arrays'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[subscripted_trig] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[trig] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/trig'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[xidz_zidz] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/xidz_zidz'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_integration/pytest_integration_xmile_pathway.py::TestIntegrateXmile::test_read_vensim_file[zeroled_decimals] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/zeroled_decimals'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_includes_last_value[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_build_timeseries[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_progress[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_progress_dynamic[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_return_timestamps[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_return_timestamps_past_final_time[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_return_timestamps_with_range[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_return_columns_original_names[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_return_columns_step[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_reload[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_run_return_columns_pysafe_names[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_conditions_invalid[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_conditions_tuple_pysafe_names[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_conditions_tuple_original_names[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_conditions_current[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_condition_bad_value[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initial_conditions_subscripted_value_with_numpy_error[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_constant_parameter[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_constant_parameter_inline[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_timeseries_parameter[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_timeseries_parameter_inline[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_component_with_real_name[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_components_warnings[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_components_with_function[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_value_with_constant[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_value_with_partial_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_value_with_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_parameter_data[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_constant_parameter_lookup[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_timeseries_parameter_lookup[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_value_with_numpy_error[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_timeseries_parameter_with_constant[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_timeseries_parameter_with_partial_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_subscripted_timeseries_parameter_with_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_docs[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_initialize[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_value[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_value_subscripted_value_with_constant[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_value_subscripted_value_with_partial_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_value_subscripted_value_with_xarray[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_value_subscripted_value_with_numpy_error[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_replace_element[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_condition_origin_full[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_condition_origin_short[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_condition_for_stock_component[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_set_initial_condition_for_constant_component[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_get_args[model_path0-args0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_get_args[model_path1-args1] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_get_coords[model_path0-coords0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_get_coords[model_path1-coords1] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_2d_arrays/test_subscript_2d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test__integrate[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_default_returns_with_lookups[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/lookups/test_lookups.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/lookups/test_lookups.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestPySD::test_files[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestModelInteraction::test_restart_cache[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestDependencies::test_deps[teacup] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[integ] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/samples/teacup/teacup.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[delays] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delays/test_delays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delays/test_delays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[delay_fixed] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/delay_fixed/test_delay_fixed.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/delay_fixed/test_delay_fixed.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[forecast] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/forecast/test_forecast.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/forecast/test_forecast.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[sample_if_true] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/sample_if_true/test_sample_if_true.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/sample_if_true/test_sample_if_true.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[smooth] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_smooth/test_subscripted_smooth.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[trend] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscripted_trend/test_subscripted_trend.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscripted_trend/test_subscripted_trend.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_pysd.py::TestExportImport::test_run_export_import[initial] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/initial_function/test_initial.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/initial_function/test_initial.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_file_content[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_different_types[data] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_different_types[data_exclude] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_data_args_3d_xls/test_get_data_args_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_different_types[lookup] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_different_types[lookup_subranges] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subset/test_get_lookups_subset.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_externals_different_types[constant] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_mixed_definitions[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_mixed_definitions/test_get_mixed_definitions.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_ext_subscript[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path0-all-exclude0-included0-excluded0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path1-all-exclude1-included1-excluded1] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path2-all-None-included2-excluded2] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path3-include3-None-included3-excluded3] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path4-include4-None-included4-excluded4] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_serialize_combine_vars_and_excels[model_path5-include5-None-included5-excluded5] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_data_3d_xls/test_get_lookups_data_3d_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_incomplete_constant_definition[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_incomplete_subscript/test_get_constants_incomplete_subscript.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_serialize_externals.py::TestSerialization::test_exceptions[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_subscript_3d_arrays_xls/test_get_subscript_3d_arrays_xls.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_translators/pytest_split_views.py::TestSplitViewsWarnings::test_split_view_warnings[warning_noviews] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_translate_file[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_run_return_timestamps[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_run_return_columns[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_model_arguments[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_initial_conditions_tuple_pysafe_names[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_set_constant_parameter[test-models/samples/teacup/teacup.xmile] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_set_timeseries_parameter_lookup[test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_export_import[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_run_model_with_data[test-models/tests/data_from_other_model/test_data_from_other_model.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/data_from_other_model'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_cli.py::TestPySD::test_save_without_name[test-models/samples/teacup/teacup.mdl] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_model_attributes.py::TestModelProperties::test_propierties[teacup] - FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/samples/teacup/teacup.mdl'\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_invalid_output_file[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_nc[lookups] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_nc[constants] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_constants_subranges/test_get_constants_subranges.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_nc[numeric_coords] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/subscript_1d_arrays/test_subscript_1d_arrays.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_nc[variable_step] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/control_vars/test_control_vars.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/control_vars/test_control_vars.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_nc[partial_definitions] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/partial_range_definitions/test_partial_range_definitions.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_csv[model_path0-csv-,] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_output_csv[model_path1-tab-\\t] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | ERROR tests/pytest_pysd/pytest_output.py::TestOutput::test_dataset_handler_step_setter[model_path0] - AssertionError: The model doesn't exist\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | assert False\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +  where False = <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')>()\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   |  +    where <bound method Path.exists of PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests/test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')> = (PosixPath('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/tests') / PosixPath('test-models/tests/get_lookups_subscripted_args/test_get_lookups_subscripted_args.mdl')).exists\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   | =========== 23 failed, 363 passed, 20 xfailed, 288 errors in 52.96s ============\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test]   \u274c  Failure - Main Test and coverage\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] exitcode '1': failure\n[1f47eb79-4a63-46dc-8c46-a72aaa678fbc/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/SDXorg-pysd/.github/workflows/ci-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 252.77898931503296
    }
}