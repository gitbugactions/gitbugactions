{
    "repository": "stabacco/stake-python",
    "stars": 53,
    "language": "python",
    "size": 306,
    "clone_url": "https://github.com/stabacco/stake-python.git",
    "timestamp": "2023-06-28T15:34:42.841696Z",
    "clone_success": true,
    "number_of_actions": 4,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_client",
                "name": "test_credentials_login_serializing",
                "time": 0.158,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_credentials_login",
                "time": 1.188,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_equity",
                "name": "test_list_equities[exchange0]",
                "time": 0.127,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_equity",
                "name": "test_list_equities[exchange1]",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_list_fundings[exchange0-request_0]",
                "time": 0.226,
                "results": [
                    {
                        "result": "Failure",
                        "message": "vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/cassettes/test_funding/test_list_fundings[exchange0-request_0].yaml') in your current record mode ('none').\nNo match for the request (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=r9-6577610c&referenceType=Funding>) was found.\nFound 2 similar requests with 1 different matcher(s) :\n\n1 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\nMatchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\nMatchers failed :\nquery - assertion failure :\n[('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\nassert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n  At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n  Full diff:\n  - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n  ?                 ^     ^^^^^\n  + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n  ?                 ^  ++  ++ ^\n\n2 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\nMatchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\nMatchers failed :\nquery - assertion failure :\n[('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\nassert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n  At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n  Full diff:\n  - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n  ?                 ^     ^^^^^\n  + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n  ?                 ^  ++  ++ ^",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_list_fundings[exchange1-request_1]",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_cash_available[exchange0]",
                "time": 0.182,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_cash_available[exchange1]",
                "time": 0.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_funds_in_flight[exchange0]",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funding",
                "name": "test_funds_in_flight[exchange1]",
                "time": 0.13,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_fx",
                "name": "test_fx_conversion",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_integration",
                "name": "test_integration[exchange0]",
                "time": 0.166,
                "results": [
                    {
                        "result": "Failure",
                        "message": "stake.client.InvalidLoginException: Invalid Session Token",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_integration",
                "name": "test_integration[exchange1]",
                "time": 0.168,
                "results": [
                    {
                        "result": "Failure",
                        "message": "stake.client.InvalidLoginException: Invalid Session Token",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_market",
                "name": "test_check_market_status[exchange0]",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_market",
                "name": "test_check_market_status[exchange1]",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_order",
                "name": "test_list_orders[exchange0]",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_order",
                "name": "test_list_orders[exchange1]",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_order",
                "name": "test_cancel_order[exchange0]",
                "time": 0.152,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_order",
                "name": "test_cancel_order[exchange1]",
                "time": 0.195,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_find_products_by_name[exchange0]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_find_products_by_name[exchange1]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_product_serializer",
                "time": 0.269,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_get_product[exchange0-symbols0]",
                "time": 0.219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_get_product[exchange1-symbols1]",
                "time": 0.199,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_search_products[exchange0-CBA]",
                "time": 0.17,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"stake.client.InvalidLoginException: Invalid Session Token\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_product",
                "name": "test_search_products[exchange1-MSFT]",
                "time": 0.165,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"stake.client.InvalidLoginException: Invalid Session Token\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ratings",
                "name": "test_list_ratings",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ratings",
                "name": "test_list_ratings_unknown",
                "time": 0.152,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_stop_buy",
                "time": 0.23,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_limit_buy",
                "time": 0.209,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_limit_sell",
                "time": 0.206,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_successful_trade[exchange0-request_0]",
                "time": 0.291,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_successful_trade[exchange1-request_1]",
                "time": 0.288,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_successful_trade[exchange2-request_2]",
                "time": 0.266,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_successful_trade[exchange3-request_3]",
                "time": 0.266,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_sell[exchange0-request_0]",
                "time": 0.34,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_trade",
                "name": "test_sell[exchange1-request_1]",
                "time": 0.242,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_transaction",
                "name": "test_list_transactions[exchange0-request_0]",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_transaction",
                "name": "test_list_transactions[exchange1-request_1]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_watchlist",
                "name": "test_add_to_watchlist",
                "time": 0.132,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_watchlist",
                "name": "test_remove_from_watchlist",
                "time": 0.153,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_watchlist",
                "name": "test_list_watchlist",
                "time": 0.105,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_watchlist",
                "name": "test_create_watchlist[exchange0-symbols0]",
                "time": 0.484,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_watchlist",
                "name": "test_create_watchlist[exchange1-symbols1]",
                "time": 0.508,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \ud83d\ude80  Start image=crawlergpt:latest\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python] user=0 workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2601  git clone 'https://github.com/abatilo/actions-poetry' # ref=v2.0.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Pre Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Pre Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2601  git clone 'https://github.com/EndBug/add-and-commit' # ref=v4.4.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2601  git clone 'https://github.com/codacy/codacy-coverage-reporter-action' # ref=master\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Pre Run codacy-coverage-reporter\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Pre Run codacy-coverage-reporter\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \ud83e\uddea  Matrix: map[os:ubuntu-latest poetry-version:1.3.2 python-version:3.8]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Main actions/checkout@v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Main actions/checkout@v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Main actions/setup-python@v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/e3e9daca-b6e3-4d00-b06a-6986c937acf5/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? false\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::explicit? true\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::evaluating 6 versions\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::matched: 3.8.11\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Successfully setup CPython (3.8.11)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Main actions/setup-python@v2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2699  ::set-output:: python-version=3.8.11\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Main Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/e3e9daca-b6e3-4d00-b06a-6986c937acf5/act/abatilo-actions-poetry@v2.0.0/ dst=/var/run/act/actions/abatilo-actions-poetry@v2.0.0/\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/abatilo-actions-poetry@v2.0.0/] user=0 workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Main pip install poetry==1.3.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting poetry==1.3.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading poetry-1.3.2-py3-none-any.whl (218 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting packaging>=20.4\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting dulwich<0.21.0,>=0.20.46\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading dulwich-0.20.50-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (502 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting urllib3<2.0.0,>=1.26.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting requests<3.0,>=2.18\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting pexpect<5.0.0,>=4.7.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting filelock<4.0.0,>=3.8.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting shellingham<2.0,>=1.5\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading shellingham-1.5.0.post1-py2.py3-none-any.whl (9.4 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting poetry-core==1.4.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading poetry_core-1.4.0-py3-none-any.whl (546 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting trove-classifiers>=2022.5.19\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading trove_classifiers-2023.5.24-py3-none-any.whl (13 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting requests-toolbelt<0.11.0,>=0.9.1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading requests_toolbelt-0.10.1-py2.py3-none-any.whl (54 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting html5lib<2.0,>=1.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting crashtest<0.5.0,>=0.4.1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading crashtest-0.4.1-py3-none-any.whl (7.6 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting tomlkit!=0.11.2,!=0.11.3,<1.0.0,>=0.11.1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting pkginfo<2.0,>=1.5\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting jsonschema<5.0.0,>=4.10.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting cleo<3.0.0,>=2.0.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading cleo-2.0.1-py3-none-any.whl (77 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting virtualenv!=20.4.5,!=20.4.6,<21.0.0,>=20.4.3\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting platformdirs<3.0.0,>=2.5.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading platformdirs-2.6.2-py3-none-any.whl (14 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting tomli<3.0.0,>=2.0.1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting cachecontrol[filecache]<0.13.0,>=0.12.9\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading CacheControl-0.12.14-py2.py3-none-any.whl (21 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting importlib-metadata<5.0,>=4.4\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading importlib_metadata-4.13.0-py3-none-any.whl (23 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting keyring<24.0.0,>=23.9.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting poetry-plugin-export<2.0.0,>=1.2.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading poetry_plugin_export-1.4.0-py3-none-any.whl (10 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting lockfile<0.13.0,>=0.12.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading lockfile-0.12.2-py2.py3-none-any.whl (13 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting msgpack>=0.5.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading msgpack-1.0.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (322 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting rapidfuzz<3.0.0,>=2.2.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading rapidfuzz-2.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting six>=1.9\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting webencodings\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting zipp>=0.5\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting importlib-resources>=1.4.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting pkgutil-resolve-name>=1.3.10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading pkgutil_resolve_name-1.3.10-py3-none-any.whl (4.7 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting attrs>=17.4.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting jeepney>=0.4.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting jaraco.classes\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting SecretStorage>=3.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting ptyprocess>=0.5\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting poetry-plugin-export<2.0.0,>=1.2.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading poetry_plugin_export-1.3.1-py3-none-any.whl (10 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting certifi>=2017.4.17\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting charset-normalizer<4,>=2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting idna<4,>=2.5\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting cryptography>=2.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting cffi>=1.12\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting pycparser\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting distlib<1,>=0.3.6\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting virtualenv!=20.4.5,!=20.4.6,<21.0.0,>=20.4.3\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading virtualenv-20.22.0-py3-none-any.whl (3.2 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading virtualenv-20.21.1-py3-none-any.whl (8.7 MB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Collecting more-itertools\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Installing collected packages: pycparser, urllib3, idna, charset-normalizer, cffi, certifi, zipp, requests, msgpack, more-itertools, jeepney, cryptography, webencodings, six, SecretStorage, rapidfuzz, pyrsistent, ptyprocess, poetry-core, platformdirs, pkgutil-resolve-name, lockfile, jaraco.classes, importlib-resources, importlib-metadata, filelock, distlib, crashtest, cachecontrol, attrs, virtualenv, trove-classifiers, tomlkit, tomli, shellingham, requests-toolbelt, poetry-plugin-export, pkginfo, pexpect, packaging, keyring, jsonschema, html5lib, dulwich, cleo, poetry\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Successfully installed SecretStorage-3.3.3 attrs-23.1.0 cachecontrol-0.12.14 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 cleo-2.0.1 crashtest-0.4.1 cryptography-41.0.1 distlib-0.3.6 dulwich-0.20.50 filelock-3.12.2 html5lib-1.1 idna-3.4 importlib-metadata-4.13.0 importlib-resources-5.12.0 jaraco.classes-3.2.3 jeepney-0.8.0 jsonschema-4.17.3 keyring-23.13.1 lockfile-0.12.2 more-itertools-9.1.0 msgpack-1.0.5 packaging-23.1 pexpect-4.8.0 pkginfo-1.9.6 pkgutil-resolve-name-1.3.10 platformdirs-2.6.2 poetry-1.3.2 poetry-core-1.4.0 poetry-plugin-export-1.3.1 ptyprocess-0.7.0 pycparser-2.21 pyrsistent-0.19.3 rapidfuzz-2.15.1 requests-2.31.0 requests-toolbelt-0.10.1 shellingham-1.5.0.post1 six-1.16.0 tomli-2.0.1 tomlkit-0.11.8 trove-classifiers-2023.5.24 urllib3-1.26.16 virtualenv-20.21.1 webencodings-0.5.1 zipp-3.15.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Main pip install poetry==1.3.2\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Main Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Main Run Tests\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Creating virtualenv stake-iNhXrU40-py3.8 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Installing dependencies from lock file\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Package operations: 53 installs, 1 update, 0 removals\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing attrs (22.2.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing exceptiongroup (1.1.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing iniconfig (2.0.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing packaging (23.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pluggy (1.0.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing tomli (2.0.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing coverage (7.1.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing idna (3.4)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing multidict (6.0.4)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest (7.2.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing distlib (0.3.6)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing filelock (3.9.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing platformdirs (2.6.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-cov (4.0.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing frozenlist (1.3.3)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pyyaml (6.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing six (1.16.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Updating setuptools (67.6.1 -> 67.1.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing ruamel-yaml-clib (0.2.7)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing yarl (1.8.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing wrapt (1.14.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing aiosignal (1.3.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing appdirs (1.4.4)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing async-timeout (4.0.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing cfgv (3.3.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing charset-normalizer (2.1.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing click (8.1.3)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing identify (2.5.17)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pathspec (0.11.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-cover (3.0.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing regex (2022.10.31)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing ruamel-yaml (0.17.21)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing text-unidecode (1.3)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing typed-ast (1.5.4)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing typing-extensions (4.4.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing toml (0.10.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing nodeenv (1.7.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing virtualenv (20.16.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing vcrpy (4.2.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing python-dateutil (2.8.2)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing aiohttp (3.8.3)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing black (19.10b0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing coverage-badge (1.1.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing faker (4.18.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing inflection (0.5.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pre-commit (2.21.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pre-commit-hooks (3.4.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-asyncio (0.14.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-coverage (0.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pydantic (1.10.4)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-recording (0.12.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing python-dotenv (0.13.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing pytest-mock (3.10.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   \u2022 Installing single-version (1.5.1)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Installing the current project: stake (0.3.0)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ============================= test session starts ==============================\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | platform linux -- Python 3.8.11, pytest-7.2.1, pluggy-1.0.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | plugins: asyncio-0.14.0, cov-4.0.0, mock-3.10.0, recording-0.12.1, Faker-4.18.0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | collected 44 items\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_client.py ..                                                  [  4%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_equity.py ..                                                  [  9%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_funding.py F.....                                             [ 22%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_fx.py .                                                       [ 25%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_integration.py FF                                             [ 29%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_market.py ..                                                  [ 34%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_order.py ....                                                 [ 43%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_product.py .....EE                                            [ 59%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_ratings.py ..                                                 [ 63%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_trade.py .........                                            [ 84%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_transaction.py ..                                             [ 88%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_watchlist.py .....                                            [100%]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ==================================== ERRORS ====================================\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ____________ ERROR at setup of test_search_products[exchange0-CBA] _____________\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798c19c40>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:246: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798c19c40>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(self, url: str, payload: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Performs an HTTP get operation.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url (str): the current endpoint\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             payload (dict): The request's body.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             dict: the json response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return await self.http_client.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url, payload=payload, headers=self.headers.dict(by_alias=True)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:187: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': ''}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @staticmethod\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(url: str, payload: dict = None, headers: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async with aiohttp.ClientSession(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers=headers, raise_for_status=True\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           response = await session.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 HttpClient.url(url), headers=headers, json=payload\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:80: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <aiohttp.client.ClientSession object at 0x7f9798c19520>, method = 'GET'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | str_or_url = 'https://global-prd-api.hellostake.com/api/user'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def _request(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         method: str,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         str_or_url: StrOrURL,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         *,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         params: Optional[Mapping[str, str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         data: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         json: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookies: Optional[LooseCookies] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_auto_headers: Optional[Iterable[str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         allow_redirects: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         max_redirects: int = 10,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         compress: Optional[str] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         chunked: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         expect100: bool = False,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         raise_for_status: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_until_eof: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy: Optional[StrOrURL] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timeout: Union[ClientTimeout, object] = sentinel,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         verify_ssl: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         fingerprint: Optional[bytes] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl_context: Optional[SSLContext] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl: Optional[Union[SSLContext, bool, Fingerprint]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         trace_request_ctx: Optional[SimpleNamespace] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_bufsize: Optional[int] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> ClientResponse:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # NOTE: timeout clamps existing connect and read timeouts.  We cannot\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # set the default to None because we need to detect if the user wants\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # to use the existing timeouts by setting timeout to None.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if self.closed:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise RuntimeError(\"Session is closed\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl = _merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if data is not None and json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 \"data and json parameters can not be used at the same time\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         elif json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             data = payload.JsonPayload(json, dumps=self._json_serialize)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not isinstance(chunked, bool) and chunked is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             warnings.warn(\"Chunk size is deprecated #1615\", DeprecationWarning)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         redirects = 0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         history = []\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         version = self._version\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # Merge with default headers and transform to CIMultiDict\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = self._prepare_headers(headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers = self._prepare_headers(proxy_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url = self._build_url(str_or_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise InvalidURL(str_or_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_headers = set(self._skip_auto_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if skip_auto_headers is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for i in skip_auto_headers:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 skip_headers.add(istr(i))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidURL(proxy) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if timeout is sentinel:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             real_timeout: ClientTimeout = self._timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if not isinstance(timeout, ClientTimeout):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = ClientTimeout(total=timeout)  # type: ignore[arg-type]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # timeout is cumulative for all request operations\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # (request, redirects, responses, data consuming)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tm = TimeoutHandle(self._loop, real_timeout.total)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         handle = tm.start()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if read_bufsize is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             read_bufsize = self._read_bufsize\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         traces = [\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             Trace(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config.trace_config_ctx(trace_request_ctx=trace_request_ctx),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for trace_config in self._trace_configs\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             await trace.send_request_start(method, url.update_query(params), headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timer = tm.timer()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             with timer:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 while True:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     url, auth_from_url = strip_auth_from_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth and auth_from_url:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTH argument with \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"credentials encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = auth_from_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = self._default_auth\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # It would be confusing if we support explicit\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # Authorization header with auth argument\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and auth is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and hdrs.AUTHORIZATION in headers\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTHORIZATION header \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"with AUTH argument or credentials \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     all_cookies = self._cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if cookies is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar = CookieJar()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar.update_cookies(cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         req_cookies = tmp_cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if req_cookies:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             all_cookies.load(req_cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     elif self._trust_env:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         with suppress(LookupError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             proxy, proxy_auth = get_env_proxy_for_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     req = self._request_class(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         method,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params=params,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers=headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_auto_headers=skip_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         data=data,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         cookies=all_cookies,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth=auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         version=version,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         compress=compress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         chunked=chunked,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         expect100=expect100,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         loop=self._loop,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         response_class=self._response_class,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy=proxy,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_auth=proxy_auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         session=self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ssl=ssl,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_headers=proxy_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         traces=traces,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # connection timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         async with ceil_timeout(real_timeout.connect):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             assert self._connector is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn = await self._connector.connect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 req, traces=traces, timeout=real_timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except asyncio.TimeoutError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ServerTimeoutError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Connection timeout \" \"to host {}\".format(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.transport is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.protocol is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     conn.protocol.set_response_params(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_payload=method.upper() == \"HEAD\",\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_until_eof=read_until_eof,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auto_decompress=self._auto_decompress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_timeout=real_timeout.sock_read,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_bufsize=read_bufsize,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp = await req.send(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 await resp.start(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except ClientError:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except OSError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if exc.errno is None and isinstance(exc, asyncio.TimeoutError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ClientOSError(*exc.args) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     self._cookie_jar.update_cookies(resp.cookies, resp.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # redirects\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if resp.status in (301, 302, 303, 307, 308) and allow_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             await trace.send_request_redirect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 method, url.update_query(params), headers, resp\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         redirects += 1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         history.append(resp)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if max_redirects and redirects >= max_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise TooManyRedirects(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 history[0].request_info, tuple(history)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # For 301 and 302, mimic IE, now changed in RFC\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # https://github.com/kennethreitz/requests/pull/269\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if (resp.status == 303 and resp.method != hdrs.METH_HEAD) or (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.status in (301, 302) and resp.method == hdrs.METH_POST\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             method = hdrs.METH_GET\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             data = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             if headers.get(hdrs.CONTENT_LENGTH):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 headers.pop(hdrs.CONTENT_LENGTH)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         r_url = resp.headers.get(hdrs.LOCATION) or resp.headers.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             hdrs.URI\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if r_url is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # see github.com/aio-libs/aiohttp/issues/2022\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # reading from correct redirection\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # response is forbidden\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = URL(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 r_url, encoded=not self._requote_redirect_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise InvalidURL(r_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         scheme = parsed_url.scheme\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if scheme not in (\"http\", \"https\", \"\"):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise ValueError(\"Can redirect only to http or https\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         elif not scheme:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = url.join(parsed_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if url.origin() != parsed_url.origin():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             auth = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             headers.pop(hdrs.AUTHORIZATION, None)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url = parsed_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         continue\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # check response status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise_for_status = self._raise_for_status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >               resp.raise_for_status()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client.py:643: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <ClientResponse(https://global-prd-api.hellostake.com/api/user) [401 Unauthorized]>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | <CIMultiDictProxy('Content-Type': ... (CloudFront)', 'X-Amz-Cf-Pop': 'ARN1-C1', 'X-Amz-Cf-Id': 'D8JMSS5Lx5R1i3mAgeF4itCcx61Tbmz_tInE3jYFWbpFpLfKAk6uiQ==')>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def raise_for_status(self) -> None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not self.ok:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # reason should always be not None for a started response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             assert self.reason is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise ClientResponseError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.request_info,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.history,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 status=self.status,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 message=self.reason,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 headers=self.headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           aiohttp.client_exceptions.ClientResponseError: 401, message='Unauthorized', url=URL('https://global-prd-api.hellostake.com/api/user')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1005: ClientResponseError\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | The above exception was the direct cause of the following exception:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | args = ()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | kwargs = {'mocker': <pytest_mock.plugin.MockerFixture object at 0x7f9798c19ee0>, 'request': <SubRequest 'tracing_client' for <Function test_search_products[exchange0-CBA]>>}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | request = <SubRequest 'tracing_client' for <Function test_search_products[exchange0-CBA]>>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f9798c0fd30>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f9798c0ff70>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def wrapper(*args, **kwargs):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         loop = fixture_stripper.get_and_strip_from(FixtureStripper.EVENT_LOOP, kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request = fixture_stripper.get_and_strip_from(FixtureStripper.REQUEST, kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         gen_obj = generator(*args, **kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async def setup():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             res = await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             return res\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         def finalizer():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             \"\"\"Yield again, to finalize.\"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             async def async_finalizer():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 except StopAsyncIteration:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     pass\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     msg = \"Async generator fixture didn't stop.\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     msg += \"Yield only once.\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     raise ValueError(msg)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             loop.run_until_complete(async_finalizer())\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request.addfinalizer(finalizer)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return loop.run_until_complete(setup())\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/pytest_asyncio/plugin.py:127: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     return future.result()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/pytest_asyncio/plugin.py:110: in setup\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     res = await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/conftest.py:16: in tracing_client\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async with StakeClient() as client:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:254: in __aenter__\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     await self.login(self._login_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798c19c40>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise InvalidLoginException(\"Invalid Session Token\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:248: InvalidLoginException\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ____________ ERROR at setup of test_search_products[exchange1-MSFT] ____________\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798997df0>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:246: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798997df0>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(self, url: str, payload: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Performs an HTTP get operation.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url (str): the current endpoint\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             payload (dict): The request's body.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             dict: the json response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return await self.http_client.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url, payload=payload, headers=self.headers.dict(by_alias=True)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:187: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': ''}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @staticmethod\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(url: str, payload: dict = None, headers: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async with aiohttp.ClientSession(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers=headers, raise_for_status=True\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           response = await session.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 HttpClient.url(url), headers=headers, json=payload\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:80: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <aiohttp.client.ClientSession object at 0x7f97980f7e50>, method = 'GET'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | str_or_url = 'https://global-prd-api.hellostake.com/api/user'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def _request(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         method: str,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         str_or_url: StrOrURL,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         *,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         params: Optional[Mapping[str, str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         data: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         json: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookies: Optional[LooseCookies] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_auto_headers: Optional[Iterable[str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         allow_redirects: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         max_redirects: int = 10,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         compress: Optional[str] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         chunked: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         expect100: bool = False,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         raise_for_status: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_until_eof: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy: Optional[StrOrURL] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timeout: Union[ClientTimeout, object] = sentinel,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         verify_ssl: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         fingerprint: Optional[bytes] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl_context: Optional[SSLContext] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl: Optional[Union[SSLContext, bool, Fingerprint]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         trace_request_ctx: Optional[SimpleNamespace] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_bufsize: Optional[int] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> ClientResponse:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # NOTE: timeout clamps existing connect and read timeouts.  We cannot\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # set the default to None because we need to detect if the user wants\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # to use the existing timeouts by setting timeout to None.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if self.closed:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise RuntimeError(\"Session is closed\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl = _merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if data is not None and json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 \"data and json parameters can not be used at the same time\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         elif json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             data = payload.JsonPayload(json, dumps=self._json_serialize)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not isinstance(chunked, bool) and chunked is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             warnings.warn(\"Chunk size is deprecated #1615\", DeprecationWarning)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         redirects = 0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         history = []\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         version = self._version\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # Merge with default headers and transform to CIMultiDict\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = self._prepare_headers(headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers = self._prepare_headers(proxy_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url = self._build_url(str_or_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise InvalidURL(str_or_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_headers = set(self._skip_auto_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if skip_auto_headers is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for i in skip_auto_headers:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 skip_headers.add(istr(i))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidURL(proxy) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if timeout is sentinel:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             real_timeout: ClientTimeout = self._timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if not isinstance(timeout, ClientTimeout):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = ClientTimeout(total=timeout)  # type: ignore[arg-type]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # timeout is cumulative for all request operations\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # (request, redirects, responses, data consuming)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tm = TimeoutHandle(self._loop, real_timeout.total)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         handle = tm.start()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if read_bufsize is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             read_bufsize = self._read_bufsize\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         traces = [\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             Trace(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config.trace_config_ctx(trace_request_ctx=trace_request_ctx),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for trace_config in self._trace_configs\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             await trace.send_request_start(method, url.update_query(params), headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timer = tm.timer()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             with timer:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 while True:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     url, auth_from_url = strip_auth_from_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth and auth_from_url:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTH argument with \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"credentials encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = auth_from_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = self._default_auth\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # It would be confusing if we support explicit\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # Authorization header with auth argument\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and auth is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and hdrs.AUTHORIZATION in headers\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTHORIZATION header \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"with AUTH argument or credentials \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     all_cookies = self._cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if cookies is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar = CookieJar()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar.update_cookies(cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         req_cookies = tmp_cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if req_cookies:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             all_cookies.load(req_cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     elif self._trust_env:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         with suppress(LookupError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             proxy, proxy_auth = get_env_proxy_for_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     req = self._request_class(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         method,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params=params,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers=headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_auto_headers=skip_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         data=data,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         cookies=all_cookies,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth=auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         version=version,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         compress=compress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         chunked=chunked,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         expect100=expect100,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         loop=self._loop,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         response_class=self._response_class,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy=proxy,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_auth=proxy_auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         session=self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ssl=ssl,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_headers=proxy_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         traces=traces,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # connection timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         async with ceil_timeout(real_timeout.connect):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             assert self._connector is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn = await self._connector.connect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 req, traces=traces, timeout=real_timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except asyncio.TimeoutError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ServerTimeoutError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Connection timeout \" \"to host {}\".format(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.transport is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.protocol is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     conn.protocol.set_response_params(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_payload=method.upper() == \"HEAD\",\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_until_eof=read_until_eof,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auto_decompress=self._auto_decompress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_timeout=real_timeout.sock_read,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_bufsize=read_bufsize,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp = await req.send(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 await resp.start(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except ClientError:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except OSError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if exc.errno is None and isinstance(exc, asyncio.TimeoutError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ClientOSError(*exc.args) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     self._cookie_jar.update_cookies(resp.cookies, resp.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # redirects\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if resp.status in (301, 302, 303, 307, 308) and allow_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             await trace.send_request_redirect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 method, url.update_query(params), headers, resp\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         redirects += 1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         history.append(resp)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if max_redirects and redirects >= max_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise TooManyRedirects(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 history[0].request_info, tuple(history)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # For 301 and 302, mimic IE, now changed in RFC\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # https://github.com/kennethreitz/requests/pull/269\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if (resp.status == 303 and resp.method != hdrs.METH_HEAD) or (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.status in (301, 302) and resp.method == hdrs.METH_POST\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             method = hdrs.METH_GET\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             data = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             if headers.get(hdrs.CONTENT_LENGTH):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 headers.pop(hdrs.CONTENT_LENGTH)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         r_url = resp.headers.get(hdrs.LOCATION) or resp.headers.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             hdrs.URI\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if r_url is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # see github.com/aio-libs/aiohttp/issues/2022\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # reading from correct redirection\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # response is forbidden\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = URL(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 r_url, encoded=not self._requote_redirect_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise InvalidURL(r_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         scheme = parsed_url.scheme\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if scheme not in (\"http\", \"https\", \"\"):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise ValueError(\"Can redirect only to http or https\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         elif not scheme:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = url.join(parsed_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if url.origin() != parsed_url.origin():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             auth = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             headers.pop(hdrs.AUTHORIZATION, None)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url = parsed_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         continue\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # check response status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise_for_status = self._raise_for_status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >               resp.raise_for_status()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client.py:643: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <ClientResponse(https://global-prd-api.hellostake.com/api/user) [401 Unauthorized]>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | <CIMultiDictProxy('Content-Type': ... (CloudFront)', 'X-Amz-Cf-Pop': 'ARN1-C1', 'X-Amz-Cf-Id': 'WfurdJue1nq_C5lhU-FiNZN9xJs4a5bV9ciieDs16_2AZh-V3EzoJg==')>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def raise_for_status(self) -> None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not self.ok:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # reason should always be not None for a started response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             assert self.reason is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise ClientResponseError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.request_info,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.history,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 status=self.status,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 message=self.reason,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 headers=self.headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           aiohttp.client_exceptions.ClientResponseError: 401, message='Unauthorized', url=URL('https://global-prd-api.hellostake.com/api/user')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1005: ClientResponseError\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | The above exception was the direct cause of the following exception:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | args = ()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | kwargs = {'mocker': <pytest_mock.plugin.MockerFixture object at 0x7f9798997ca0>, 'request': <SubRequest 'tracing_client' for <Function test_search_products[exchange1-MSFT]>>}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | request = <SubRequest 'tracing_client' for <Function test_search_products[exchange1-MSFT]>>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f9798b1d310>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f9798b1d8b0>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def wrapper(*args, **kwargs):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         loop = fixture_stripper.get_and_strip_from(FixtureStripper.EVENT_LOOP, kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request = fixture_stripper.get_and_strip_from(FixtureStripper.REQUEST, kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         gen_obj = generator(*args, **kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async def setup():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             res = await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             return res\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         def finalizer():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             \"\"\"Yield again, to finalize.\"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             async def async_finalizer():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 except StopAsyncIteration:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     pass\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     msg = \"Async generator fixture didn't stop.\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     msg += \"Yield only once.\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     raise ValueError(msg)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             loop.run_until_complete(async_finalizer())\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request.addfinalizer(finalizer)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return loop.run_until_complete(setup())\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/pytest_asyncio/plugin.py:127: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     return future.result()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/pytest_asyncio/plugin.py:110: in setup\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     res = await gen_obj.__anext__()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/conftest.py:16: in tracing_client\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async with StakeClient() as client:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:254: in __aenter__\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     await self.login(self._login_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798997df0>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise InvalidLoginException(\"Invalid Session Token\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:248: InvalidLoginException\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | =================================== FAILURES ===================================\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ___________________ test_list_fundings[exchange0-request_0] ____________________\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tracing_client = <stake.client.StakeClient object at 0x7f9798bc80d0>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | exchange = NYSEUrl(STAKE_URL='https://global-prd-api.hellostake.com/api/', account_balance='https://global-prd-api.hellostake.com...atchlist/{watchlist_id}', update_watchlist='https://api.prd.stakeover.io/us/instrument/watchlist/{watchlist_id}/items')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | request_ = TransactionRecordRequest(to=datetime.datetime(2023, 6, 28, 15, 38, 35, 834315), from_=datetime.datetime(2022, 6, 28, 15, 38, 35, 834327), limit=1000, offset=None, direction=<TransactionRecordEnumDirection.prev: 'prev'>)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.parametrize(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"exchange, request_\",\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             (constant.NYSE, NYSEFundingRequest(limit=1000)),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             (constant.ASX, ASXFundingRequest(limit=3)),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.vcr()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.asyncio\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def test_list_fundings(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tracing_client: stake.StakeClient,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         exchange: Union[constant.ASXUrl, constant.NYSEUrl],\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request_: Union[ASXFundingRequest, NYSEFundingRequest],\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tracing_client.set_exchange(exchange=exchange)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       await tracing_client.fundings.list(request_)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_funding.py:26: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/funding.py:88: in list\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     details = await asyncio.gather(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:187: in get\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     return await self.http_client.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:80: in get\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     response = await session.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <aiohttp.client.ClientSession object at 0x7f9798e50e80>, method = 'GET'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=r9-6577610c&referenceType=Funding'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | kwargs = {'allow_redirects': True, 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': ''}, 'json': None}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | headers = <CIMultiDict('Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': '')>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | auth = None, data = None, params = None, cookies = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | request_url = URL('https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=r9-6577610c&referenceType=Funding')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | c_header = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @functools.wraps(real_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def new_request(self, method, url, **kwargs):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = kwargs.get(\"headers\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         auth = kwargs.get(\"auth\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = self._prepare_headers(headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         data = kwargs.get(\"data\", kwargs.get(\"json\"))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         params = kwargs.get(\"params\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookies = kwargs.get(\"cookies\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if auth is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers[\"AUTHORIZATION\"] = auth.encode()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         request_url = URL(url) if not params else _build_url_with_params(url, params)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         c_header = headers.pop(hdrs.COOKIE, None)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookie_header = _build_cookie_header(self, cookies, c_header, request_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if cookie_header:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers[hdrs.COOKIE] = cookie_header\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         vcr_request = Request(method, str(request_url), data, _serialize_headers(headers))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if cassette.can_play_response_for(vcr_request):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             log.info(\"Playing response for {} from cassette\".format(vcr_request))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             response = play_responses(cassette, vcr_request, kwargs)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for redirect in response.history:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self._cookie_jar.update_cookies(redirect.cookies, redirect.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self._cookie_jar.update_cookies(response.cookies, response.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             return response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if cassette.write_protected and cassette.filter_request(vcr_request):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise CannotOverwriteExistingCassetteException(cassette=cassette, failed_request=vcr_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/cassettes/test_funding/test_list_fundings[exchange0-request_0].yaml') in your current record mode ('none').\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           No match for the request (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=r9-6577610c&referenceType=Funding>) was found.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           Found 2 similar requests with 1 different matcher(s) :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           1 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           Matchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           Matchers failed :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           query - assertion failure :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           [('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           assert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             Full diff:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             ?                 ^     ^^^^^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             ?                 ^  ++  ++ ^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           2 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           Matchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           Matchers failed :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           query - assertion failure :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           [('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           assert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             Full diff:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             ?                 ^     ^^^^^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E             ?                 ^  ++  ++ ^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/vcr/stubs/aiohttp_stubs.py:273: CannotOverwriteExistingCassetteException\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _________________________ test_integration[exchange0] __________________________\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798df5040>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:246: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798df5040>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(self, url: str, payload: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Performs an HTTP get operation.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url (str): the current endpoint\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             payload (dict): The request's body.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             dict: the json response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return await self.http_client.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url, payload=payload, headers=self.headers.dict(by_alias=True)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:187: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': ''}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @staticmethod\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(url: str, payload: dict = None, headers: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async with aiohttp.ClientSession(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers=headers, raise_for_status=True\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           response = await session.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 HttpClient.url(url), headers=headers, json=payload\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:80: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <aiohttp.client.ClientSession object at 0x7f9798df5a30>, method = 'GET'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | str_or_url = 'https://global-prd-api.hellostake.com/api/user'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def _request(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         method: str,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         str_or_url: StrOrURL,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         *,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         params: Optional[Mapping[str, str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         data: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         json: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookies: Optional[LooseCookies] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_auto_headers: Optional[Iterable[str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         allow_redirects: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         max_redirects: int = 10,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         compress: Optional[str] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         chunked: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         expect100: bool = False,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         raise_for_status: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_until_eof: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy: Optional[StrOrURL] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timeout: Union[ClientTimeout, object] = sentinel,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         verify_ssl: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         fingerprint: Optional[bytes] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl_context: Optional[SSLContext] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl: Optional[Union[SSLContext, bool, Fingerprint]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         trace_request_ctx: Optional[SimpleNamespace] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_bufsize: Optional[int] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> ClientResponse:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # NOTE: timeout clamps existing connect and read timeouts.  We cannot\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # set the default to None because we need to detect if the user wants\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # to use the existing timeouts by setting timeout to None.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if self.closed:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise RuntimeError(\"Session is closed\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl = _merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if data is not None and json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 \"data and json parameters can not be used at the same time\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         elif json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             data = payload.JsonPayload(json, dumps=self._json_serialize)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not isinstance(chunked, bool) and chunked is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             warnings.warn(\"Chunk size is deprecated #1615\", DeprecationWarning)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         redirects = 0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         history = []\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         version = self._version\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # Merge with default headers and transform to CIMultiDict\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = self._prepare_headers(headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers = self._prepare_headers(proxy_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url = self._build_url(str_or_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise InvalidURL(str_or_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_headers = set(self._skip_auto_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if skip_auto_headers is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for i in skip_auto_headers:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 skip_headers.add(istr(i))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidURL(proxy) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if timeout is sentinel:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             real_timeout: ClientTimeout = self._timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if not isinstance(timeout, ClientTimeout):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = ClientTimeout(total=timeout)  # type: ignore[arg-type]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # timeout is cumulative for all request operations\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # (request, redirects, responses, data consuming)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tm = TimeoutHandle(self._loop, real_timeout.total)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         handle = tm.start()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if read_bufsize is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             read_bufsize = self._read_bufsize\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         traces = [\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             Trace(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config.trace_config_ctx(trace_request_ctx=trace_request_ctx),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for trace_config in self._trace_configs\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             await trace.send_request_start(method, url.update_query(params), headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timer = tm.timer()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             with timer:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 while True:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     url, auth_from_url = strip_auth_from_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth and auth_from_url:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTH argument with \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"credentials encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = auth_from_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = self._default_auth\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # It would be confusing if we support explicit\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # Authorization header with auth argument\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and auth is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and hdrs.AUTHORIZATION in headers\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTHORIZATION header \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"with AUTH argument or credentials \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     all_cookies = self._cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if cookies is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar = CookieJar()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar.update_cookies(cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         req_cookies = tmp_cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if req_cookies:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             all_cookies.load(req_cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     elif self._trust_env:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         with suppress(LookupError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             proxy, proxy_auth = get_env_proxy_for_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     req = self._request_class(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         method,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params=params,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers=headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_auto_headers=skip_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         data=data,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         cookies=all_cookies,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth=auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         version=version,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         compress=compress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         chunked=chunked,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         expect100=expect100,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         loop=self._loop,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         response_class=self._response_class,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy=proxy,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_auth=proxy_auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         session=self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ssl=ssl,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_headers=proxy_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         traces=traces,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # connection timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         async with ceil_timeout(real_timeout.connect):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             assert self._connector is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn = await self._connector.connect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 req, traces=traces, timeout=real_timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except asyncio.TimeoutError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ServerTimeoutError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Connection timeout \" \"to host {}\".format(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.transport is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.protocol is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     conn.protocol.set_response_params(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_payload=method.upper() == \"HEAD\",\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_until_eof=read_until_eof,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auto_decompress=self._auto_decompress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_timeout=real_timeout.sock_read,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_bufsize=read_bufsize,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp = await req.send(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 await resp.start(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except ClientError:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except OSError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if exc.errno is None and isinstance(exc, asyncio.TimeoutError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ClientOSError(*exc.args) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     self._cookie_jar.update_cookies(resp.cookies, resp.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # redirects\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if resp.status in (301, 302, 303, 307, 308) and allow_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             await trace.send_request_redirect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 method, url.update_query(params), headers, resp\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         redirects += 1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         history.append(resp)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if max_redirects and redirects >= max_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise TooManyRedirects(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 history[0].request_info, tuple(history)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # For 301 and 302, mimic IE, now changed in RFC\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # https://github.com/kennethreitz/requests/pull/269\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if (resp.status == 303 and resp.method != hdrs.METH_HEAD) or (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.status in (301, 302) and resp.method == hdrs.METH_POST\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             method = hdrs.METH_GET\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             data = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             if headers.get(hdrs.CONTENT_LENGTH):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 headers.pop(hdrs.CONTENT_LENGTH)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         r_url = resp.headers.get(hdrs.LOCATION) or resp.headers.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             hdrs.URI\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if r_url is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # see github.com/aio-libs/aiohttp/issues/2022\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # reading from correct redirection\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # response is forbidden\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = URL(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 r_url, encoded=not self._requote_redirect_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise InvalidURL(r_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         scheme = parsed_url.scheme\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if scheme not in (\"http\", \"https\", \"\"):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise ValueError(\"Can redirect only to http or https\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         elif not scheme:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = url.join(parsed_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if url.origin() != parsed_url.origin():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             auth = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             headers.pop(hdrs.AUTHORIZATION, None)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url = parsed_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         continue\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # check response status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise_for_status = self._raise_for_status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >               resp.raise_for_status()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client.py:643: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <ClientResponse(https://global-prd-api.hellostake.com/api/user) [401 Unauthorized]>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | <CIMultiDictProxy('Content-Type': ... (CloudFront)', 'X-Amz-Cf-Pop': 'ARN1-C1', 'X-Amz-Cf-Id': 'NYKyFJ92yoXqQaAEGs1tA04E3Dk0AuExzMZjhee_TiRKAvE0KDvP7Q==')>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def raise_for_status(self) -> None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not self.ok:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # reason should always be not None for a started response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             assert self.reason is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise ClientResponseError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.request_info,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.history,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 status=self.status,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 message=self.reason,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 headers=self.headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           aiohttp.client_exceptions.ClientResponseError: 401, message='Unauthorized', url=URL('https://global-prd-api.hellostake.com/api/user')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1005: ClientResponseError\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | The above exception was the direct cause of the following exception:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | exchange = NYSEUrl(STAKE_URL='https://global-prd-api.hellostake.com/api/', account_balance='https://global-prd-api.hellostake.com...atchlist/{watchlist_id}', update_watchlist='https://api.prd.stakeover.io/us/instrument/watchlist/{watchlist_id}/items')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.parametrize(\"exchange\", (constant.NYSE, constant.ASX))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.asyncio\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def test_integration(exchange):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       async with stake.StakeClient(exchange=exchange) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_integration.py:14: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:254: in __aenter__\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     await self.login(self._login_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798df5040>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise InvalidLoginException(\"Invalid Session Token\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:248: InvalidLoginException\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _________________________ test_integration[exchange1] __________________________\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798b15580>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:246: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798b15580>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(self, url: str, payload: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Performs an HTTP get operation.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url (str): the current endpoint\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             payload (dict): The request's body.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             dict: the json response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       return await self.http_client.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url, payload=payload, headers=self.headers.dict(by_alias=True)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:187: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | url = 'https://global-prd-api.hellostake.com/api/user', payload = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 'Stake-Session-Token': ''}\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @staticmethod\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def get(url: str, payload: dict = None, headers: dict = None) -> dict:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         async with aiohttp.ClientSession(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             headers=headers, raise_for_status=True\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           response = await session.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 HttpClient.url(url), headers=headers, json=payload\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:80: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <aiohttp.client.ClientSession object at 0x7f9798b15a00>, method = 'GET'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | str_or_url = 'https://global-prd-api.hellostake.com/api/user'\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def _request(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         method: str,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         str_or_url: StrOrURL,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         *,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         params: Optional[Mapping[str, str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         data: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         json: Any = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         cookies: Optional[LooseCookies] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_auto_headers: Optional[Iterable[str]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         allow_redirects: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         max_redirects: int = 10,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         compress: Optional[str] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         chunked: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         expect100: bool = False,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         raise_for_status: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_until_eof: bool = True,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy: Optional[StrOrURL] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_auth: Optional[BasicAuth] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timeout: Union[ClientTimeout, object] = sentinel,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         verify_ssl: Optional[bool] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         fingerprint: Optional[bytes] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl_context: Optional[SSLContext] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl: Optional[Union[SSLContext, bool, Fingerprint]] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers: Optional[LooseHeaders] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         trace_request_ctx: Optional[SimpleNamespace] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         read_bufsize: Optional[int] = None,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> ClientResponse:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # NOTE: timeout clamps existing connect and read timeouts.  We cannot\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # set the default to None because we need to detect if the user wants\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # to use the existing timeouts by setting timeout to None.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if self.closed:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise RuntimeError(\"Session is closed\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ssl = _merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if data is not None and json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 \"data and json parameters can not be used at the same time\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         elif json is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             data = payload.JsonPayload(json, dumps=self._json_serialize)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not isinstance(chunked, bool) and chunked is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             warnings.warn(\"Chunk size is deprecated #1615\", DeprecationWarning)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         redirects = 0\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         history = []\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         version = self._version\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # Merge with default headers and transform to CIMultiDict\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         headers = self._prepare_headers(headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         proxy_headers = self._prepare_headers(proxy_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             url = self._build_url(str_or_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             raise InvalidURL(str_or_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         skip_headers = set(self._skip_auto_headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if skip_auto_headers is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for i in skip_auto_headers:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 skip_headers.add(istr(i))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidURL(proxy) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if timeout is sentinel:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             real_timeout: ClientTimeout = self._timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if not isinstance(timeout, ClientTimeout):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = ClientTimeout(total=timeout)  # type: ignore[arg-type]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 real_timeout = timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # timeout is cumulative for all request operations\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         # (request, redirects, responses, data consuming)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         tm = TimeoutHandle(self._loop, real_timeout.total)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         handle = tm.start()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if read_bufsize is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             read_bufsize = self._read_bufsize\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         traces = [\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             Trace(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 trace_config.trace_config_ctx(trace_request_ctx=trace_request_ctx),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             for trace_config in self._trace_configs\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         ]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             await trace.send_request_start(method, url.update_query(params), headers)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         timer = tm.timer()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             with timer:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 while True:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     url, auth_from_url = strip_auth_from_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth and auth_from_url:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTH argument with \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"credentials encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = auth_from_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if auth is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth = self._default_auth\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # It would be confusing if we support explicit\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # Authorization header with auth argument\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and auth is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         and hdrs.AUTHORIZATION in headers\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ValueError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Cannot combine AUTHORIZATION header \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"with AUTH argument or credentials \"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"encoded in URL\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     all_cookies = self._cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if cookies is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar = CookieJar()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         tmp_cookie_jar.update_cookies(cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         req_cookies = tmp_cookie_jar.filter_cookies(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if req_cookies:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             all_cookies.load(req_cookies)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if proxy is not None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy = URL(proxy)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     elif self._trust_env:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         with suppress(LookupError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             proxy, proxy_auth = get_env_proxy_for_url(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     req = self._request_class(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         method,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params=params,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         headers=headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_auto_headers=skip_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         data=data,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         cookies=all_cookies,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auth=auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         version=version,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         compress=compress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         chunked=chunked,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         expect100=expect100,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         loop=self._loop,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         response_class=self._response_class,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy=proxy,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_auth=proxy_auth,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         session=self,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ssl=ssl,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         proxy_headers=proxy_headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         traces=traces,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # connection timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         async with ceil_timeout(real_timeout.connect):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             assert self._connector is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn = await self._connector.connect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 req, traces=traces, timeout=real_timeout\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except asyncio.TimeoutError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ServerTimeoutError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             \"Connection timeout \" \"to host {}\".format(url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.transport is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     assert conn.protocol is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     conn.protocol.set_response_params(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         timer=timer,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         skip_payload=method.upper() == \"HEAD\",\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_until_eof=read_until_eof,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         auto_decompress=self._auto_decompress,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_timeout=real_timeout.sock_read,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         read_bufsize=read_bufsize,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp = await req.send(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 await resp.start(conn)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except BaseException:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             conn.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except ClientError:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     except OSError as exc:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if exc.errno is None and isinstance(exc, asyncio.TimeoutError):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         raise ClientOSError(*exc.args) from exc\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     self._cookie_jar.update_cookies(resp.cookies, resp.url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     # redirects\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     if resp.status in (301, 302, 303, 307, 308) and allow_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         for trace in traces:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             await trace.send_request_redirect(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 method, url.update_query(params), headers, resp\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         redirects += 1\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         history.append(resp)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if max_redirects and redirects >= max_redirects:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise TooManyRedirects(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 history[0].request_info, tuple(history)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # For 301 and 302, mimic IE, now changed in RFC\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         # https://github.com/kennethreitz/requests/pull/269\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if (resp.status == 303 and resp.method != hdrs.METH_HEAD) or (\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.status in (301, 302) and resp.method == hdrs.METH_POST\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         ):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             method = hdrs.METH_GET\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             data = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             if headers.get(hdrs.CONTENT_LENGTH):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 headers.pop(hdrs.CONTENT_LENGTH)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         r_url = resp.headers.get(hdrs.LOCATION) or resp.headers.get(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             hdrs.URI\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if r_url is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # see github.com/aio-libs/aiohttp/issues/2022\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # reading from correct redirection\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             # response is forbidden\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = URL(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                                 r_url, encoded=not self._requote_redirect_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         except ValueError as e:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise InvalidURL(r_url) from e\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         scheme = parsed_url.scheme\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if scheme not in (\"http\", \"https\", \"\"):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             resp.close()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             raise ValueError(\"Can redirect only to http or https\")\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         elif not scheme:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             parsed_url = url.join(parsed_url)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         if url.origin() != parsed_url.origin():\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             auth = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                             headers.pop(hdrs.AUTHORIZATION, None)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         url = parsed_url\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         params = None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         resp.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                         continue\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     break\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # check response status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status is None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise_for_status = self._raise_for_status\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             if raise_for_status:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >               resp.raise_for_status()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client.py:643: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <ClientResponse(https://global-prd-api.hellostake.com/api/user) [401 Unauthorized]>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | <CIMultiDictProxy('Content-Type': ... (CloudFront)', 'X-Amz-Cf-Pop': 'ARN1-C1', 'X-Amz-Cf-Id': 'Vd0Q217WnobQgyGbBNjHjKUgEi3kNN0Y81VFkED71JHubrpneqJJYQ==')>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     def raise_for_status(self) -> None:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if not self.ok:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             # reason should always be not None for a started response\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             assert self.reason is not None\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.release()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise ClientResponseError(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.request_info,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.history,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 status=self.status,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 message=self.reason,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 headers=self.headers,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           aiohttp.client_exceptions.ClientResponseError: 401, message='Unauthorized', url=URL('https://global-prd-api.hellostake.com/api/user')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | /home/runneradmin/.cache/pypoetry/virtualenvs/stake-iNhXrU40-py3.8/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1005: ClientResponseError\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | The above exception was the direct cause of the following exception:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | exchange = ASXUrl(ASX_STAKE_URL='https://global-prd-api.hellostake.com/api/asx/', cash_available='https://global-prd-api.hellosta...sx/instrument/v2/watchlists', create_watchlist='https://global-prd-api.hellostake.com/api/asx/instrument/v2/watchlist')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.parametrize(\"exchange\", (constant.NYSE, constant.ASX))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     @pytest.mark.asyncio\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def test_integration(exchange):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >       async with stake.StakeClient(exchange=exchange) as session:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_integration.py:14: \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:254: in __aenter__\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     await self.login(self._login_request)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | self = <stake.client.StakeClient object at 0x7f9798b15580>\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | login_request = SessionTokenLoginRequest(token='')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     async def login(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         self, login_request: Union[CredentialsLoginRequest, SessionTokenLoginRequest]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     ) -> user.User:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"Authenticates to the stake api.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Args:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             login_request (Union[CredentialsLoginRequest, SessionTokenLoginRequest]):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             you can authenticate either with your credentials(username, password)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             or with an existing session token.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         Returns:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user.User: the authenticated user.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         \"\"\"\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         if isinstance(login_request, CredentialsLoginRequest):\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 data = await self.post(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     constant.NYSE.create_session,\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                     payload=login_request.dict(by_alias=True),\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 )\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 self.headers.stake_session_token = data[\"sessionKey\"]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |                 raise InvalidLoginException(\"Invalid Login Credentials\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         else:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             self.headers.stake_session_token = login_request.token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         try:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |             user_data = await self.get(self.exchange.users)\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |         except aiohttp.client_exceptions.ClientResponseError as error:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | >           raise InvalidLoginException(\"Invalid Session Token\") from error\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | E           stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | stake/client.py:248: InvalidLoginException\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | =============================== warnings summary ===============================\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_watchlist.py::test_add_to_watchlist\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/test_watchlist.py:21: DeprecationWarning: This method is deprecated, please use `add_to_watchlist` instead.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     added = await tracing_client.watchlist.add(AddToWatchlistRequest(symbol=\"SPOT\"))\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_watchlist.py::test_remove_from_watchlist\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/test_watchlist.py:29: DeprecationWarning: This method is deprecated, please use `remove_from_watchlist` instead.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     removed = await tracing_client.watchlist.remove(\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | tests/test_watchlist.py::test_list_watchlist\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/test_watchlist.py:38: DeprecationWarning: This method is deprecated, please use `watchlist` instead.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |     watched = await tracing_client.watchlist.list()\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/report.xml -\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ---------- coverage: platform linux, python 3.8.11-final-0 -----------\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Coverage XML written to file coverage.xml\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | =========================== short test summary info ============================\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | FAILED tests/test_funding.py::test_list_fundings[exchange0-request_0] - vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/tests/cassettes/test_funding/test_list_fundings[exchange0-request_0].yaml') in your current record mode ('none').\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | No match for the request (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=r9-6577610c&referenceType=Funding>) was found.\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Found 2 similar requests with 1 different matcher(s) :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | 1 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Matchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Matchers failed :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | query - assertion failure :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | [('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | assert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Full diff:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   ?                 ^     ^^^^^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   ?                 ^  ++  ++ ^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | \n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | 2 - (<Request (GET) https://global-prd-api.hellostake.com/api/users/accounts/transactionDetails?reference=O9-7708124v&referenceType=Funding>).\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Matchers succeeded : ['method', 'scheme', 'host', 'port', 'path']\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | Matchers failed :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | query - assertion failure :\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | [('reference', 'r9-6577610c'), ('referenceType', 'Funding')] != [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | assert [('reference'...', 'Funding')] == [('reference'...', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   At index 0 diff: ('reference', 'r9-6577610c') != ('reference', 'O9-7708124v')\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   Full diff:\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   - [('reference', 'O9-7708124v'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   ?                 ^     ^^^^^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   + [('reference', 'r9-6577610c'), ('referenceType', 'Funding')]\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   |   ?                 ^  ++  ++ ^\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | FAILED tests/test_integration.py::test_integration[exchange0] - stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | FAILED tests/test_integration.py::test_integration[exchange1] - stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ERROR tests/test_product.py::test_search_products[exchange0-CBA] - stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ERROR tests/test_product.py::test_search_products[exchange1-MSFT] - stake.client.InvalidLoginException: Invalid Session Token\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   | ============= 3 failed, 39 passed, 3 warnings, 2 errors in 10.92s ==============\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u274c  Failure - Main Run Tests\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] exitcode '1': failure\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \u2b50 Run Post Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/e3e9daca-b6e3-4d00-b06a-6986c937acf5/act/abatilo-actions-poetry@v2.0.0/ dst=/var/run/act/actions/abatilo-actions-poetry@v2.0.0/\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/abatilo-actions-poetry@v2.0.0/] user=0 workdir=\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci]   \u2705  Success - Post Run image\n[f4bfd672-ff7b-48db-9b51-9daf3fc0ba7e/ci] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'ci' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/stabacco-stake-python/.github/workflows/test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 293.7778465747833
    }
}