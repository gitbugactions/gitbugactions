{"repository": "UweTrottmann/tmdb-java", "clone_url": "https://github.com/UweTrottmann/tmdb-java.git", "timestamp": "2023-05-30T21:33:44.438300Z", "commit_hash": "92921295996e2cb53bff16f405f64ec364f60887", "commit_message": "Merge branch 'fixes-and-cleanup'\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/BasePerson.java b/src/main/java/com/uwetrottmann/tmdb2/entities/BasePerson.java\nindex 560b94b..cfb50eb 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/BasePerson.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/BasePerson.java\n@@ -8,7 +8,7 @@ public class BasePerson {\n     public Boolean adult;\n     public Integer id;\n     public String name;\n-    public Integer popularity;\n+    public Double popularity;\n     public List<Media> known_for;\n \n }\n", "test_patch": "diff --git a/src/test/java/com/uwetrottmann/tmdb2/TestData.java b/src/test/java/com/uwetrottmann/tmdb2/TestData.java\nindex ec65314..ff95239 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/TestData.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/TestData.java\n@@ -21,7 +21,6 @@ import com.uwetrottmann.tmdb2.entities.TvShow;\n import com.uwetrottmann.tmdb2.enumerations.CreditType;\n import com.uwetrottmann.tmdb2.enumerations.MediaType;\n import com.uwetrottmann.tmdb2.enumerations.Status;\n-\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n@@ -56,7 +55,7 @@ public class TestData {\n     public static final Review testReview = new Review();\n \n     public static final Company testMovieCompany = new Company();\n-    public static final BaseCompany testProductionCompany = (BaseCompany) testMovieCompany;\n+    public static final BaseCompany testProductionCompany = testMovieCompany;\n     public static final Company testCompany = new Company();\n \n \n@@ -77,7 +76,7 @@ public class TestData {\n     public static final List testList = new List();\n     public static final Movie testListMovie = new Movie();\n \n-    public static final java.util.List<Integer> testListMovies = new java.util.ArrayList<>();\n+    public static final java.util.List<Integer> testListMovies = new ArrayList<>();\n \n     static {\n         try {\n@@ -207,7 +206,7 @@ public class TestData {\n         testTvEpisodeChangesEndDate = JSON_STRING_DATE.parse(\"2017-2-4\");\n \n         testCredit.credit_type = CreditType.CAST;\n-        testCredit.department = \"Actors\";\n+        testCredit.department = \"Acting\";\n         testCredit.job = \"Actor\";\n         testCredit.media_type = MediaType.TV;\n         testCredit.id = \"5256bdc319c2956ff6001554\";\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/assertions/CreditAssertions.java b/src/test/java/com/uwetrottmann/tmdb2/assertions/CreditAssertions.java\nindex 02f985f..a28b8f1 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/assertions/CreditAssertions.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/assertions/CreditAssertions.java\n@@ -1,16 +1,12 @@\n package com.uwetrottmann.tmdb2.assertions;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import com.uwetrottmann.tmdb2.entities.CastMember;\n-import com.uwetrottmann.tmdb2.entities.Credit;\n-import com.uwetrottmann.tmdb2.entities.CreditMedia;\n import com.uwetrottmann.tmdb2.entities.Credits;\n import com.uwetrottmann.tmdb2.entities.CrewMember;\n-\n import java.util.List;\n \n-import static com.uwetrottmann.tmdb2.TestData.testCredit;\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n public class CreditAssertions {\n     public static void assertCrewCredits(List<CrewMember> crew) {\n         assertThat(crew).isNotNull();\n@@ -50,40 +46,4 @@ public class CreditAssertions {\n \n     }\n \n-    public static void assertCredit(Credit credit) {\n-        assertThat(credit).isNotNull();\n-        assertThat(credit.id).isNotNull();\n-        assertThat(credit.department).isNotNull();\n-        assertThat(credit.credit_type).isNotNull();\n-        assertThat(credit.job).isNotNull();\n-        assertThat(credit.media_type).isNotNull();\n-        assertThat(credit.person).isNotNull();\n-        assertThat(credit.person.name).isNotNull();\n-        assertThat(credit.person.id).isNotNull();\n-        assertCreditMedia(credit.media);\n-\n-    }\n-\n-    public static void assertCreditMedia(CreditMedia creditMedia) {\n-        assertThat(creditMedia).isNotNull();\n-        assertThat(creditMedia.character).isNotNull();\n-        assertThat(creditMedia.id).isNotNull();\n-        assertThat(creditMedia.original_name).isNotNull();\n-        assertThat(creditMedia.name).isNotNull();\n-        assertThat(creditMedia.seasons).isNotNull();\n-        assertThat(creditMedia.seasons).isNotEmpty();\n-    }\n-\n-    public static void assertCreditDataIntegrity(Credit credit) {\n-        assertCredit(credit);\n-        assertThat(credit.media_type).isEqualTo(testCredit.media_type);\n-        assertThat(credit.id).isEqualTo(testCredit.id);\n-        assertThat(credit.department).isEqualTo(testCredit.department);\n-        assertThat(credit.job).isEqualTo(testCredit.job);\n-        assertThat(credit.credit_type).isEqualTo(testCredit.credit_type);\n-        assertThat(credit.media.id).isEqualTo(testCredit.media.id);\n-        assertThat(credit.media.name).isEqualTo(testCredit.media.name);\n-        assertThat(credit.media.original_name).isEqualTo(testCredit.media.original_name);\n-        assertThat(credit.media.character).isEqualTo(testCredit.media.character);\n-    }\n }\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/services/CreditsServiceTest.java b/src/test/java/com/uwetrottmann/tmdb2/services/CreditsServiceTest.java\nindex 15606ee..74a0edd 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/services/CreditsServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/services/CreditsServiceTest.java\n@@ -1,15 +1,14 @@\n package com.uwetrottmann.tmdb2.services;\n \n+import static com.uwetrottmann.tmdb2.TestData.testCredit;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import com.uwetrottmann.tmdb2.BaseTestCase;\n import com.uwetrottmann.tmdb2.entities.Credit;\n+import java.io.IOException;\n import org.junit.Test;\n import retrofit2.Call;\n \n-import java.io.IOException;\n-\n-import static com.uwetrottmann.tmdb2.TestData.testCredit;\n-import static com.uwetrottmann.tmdb2.assertions.CreditAssertions.assertCreditDataIntegrity;\n-\n public class CreditsServiceTest extends BaseTestCase {\n \n     @Test\n@@ -20,6 +19,31 @@ public class CreditsServiceTest extends BaseTestCase {\n \n         Credit credit = call.execute().body();\n \n-        assertCreditDataIntegrity(credit);\n+        assertThat(credit).isNotNull();\n+        assertThat(credit.id).isNotNull();\n+        assertThat(credit.department).isNotNull();\n+        assertThat(credit.credit_type).isNotNull();\n+        assertThat(credit.job).isNotNull();\n+        assertThat(credit.media_type).isNotNull();\n+        assertThat(credit.person).isNotNull();\n+        assertThat(credit.person.name).isNotNull();\n+        assertThat(credit.person.id).isNotNull();\n+        assertThat(credit.media).isNotNull();\n+        assertThat(credit.media.character).isNotNull();\n+        assertThat(credit.media.id).isNotNull();\n+        assertThat(credit.media.original_name).isNotNull();\n+        assertThat(credit.media.name).isNotNull();\n+        assertThat(credit.media.seasons).isNotNull();\n+        assertThat(credit.media.seasons).isNotEmpty();\n+\n+        assertThat(credit.media_type).isEqualTo(testCredit.media_type);\n+        assertThat(credit.id).isEqualTo(testCredit.id);\n+        assertThat(credit.department).isEqualTo(testCredit.department);\n+        assertThat(credit.job).isEqualTo(testCredit.job);\n+        assertThat(credit.credit_type).isEqualTo(testCredit.credit_type);\n+        assertThat(credit.media.id).isEqualTo(testCredit.media.id);\n+        assertThat(credit.media.name).isEqualTo(testCredit.media.name);\n+        assertThat(credit.media.original_name).isEqualTo(testCredit.media.original_name);\n+        assertThat(credit.media.character).isEqualTo(testCredit.media.character);\n     }\n }\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java b/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\nindex f3bc4b3..2b3a7da 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\n@@ -45,7 +45,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n public class MoviesServiceTest extends BaseTestCase {\n \n     @Test\n-    public void test_summary() throws ParseException, IOException {\n+    public void test_summary() throws IOException {\n         Call<Movie> call = getUnauthenticatedInstance().moviesService().summary(\n                 testMovie.id\n         );\n@@ -56,7 +56,7 @@ public class MoviesServiceTest extends BaseTestCase {\n     }\n \n     @Test\n-    public void test_summary_language() throws ParseException, IOException {\n+    public void test_summary_language() throws IOException {\n         Call<Movie> call = getUnauthenticatedInstance().moviesService().summary(\n                 testMovie.id,\n                 \"pt-BR\"\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/services/PeopleServiceTest.java b/src/test/java/com/uwetrottmann/tmdb2/services/PeopleServiceTest.java\nindex bdb3faa..128e2f7 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/services/PeopleServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/services/PeopleServiceTest.java\n@@ -15,7 +15,6 @@ import org.junit.Test;\n import retrofit2.Call;\n \n import java.io.IOException;\n-import java.text.ParseException;\n import java.util.HashMap;\n \n import static com.uwetrottmann.tmdb2.TestData.testPerson;\n@@ -35,7 +34,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n public class PeopleServiceTest extends BaseTestCase {\n \n     @Test\n-    public void test_summary() throws IOException, ParseException {\n+    public void test_summary() throws IOException {\n         Call<Person> call = getUnauthenticatedInstance().personService().summary(\n                 testPerson.id\n         );\n@@ -46,7 +45,7 @@ public class PeopleServiceTest extends BaseTestCase {\n     }\n \n     @Test\n-    public void test_summary_with_append_to_response() throws IOException, ParseException {\n+    public void test_summary_with_append_to_response() throws IOException {\n         HashMap<String, String> opts = new HashMap<>();\n         opts.put(\"start_date\", new TmdbDate(testPersonChangesStartDate).toString());\n         opts.put(\"end_date\", new TmdbDate(testPersonChangesEndDate).toString());\n"}
{"repository": "UweTrottmann/tmdb-java", "clone_url": "https://github.com/UweTrottmann/tmdb-java.git", "timestamp": "2023-05-30T22:09:13.237574Z", "commit_hash": "0db0903f7641668800dee459f4fa7f1f945c2814", "commit_message": "Fixing Issues\n-Fixes #49\n-Fixes #50\n-Fixes #51\n-Fixes #52\n-Fixes #53\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/uwetrottmann/tmdb2/TmdbHelper.java b/src/main/java/com/uwetrottmann/tmdb2/TmdbHelper.java\nindex a93237d..0de6649 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/TmdbHelper.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/TmdbHelper.java\n@@ -17,6 +17,7 @@ import com.uwetrottmann.tmdb2.entities.PersonCrewCredit;\n import com.uwetrottmann.tmdb2.entities.RatingObject;\n import com.uwetrottmann.tmdb2.enumerations.MediaType;\n import com.uwetrottmann.tmdb2.enumerations.Status;\n+import com.uwetrottmann.tmdb2.enumerations.VideoType;\n \n import java.lang.reflect.Type;\n import java.text.ParseException;\n@@ -54,6 +55,14 @@ public class TmdbHelper {\n             }\n         });\n \n+        builder.registerTypeAdapter(VideoType.class, new JsonDeserializer<VideoType>() {\n+            @Override\n+            public VideoType deserialize(JsonElement json, Type typeOfT,\n+                                         JsonDeserializationContext context) throws JsonParseException {\n+                return VideoType.get(json.getAsString());\n+            }\n+        });\n+\n         builder.registerTypeAdapter(BaseAccountStates.class, new JsonDeserializer<BaseAccountStates>() {\n \n             @Override\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/TmdbInterceptor.java b/src/main/java/com/uwetrottmann/tmdb2/TmdbInterceptor.java\nindex a87e90d..165583b 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/TmdbInterceptor.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/TmdbInterceptor.java\n@@ -79,10 +79,10 @@ public class TmdbInterceptor implements Interceptor {\n                 try {\n                     Integer retry = Integer.parseInt(retryAfter);\n                     Thread.sleep((int) ((retry + 0.5) * 1000));\n-                    response = chain.proceed(builder.build());\n-                } catch (Exception exc) {\n-\n+                } catch (NumberFormatException | InterruptedException e) {\n+                    return response;\n                 }\n+                return handleIntercept(chain,tmdb);\n             }\n         }\n         handleErrors(response, tmdb);\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/FindResults.java b/src/main/java/com/uwetrottmann/tmdb2/entities/FindResults.java\nindex 0f6f218..95120d1 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/FindResults.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/FindResults.java\n@@ -4,10 +4,10 @@ import java.util.List;\n \n public class FindResults {\n \n-    public List<Movie> movie_results;\n-    public List<Person> person_results;\n+    public List<BaseMovie> movie_results;\n+    public List<BasePerson> person_results;\n     public List<BaseTvShow> tv_results;\n-    public List<TvSeason> tv_season_results;\n-    public List<TvEpisode> tv_episode_results;\n+    public List<BaseTvSeason> tv_season_results;\n+    public List<BaseTvEpisode> tv_episode_results;\n \n }\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/Image.java b/src/main/java/com/uwetrottmann/tmdb2/entities/Image.java\nindex 8329a21..20a1abf 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/Image.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/Image.java\n@@ -6,8 +6,8 @@ public class Image {\n     public Integer width;\n     public Integer height;\n     public String iso_639_1;\n-    public Float aspect_ratio;\n-    public Float vote_average;\n+    public Double aspect_ratio;\n+    public Double vote_average;\n     public Integer vote_count;\n \n }\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/TaggedImage.java b/src/main/java/com/uwetrottmann/tmdb2/entities/TaggedImage.java\nindex f2cdb84..6513ed0 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/TaggedImage.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/TaggedImage.java\n@@ -3,8 +3,8 @@ package com.uwetrottmann.tmdb2.entities;\n public class TaggedImage extends Image {\n \n     public String id;\n-    public String image_type;\n     public String media_type;\n+    public TmdbDate release_date;\n     public Media media;\n \n }\n\\ No newline at end of file\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/Videos.java b/src/main/java/com/uwetrottmann/tmdb2/entities/Videos.java\nindex ff486a5..b4fe527 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/Videos.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/Videos.java\n@@ -1,5 +1,7 @@\n package com.uwetrottmann.tmdb2.entities;\n \n+import com.uwetrottmann.tmdb2.enumerations.VideoType;\n+\n import java.util.List;\n \n public class Videos {\n@@ -8,11 +10,12 @@ public class Videos {\n \n         public String id;\n         public String iso_639_1;\n+        public String iso_3166_1;\n         public String key;\n         public String name;\n         public String site;\n         public Integer size;\n-        public String type;\n+        public VideoType type;\n \n     }\n \ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/enumerations/VideoType.java b/src/main/java/com/uwetrottmann/tmdb2/enumerations/VideoType.java\nnew file mode 100644\nindex 0000000..fd1affc\n--- /dev/null\n+++ b/src/main/java/com/uwetrottmann/tmdb2/enumerations/VideoType.java\n@@ -0,0 +1,39 @@\n+package com.uwetrottmann.tmdb2.enumerations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public enum VideoType {\n+\n+    TRAILER(\"Trailer\"),\n+    TEASER(\"Teaser\"),\n+    CLIP(\"Clip\"),\n+    FEATURETTE(\"Featurette\"),\n+    OPENING_CREDITS(\"Opening Credits\");\n+\n+\n+    VideoType(String value) {\n+        this.value = value;\n+    }\n+\n+    private static final Map<String, VideoType> lookup = prepareLookup();\n+\n+    private static Map<String, VideoType> prepareLookup() {\n+        Map<String, VideoType> mtMap = new HashMap<>();\n+        for (VideoType videoType : VideoType.values()) {\n+            mtMap.put(videoType.value, videoType);\n+        }\n+        return mtMap;\n+    }\n+\n+    private final String value;\n+\n+    public static VideoType get(String value) {\n+        return lookup.get(value);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+}\n", "test_patch": "diff --git a/src/test/java/com/uwetrottmann/tmdb2/TestData.java b/src/test/java/com/uwetrottmann/tmdb2/TestData.java\nindex d79c112..c046e51 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/TestData.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/TestData.java\n@@ -100,7 +100,7 @@ public class TestData {\n         testPerson.gender = 2;\n         testPerson.id = 880;\n         testPerson.imdb_id = \"nm0000255\";\n-        testPerson.place_of_birth = \"Berkeley, Californie, \u00c9tats-Unis\";\n+        testPerson.place_of_birth = \"Berkeley, California, USA\";\n         testPerson.adult = false;\n         testPerson.external_ids = new PersonExternalIds();\n         testPerson.external_ids.twitter_id = \"BenAffleck\";\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/assertions/GenericAssertions.java b/src/test/java/com/uwetrottmann/tmdb2/assertions/GenericAssertions.java\nindex 98f692d..06be807 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/assertions/GenericAssertions.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/assertions/GenericAssertions.java\n@@ -78,8 +78,8 @@ public class GenericAssertions {\n     public static void assertImage(Image image) {\n         assertThat(image).isNotNull();\n         assertThat(image.file_path).isNotNull();\n-        assertThat(image.width).isNotNull();\n-        assertThat(image.height).isNotNull();\n+        assertThat(image.width).isGreaterThan(0);\n+        assertThat(image.height).isGreaterThan(0);\n         assertThat(image.aspect_ratio).isGreaterThan(0);\n         assertThat(image.vote_average).isGreaterThanOrEqualTo(0);\n         assertThat(image.vote_count).isGreaterThanOrEqualTo(0);\n@@ -88,10 +88,18 @@ public class GenericAssertions {\n \n     public static void assertTaggedImage(TaggedImage image) {\n         assertImage(image);\n-        assertThat(image.id).isNotNull();\n-        assertThat(image.image_type).isNotNull();\n         assertThat(image.media_type).isNotNull();\n         assertThat(image.media).isNotNull();\n+        switch(image.media_type) {\n+            case \"movie\":\n+                assertThat(image.media.movie).isNotNull();\n+                break;\n+            case \"tv\":\n+                assertThat(image.media.tvShow).isNotNull();\n+                break;\n+        }\n+\n+\n     }\n \n     public static void assertImages(List<Image> images) {\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/assertions/ListAssertions.java b/src/test/java/com/uwetrottmann/tmdb2/assertions/ListAssertions.java\nindex 1ddba54..992b4a7 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/assertions/ListAssertions.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/assertions/ListAssertions.java\n@@ -23,7 +23,7 @@ public class ListAssertions {\n     public static void assertBaseList(BaseList baseList) {\n         assertThat(baseList).isNotNull();\n         assertThat(baseList.id).isNotNull();\n-        assertThat(baseList.description).isNotEmpty();\n+        assertThat(baseList.description).isNotNull();\n         assertThat(baseList.favorite_count).isNotNull();\n         assertThat(baseList.favorite_count).isGreaterThanOrEqualTo(0);\n         assertThat(baseList.item_count).isNotNull();\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/assertions/MovieAssertions.java b/src/test/java/com/uwetrottmann/tmdb2/assertions/MovieAssertions.java\nindex 66d0270..4e93eda 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/assertions/MovieAssertions.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/assertions/MovieAssertions.java\n@@ -21,7 +21,7 @@ public class MovieAssertions {\n         assertThat(movie.title).isNotNull();\n         assertThat(movie.original_language).isNotEmpty();\n         assertThat(movie.overview).isNotNull();\n-        assertThat(movie.adult).isFalse();\n+        assertThat(movie.adult).isNotNull();\n         assertThat(movie.release_date).isNotNull();\n         assertThat(movie.vote_average).isGreaterThanOrEqualTo(0);\n         assertThat(movie.vote_count).isGreaterThanOrEqualTo(0);\ndiff --git a/src/test/java/com/uwetrottmann/tmdb2/services/FindServiceTest.java b/src/test/java/com/uwetrottmann/tmdb2/services/FindServiceTest.java\nindex 91bd5b2..0299884 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/services/FindServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/services/FindServiceTest.java\n@@ -3,6 +3,7 @@ package com.uwetrottmann.tmdb2.services;\n import com.uwetrottmann.tmdb2.BaseTestCase;\n import com.uwetrottmann.tmdb2.entities.BaseMovie;\n import com.uwetrottmann.tmdb2.entities.BasePerson;\n+import com.uwetrottmann.tmdb2.entities.BaseTvEpisode;\n import com.uwetrottmann.tmdb2.entities.BaseTvSeason;\n import com.uwetrottmann.tmdb2.entities.BaseTvShow;\n import com.uwetrottmann.tmdb2.entities.FindResults;\n@@ -120,7 +121,7 @@ public class FindServiceTest extends BaseTestCase {\n \n         assertThat(results.tv_episode_results).isNotNull();\n         assertThat(results.tv_episode_results).isNotEmpty();\n-        for (TvEpisode tvEpisode : results.tv_episode_results) {\n+        for (BaseTvEpisode tvEpisode : results.tv_episode_results) {\n             assertThat(tvEpisode.id).isEqualTo(testTvEpisode.id);\n         }\n     }\n"}
{"repository": "UweTrottmann/tmdb-java", "clone_url": "https://github.com/UweTrottmann/tmdb-java.git", "timestamp": "2023-05-30T22:17:16.175527Z", "commit_hash": "02b727d8a5e74b6c843bb1a1c123fe8c1e4d5eed", "commit_message": "Fixes and Enhancements.\n-Added original_language in Movie entity.\n-Added translations in Movie entity.\n-Added translations in AppendToResponseItem.\n-Fixed Tests where would fail because TMDb content got updated.\n-Added tests for original_language and translations in Movie entity.\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 8ea1d83..d0a2378 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -7,7 +7,7 @@\n     <groupId>com.uwetrottmann.tmdb2</groupId>\n     <artifactId>tmdb-java</artifactId>\n     <packaging>jar</packaging>\n-    <version>1.6.0</version>\n+    <version>1.7.0</version>\n \n     <name>tmdb-java</name>\n     <description>tmdb-java is a retrofit2 based wrapper around the themoviedb.org API v3.</description>\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/entities/Movie.java b/src/main/java/com/uwetrottmann/tmdb2/entities/Movie.java\nindex 109170b..d82e5d6 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/entities/Movie.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/entities/Movie.java\n@@ -17,6 +17,7 @@ public class Movie {\n     public String homepage;\n     public String imdb_id;\n     public String original_title;\n+    public String original_language;\n     public String overview;\n     public Double popularity;\n     public String poster_path;\n@@ -34,6 +35,7 @@ public class Movie {\n \n     // Following are used with append_to_response\n     public MovieAlternativeTitles alternative_titles;\n+    public Translations translations;\n     public Credits credits;\n     public ReleaseDatesResults release_dates;\n     public MovieResultsPage similar;\ndiff --git a/src/main/java/com/uwetrottmann/tmdb2/enumerations/AppendToResponseItem.java b/src/main/java/com/uwetrottmann/tmdb2/enumerations/AppendToResponseItem.java\nindex f8bb952..8f1c887 100644\n--- a/src/main/java/com/uwetrottmann/tmdb2/enumerations/AppendToResponseItem.java\n+++ b/src/main/java/com/uwetrottmann/tmdb2/enumerations/AppendToResponseItem.java\n@@ -27,7 +27,8 @@ public enum AppendToResponseItem {\n     IMAGES(\"images\"),\n     ALTERNATIVE_TITLES(\"alternative_titles\"),\n     EXTERNAL_IDS(\"external_ids\"),\n-    CONTENT_RATINGS(\"content_ratings\");\n+    CONTENT_RATINGS(\"content_ratings\"),\n+    TRANSLATIONS(\"translations\");\n \n     private final String value;\n \n", "test_patch": "diff --git a/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java b/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\nindex 9afda88..d3ceea8 100644\n--- a/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb2/services/MoviesServiceTest.java\n@@ -11,6 +11,7 @@ import com.uwetrottmann.tmdb2.entities.Movie;\n import com.uwetrottmann.tmdb2.entities.MovieAlternativeTitles;\n import com.uwetrottmann.tmdb2.entities.MovieKeywords;\n import com.uwetrottmann.tmdb2.entities.MovieResultsPage;\n+import com.uwetrottmann.tmdb2.entities.ReleaseDate;\n import com.uwetrottmann.tmdb2.entities.ReleaseDatesResult;\n import com.uwetrottmann.tmdb2.entities.ReleaseDatesResults;\n import com.uwetrottmann.tmdb2.entities.ReviewResultsPage;\n@@ -58,6 +59,7 @@ public class MoviesServiceTest extends BaseTestCase {\n         assertThat(movie).isNotNull();\n         assertThat(movie.id).isEqualTo(TestData.MOVIE_ID);\n         assertThat(movie.title).isEqualTo(TestData.MOVIE_TITLE);\n+        assertThat(movie.original_language).isNotEmpty();\n         assertThat(movie.overview).isNotEmpty();\n         assertThat(movie.tagline).isNotEmpty();\n         assertThat(movie.adult).isFalse();\n@@ -65,7 +67,7 @@ public class MoviesServiceTest extends BaseTestCase {\n         assertThat(movie.budget).isEqualTo(63000000);\n         assertThat(movie.imdb_id).isEqualTo(TestData.MOVIE_IMDB);\n         assertThat(movie.poster_path).isNotEmpty();\n-        assertThat(movie.release_date).isEqualTo(\"1999-10-14\");\n+        assertThat(movie.release_date).isEqualTo(\"1999-10-15\");\n         assertThat(movie.revenue).isEqualTo(100853753);\n         assertThat(movie.runtime).isEqualTo(139);\n         assertThat(movie.vote_average).isPositive();\n@@ -96,6 +98,17 @@ public class MoviesServiceTest extends BaseTestCase {\n     }\n \n     @Test\n+    public void test_summary_append_translations() throws IOException {\n+        Call<Movie> call = getManager().moviesService().summary(TestData.MOVIE_ID,\n+                null,\n+                new AppendToResponse(\n+                        AppendToResponseItem.TRANSLATIONS));\n+        Movie movie = call.execute().body();\n+\n+        assertNotNull(movie.translations);\n+    }\n+\n+    @Test\n     public void test_summary_append_credits() throws IOException {\n         Call<Movie> call = getManager().moviesService().summary(TestData.MOVIE_ID,\n                 null,\n@@ -228,11 +241,26 @@ public class MoviesServiceTest extends BaseTestCase {\n         assertThat(usResult).isNotNull();\n         assertThat(usResult.release_dates).isNotNull();\n         assertThat(usResult.release_dates.isEmpty()).isFalse();\n-        assertThat(usResult.release_dates.get(0).iso_639_1).isNotNull();\n-        assertThat(usResult.release_dates.get(0).certification).isEqualTo(\"R\");\n-        assertThat(usResult.release_dates.get(0).release_date).isEqualTo(\"1999-10-14T00:00:00.000Z\");\n+\n+\n+\n         assertThat(usResult.release_dates.get(0).note).isNotNull();\n         assertThat(usResult.release_dates.get(0).type).isBetween(1, 6);\n+        assertThat(usResult.release_dates.get(0).iso_639_1).isNotNull();\n+\n+        boolean found = false;\n+        for (ReleaseDate rDate : usResult.release_dates) {\n+            if (rDate.type == 3) {\n+\n+                assertThat(rDate.certification).isEqualTo(\"R\");\n+                assertThat(rDate.release_date).isEqualTo(\"1999-10-15T00:00:00.000Z\");\n+\n+                found = true;\n+                break;\n+            }\n+        }\n+        assertThat(found).isTrue();\n+\n     }\n \n     @Test\n"}
{"repository": "UweTrottmann/tmdb-java", "clone_url": "https://github.com/UweTrottmann/tmdb-java.git", "timestamp": "2023-05-30T23:08:35.771161Z", "commit_hash": "88758b14bd4b9b5df6f21d639e96f2f0b8106213", "commit_message": "Fix discover service date formatting.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/uwetrottmann/tmdb/TmdbHelper.java b/src/main/java/com/uwetrottmann/tmdb/TmdbHelper.java\nindex 7631cb7..020119b 100644\n--- a/src/main/java/com/uwetrottmann/tmdb/TmdbHelper.java\n+++ b/src/main/java/com/uwetrottmann/tmdb/TmdbHelper.java\n@@ -30,12 +30,12 @@ import java.util.Date;\n \n public class TmdbHelper {\n \n-    /** Format for decoding JSON dates in string format. */\n-    private static final SimpleDateFormat JSON_STRING_DATE = new SimpleDateFormat(\"yyy-MM-dd\");\n+    public static final String TMDB_DATE_PATTERN = \"yyyy-MM-dd\";\n+    private static final SimpleDateFormat TMDB_DATE_FORMAT = new SimpleDateFormat(TMDB_DATE_PATTERN);\n \n     /**\n-     * Create a {@link com.google.gson.GsonBuilder} and register all of the custom types needed in\n-     * order to properly deserialize complex TMDb-specific types.\n+     * Create a {@link com.google.gson.GsonBuilder} and register all of the custom types needed in order to properly\n+     * deserialize complex TMDb-specific types.\n      *\n      * @return Assembled GSON builder instance.\n      */\n@@ -47,21 +47,19 @@ public class TmdbHelper {\n             @Override\n             public Integer deserialize(JsonElement json, Type typeOfT,\n                     JsonDeserializationContext context) throws JsonParseException {\n-                try {\n-                    return Integer.valueOf(json.getAsInt());\n-                } catch (NumberFormatException e) {\n-                    return null;\n-                }\n+                return json.getAsInt();\n             }\n         });\n+\n         builder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n             @Override\n             public Date deserialize(JsonElement json, Type typeOfT,\n                     JsonDeserializationContext context) throws JsonParseException {\n \n                 try {\n-                    return JSON_STRING_DATE.parse(json.getAsString());\n+                    return TMDB_DATE_FORMAT.parse(json.getAsString());\n                 } catch (ParseException e) {\n+                    // return null instead of failing (like default parser would)\n                     return null;\n                 }\n             }\ndiff --git a/src/main/java/com/uwetrottmann/tmdb/entities/TmdbDate.java b/src/main/java/com/uwetrottmann/tmdb/entities/TmdbDate.java\nnew file mode 100644\nindex 0000000..d645dea\n--- /dev/null\n+++ b/src/main/java/com/uwetrottmann/tmdb/entities/TmdbDate.java\n@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2016 Uwe Trottmann\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.uwetrottmann.tmdb.entities;\n+\n+import com.uwetrottmann.tmdb.TmdbHelper;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class TmdbDate {\n+    private static final ThreadLocal<DateFormat> TMDB_DATE_FORMAT = new ThreadLocal<DateFormat>() {\n+        @Override\n+        public DateFormat initialValue() {\n+            return new SimpleDateFormat(TmdbHelper.TMDB_DATE_PATTERN);\n+        }\n+    };\n+\n+    private final Date date;\n+\n+    public TmdbDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public TmdbDate(String date) {\n+        Date parsedDate;\n+        try {\n+            parsedDate = TMDB_DATE_FORMAT.get().parse(date);\n+        } catch (ParseException e) {\n+            parsedDate = null;\n+        }\n+        this.date = parsedDate;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TMDB_DATE_FORMAT.get().format(date);\n+    }\n+}\ndiff --git a/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java b/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\nindex df85a81..90fbabf 100644\n--- a/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\n+++ b/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\n@@ -18,6 +18,7 @@ package com.uwetrottmann.tmdb.services;\n \n import com.uwetrottmann.tmdb.entities.AppendToDiscoverResponse;\n import com.uwetrottmann.tmdb.entities.MovieResultsPage;\n+import com.uwetrottmann.tmdb.entities.TmdbDate;\n import com.uwetrottmann.tmdb.entities.TvResultsPage;\n import com.uwetrottmann.tmdb.enumerations.SortBy;\n import retrofit.http.GET;\n@@ -79,10 +80,10 @@ public interface DiscoverService {\n             @Query(\"language\") String language,\n             @Query(\"page\") Integer page,\n             @Query(\"primary_release_year\") String primaryReleaseYear,\n-            @Query(\"primary_release_date.gte\") Date primaryReleaseYearGte,\n-            @Query(\"primary_release_date.lte\") Date primaryReleaseYearLte,\n-            @Query(\"release_date.gte\") Date releaseDateGte,\n-            @Query(\"release_date.lte\") Date releaseDateLte,\n+            @Query(\"primary_release_date.gte\") TmdbDate primaryReleaseYearGte,\n+            @Query(\"primary_release_date.lte\") TmdbDate primaryReleaseYearLte,\n+            @Query(\"release_date.gte\") TmdbDate releaseDateGte,\n+            @Query(\"release_date.lte\") TmdbDate releaseDateLte,\n             @Query(\"sort_by\") SortBy sortBy,\n             @Query(\"vote_count.gte\") Integer voteCountGte,\n             @Query(\"vote_count.lte\") Integer voteCountLte,\n@@ -129,8 +130,8 @@ public interface DiscoverService {\n             @Query(\"vote_average.gte\") Float voteAverageGte,\n             @Query(\"with_genres\") AppendToDiscoverResponse withGenres,\n             @Query(\"with_networks\") AppendToDiscoverResponse withNetworks,\n-            @Query(\"first_air_date.gte\") Date firstAirDateGte,\n-            @Query(\"first_air_date.lte\") Date firstAirDateLte\n+            @Query(\"first_air_date.gte\") TmdbDate firstAirDateGte,\n+            @Query(\"first_air_date.lte\") TmdbDate firstAirDateLte\n     );\n \n }\n", "test_patch": "diff --git a/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java b/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\nindex 8a29b0a..dcf2d31 100644\n--- a/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\n@@ -20,6 +20,7 @@ import com.uwetrottmann.tmdb.BaseTestCase;\n import com.uwetrottmann.tmdb.entities.AppendToDiscoverResponse;\n import com.uwetrottmann.tmdb.entities.BaseResultsPage;\n import com.uwetrottmann.tmdb.entities.MovieResultsPage;\n+import com.uwetrottmann.tmdb.entities.TmdbDate;\n import com.uwetrottmann.tmdb.entities.TvResultsPage;\n import com.uwetrottmann.tmdb.enumerations.SortBy;\n import org.junit.Test;\n@@ -36,10 +37,18 @@ public class DiscoverServiceTest extends BaseTestCase {\n     @Test\n     public void test_discover_movie() throws ParseException {\n         MovieResultsPage results = getManager().discoverService().discoverMovie(false, true, null, 1,\n-                null, JSON_STRING_DATE.parse(\"1990-01-01\"), null, JSON_STRING_DATE.parse(\"1990-01-01\"), null,\n-                SortBy.POPULARITY_DESC, null, null, null, null, new AppendToDiscoverResponse(287),\n+                null,\n+                new TmdbDate(\"1990-01-01\"),\n+                null,\n+                new TmdbDate(\"1990-01-01\"),\n+                null,\n+                SortBy.POPULARITY_DESC,\n+                null, null, null, null,\n+                new AppendToDiscoverResponse(287),\n                 new AppendToDiscoverResponse(7467),\n-                null, new AppendToDiscoverResponse(10749), null, null, null);\n+                null,\n+                new AppendToDiscoverResponse(10749),\n+                null, null, null);\n \n         assertResultsPage(results);\n         assertThat(results.results).isNotEmpty();\n@@ -48,9 +57,12 @@ public class DiscoverServiceTest extends BaseTestCase {\n     @Test\n     public void test_discover_tv() throws ParseException {\n         TvResultsPage results = getManager().discoverService().discoverTv(null, null,\n-                SortBy.VOTE_AVERAGE_DESC, null, null, null, new AppendToDiscoverResponse(18, 10765),\n-                new AppendToDiscoverResponse(49), JSON_STRING_DATE.parse(\"2010-01-01\"),\n-                JSON_STRING_DATE.parse(\"2014-01-01\"));\n+                SortBy.VOTE_AVERAGE_DESC,\n+                null, null, null,\n+                new AppendToDiscoverResponse(18, 10765),\n+                new AppendToDiscoverResponse(49),\n+                new TmdbDate(\"2010-01-01\"),\n+                new TmdbDate(\"2014-01-01\"));\n \n         assertResultsPage(results);\n         assertThat(results.results).isNotEmpty();\n"}
{"repository": "UweTrottmann/tmdb-java", "clone_url": "https://github.com/UweTrottmann/tmdb-java.git", "timestamp": "2023-05-30T23:16:03.128336Z", "commit_hash": "e0d71698b30b62b822ba180090a6eb4181a5ca95", "commit_message": "Clean up discover service and fix javadoc errors.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java b/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\nindex 244d5d4..df85a81 100644\n--- a/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\n+++ b/src/main/java/com/uwetrottmann/tmdb/services/DiscoverService.java\n@@ -16,69 +16,64 @@\n \n package com.uwetrottmann.tmdb.services;\n \n-import java.util.Date;\n-\n import com.uwetrottmann.tmdb.entities.AppendToDiscoverResponse;\n-import com.uwetrottmann.tmdb.entities.FindResults;\n import com.uwetrottmann.tmdb.entities.MovieResultsPage;\n import com.uwetrottmann.tmdb.entities.TvResultsPage;\n import com.uwetrottmann.tmdb.enumerations.SortBy;\n-\n import retrofit.http.GET;\n import retrofit.http.Query;\n \n+import java.util.Date;\n+\n public interface DiscoverService {\n \n     /**\n      * Discover movies by different types of data like average rating, number of votes and genres.\n      *\n-     * @param include_adult <em>Optional.</em> Toggle the inclusion of adult titles.\n-     * Expected value is a boolean, true or false. Default is false.\n-     * @param include_video <em>Optional.</em> Toggle the inclusion of items marked as a video.\n-     * Expected value is a boolean, true or false. Default is true.\n+     * @param includeAdult <em>Optional.</em> Toggle the inclusion of adult titles. Expected value is a boolean, true or\n+     * false. Default is false.\n+     * @param includeVideo <em>Optional.</em> Toggle the inclusion of items marked as a video. Expected value is a\n+     * boolean, true or false. Default is true.\n      * @param language <em>Optional.</em> ISO 639-1 code.\n      * @param page <em>Optional.</em> Minimum 1, maximum 1000.\n-     * @param primary_release_year <em>Optional.</em> Filter the results so that only the primary release date\n-     * year has this value. Expected value is a year.\n-     * @param primary_release_date.gte <em>Optional.</em> Filter by the primary release date and only include\n-     * those which are greater than or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param primary_release_date.lte <em>Optional.</em> Filter by the primary release date and only include\n-     * those which are less or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param release_date.gte <em>Optional.</em> Filter by all available release dates and only include those\n-     * which are greater or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param release_date.lte <em>Optional.</em> Filter by all available release dates and only include those\n-     * which are less or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param sort_by <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n+     * @param primaryReleaseYear <em>Optional.</em> Filter the results so that only the primary release date year has\n+     * this value. Expected value is a year.\n+     * @param primaryReleaseYearGte <em>Optional.</em> Filter by the primary release date and only include those which\n+     * are greater than or equal to the specified value. Expected format is YYYY-MM-DD.\n+     * @param primaryReleaseYearLte <em>Optional.</em> Filter by the primary release date and only include those which\n+     * are less or equal to the specified value. Expected format is YYYY-MM-DD.\n+     * @param releaseDateGte <em>Optional.</em> Filter by all available release dates and only include those which are\n+     * greater or equal to the specified value. Expected format is YYYY-MM-DD.\n+     * @param releaseDateLte <em>Optional.</em> Filter by all available release dates and only include those which are\n+     * less or equal to the specified value. Expected format is YYYY-MM-DD.\n+     * @param sortBy <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n      * release_date.desc, revenue.asc, revenue.desc, primary_release_date.asc, primary_release_date.desc,\n-     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc,\n-     * vote_count.asc, vote_count.desc\n-     * @param vote_count.gte <em>Optional.</em> Filter movies by their vote count and only include movies that\n-     * have a vote count that is equal to or lower than the specified value.\n-     * @param vote_count.lte <em>Optional.</em> Filter movies by their vote count and only include movies that\n-     * have a vote count that is equal to or lower than the specified value. Expected value is an integer.\n-     * @param vote_average.gte <em>Optional.</em> Filter movies by their vote average and only include those that\n-     * have an average rating that is equal to or higher than the specified value. Expected value is a float.\n-     * @param vote_average.lte <em>Optional.</em> Filter movies by their vote average and only include those that\n-     * have an average rating that is equal to or lower than the specified value. Expected value is a float.\n-     * @param with_cast <em>Optional.</em> Only include movies that have this person id added as a cast member.\n-     * Expected value is an integer (the id of a person).\n-     * @param with_crew <em>Optional.</em> Only include movies that have this person id added as a crew member.\n-     * Expected value is an integer (the id of a person).\n-     * @param with_companies <em>Optional.</em> Filter movies to include a specific company. Expected value is\n-     * an integer (the id of a company).\n-     * @param with_genres <em>Optional.</em> Only include movies with the specified genres. Expected value is\n-     * an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_keywords <em>Optional.</em> Only include movies with the specified genres. Expected value is\n-     * an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_people <em>Optional.</em> Only include movies that have these person id's added as a cast or\n-     * crew member. Expected value is an integer (the id or ids of a person).\n-     * @param year <em>Optional.</em> Filter the results by all available release dates that have the specified\n-     * value added as a year. Expected value is an integer (year).\n-     * \n-     * @return\n+     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc, vote_count.asc, vote_count.desc\n+     * @param voteCountGte <em>Optional.</em> Filter movies by their vote count and only include movies that have a vote\n+     * count that is equal to or lower than the specified value.\n+     * @param voteCountLte <em>Optional.</em> Filter movies by their vote count and only include movies that have a vote\n+     * count that is equal to or lower than the specified value. Expected value is an integer.\n+     * @param voteAverageGte <em>Optional.</em> Filter movies by their vote average and only include those that have an\n+     * average rating that is equal to or higher than the specified value. Expected value is a float.\n+     * @param voteAverageLte <em>Optional.</em> Filter movies by their vote average and only include those that have an\n+     * average rating that is equal to or lower than the specified value. Expected value is a float.\n+     * @param withCast <em>Optional.</em> Only include movies that have this person id added as a cast member. Expected\n+     * value is an integer (the id of a person).\n+     * @param withCrew <em>Optional.</em> Only include movies that have this person id added as a crew member. Expected\n+     * value is an integer (the id of a person).\n+     * @param withCompanies <em>Optional.</em> Filter movies to include a specific company. Expected value is an integer\n+     * (the id of a company).\n+     * @param withGenres <em>Optional.</em> Only include movies with the specified genres. Expected value is an integer\n+     * (the id of a genre). Multiple values can be specified.\n+     * @param withKeywords <em>Optional.</em> Only include movies with the specified genres. Expected value is an\n+     * integer (the id of a genre). Multiple values can be specified.\n+     * @param withPeople <em>Optional.</em> Only include movies that have these person id's added as a cast or crew\n+     * member. Expected value is an integer (the id or ids of a person).\n+     * @param year <em>Optional.</em> Filter the results by all available release dates that have the specified value\n+     * added as a year. Expected value is an integer (year).\n      */\n     @GET(\"/discover/movie\")\n-    FindResults discoverMovie(\n+    MovieResultsPage discoverMovie(\n             @Query(\"include_adult\") boolean includeAdult,\n             @Query(\"include_video\") boolean includeVideo,\n             @Query(\"language\") String language,\n@@ -101,95 +96,31 @@ public interface DiscoverService {\n             @Query(\"with_people\") AppendToDiscoverResponse withPeople,\n             @Query(\"year\") Integer year\n     );\n-    \n-    /**\n-     * Discover movies by different types of data like average rating, number of votes and genres.\n-     *\n-     * @param include_adult <em>Optional.</em> Toggle the inclusion of adult titles.\n-     * Expected value is a boolean, true or false. Default is false.\n-     * @param include_video <em>Optional.</em> Toggle the inclusion of items marked as a video.\n-     * Expected value is a boolean, true or false. Default is true.\n-     * @param language <em>Optional.</em> ISO 639-1 code.\n-     * @param page <em>Optional.</em> Minimum 1, maximum 1000.\n-     * @param primary_release_year <em>Optional.</em> Filter the results so that only the primary release date\n-     * year has this value. Expected value is a year.\n-     * @param primary_release_date.gte <em>Optional.</em> Filter by the primary release date and only include\n-     * those which are greater than or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param primary_release_date.lte <em>Optional.</em> Filter by the primary release date and only include\n-     * those which are less or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param release_date.gte <em>Optional.</em> Filter by all available release dates and only include those\n-     * which are greater or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param release_date.lte <em>Optional.</em> Filter by all available release dates and only include those\n-     * which are less or equal to the specified value. Expected format is YYYY-MM-DD.\n-     * @param sort_by <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n-     * release_date.desc, revenue.asc, revenue.desc, primary_release_date.asc, primary_release_date.desc,\n-     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc,\n-     * vote_count.asc, vote_count.desc\n-     * @param with_cast <em>Optional.</em> Only include movies that have this person id added as a cast member.\n-     * Expected value is an integer (the id of a person).\n-     * @param with_crew <em>Optional.</em> Only include movies that have this person id added as a crew member.\n-     * Expected value is an integer (the id of a person).\n-     * @param with_companies <em>Optional.</em> Filter movies to include a specific company. Expected value is\n-     * an integer (the id of a company).\n-     * @param with_genres <em>Optional.</em> Only include movies with the specified genres. Expected value is\n-     * an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_keywords <em>Optional.</em> Only include movies with the specified genres. Expected value is\n-     * an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_people <em>Optional.</em> Only include movies that have these person id's added as a cast or\n-     * crew member. Expected value is an integer (the id or ids of a person).\n-     * @param year <em>Optional.</em> Filter the results by all available release dates that have the specified\n-     * value added as a year. Expected value is an integer (year).\n-     * \n-     * @return\n-     */\n-    @GET(\"/discover/movie\")\n-    MovieResultsPage discoverMovie(\n-            @Query(\"include_adult\") boolean includeAdult,\n-            @Query(\"include_video\") boolean includeVideo,\n-            @Query(\"language\") String language,\n-            @Query(\"page\") Integer page,\n-            @Query(\"primary_release_year\") String primaryReleaseYear,\n-            @Query(\"primary_release_date.gte\") Date primaryReleaseYearGte,\n-            @Query(\"primary_release_date.lte\") Date primaryReleaseYearLte,\n-            @Query(\"release_date.gte\") Date releaseDateGte,\n-            @Query(\"release_date.lte\") Date releaseDateLte,\n-            @Query(\"sort_by\") SortBy sortBy,\n-            @Query(\"with_cast\") AppendToDiscoverResponse withCast,\n-            @Query(\"with_crew\") AppendToDiscoverResponse withCrew,\n-            @Query(\"with_companies\") AppendToDiscoverResponse withCompanies,\n-            @Query(\"with_genres\") AppendToDiscoverResponse withGenres,\n-            @Query(\"with_keywords\") AppendToDiscoverResponse withKeywords,\n-            @Query(\"with_people\") AppendToDiscoverResponse withPeople,\n-            @Query(\"year\") Integer year\n-    );\n-    \n+\n     /**\n-     * Discover TV shows by different types of data like average rating, number of votes, genres,\n-     * the network they aired on and air dates.\n+     * Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired\n+     * on and air dates.\n      *\n      * @param page <em>Optional.</em> Minimum 1, maximum 1000.\n      * @param language <em>Optional.</em> ISO 639-1 code.\n-     * @param sort_by <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n+     * @param sortBy <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n      * release_date.desc, revenue.asc, revenue.desc, primary_release_date.asc, primary_release_date.desc,\n-     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc,\n-     * vote_count.asc, vote_count.desc\n-     * @param first_air_date_year <em>Optional.</em> Filter the results release dates to matches that include\n-     * this value. Expected value is a year.\n-     * @param vote_count.gte <em>Optional.</em> Only include TV shows that are equal to, or have a vote count\n-     * higher than this value. Expected value is an integer.\n-     * @param vote_average.gte <em>Optional.</em> Only include TV shows that are equal to, or have a higher\n-     * average rating than this value. Expected value is a float.\n-     * @param with_genres <em>Optional.</em> Only include TV shows with the specified genres. Expected value\n-     * is an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_networks <em>Optional.</em> Filter TV shows to include a specific network.\n-     * Expected value is an integer (the id of a network).\n-     * @param first_air_date.gte <em>Optional.</em> The minimum release to include. Expected format is YYYY-MM-DD.\n-     * @param first_air_date.lte <em>Optional.</em> The maximum release to include. Expected format is YYYY-MM-DD.\n-     * \n-     * @return\n+     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc, vote_count.asc, vote_count.desc\n+     * @param firstAirDateYear <em>Optional.</em> Filter the results release dates to matches that include this value.\n+     * Expected value is a year.\n+     * @param voteCountGte <em>Optional.</em> Only include TV shows that are equal to, or have a vote count higher than\n+     * this value. Expected value is an integer.\n+     * @param voteAverageGte <em>Optional.</em> Only include TV shows that are equal to, or have a higher average rating\n+     * than this value. Expected value is a float.\n+     * @param withGenres <em>Optional.</em> Only include TV shows with the specified genres. Expected value is an\n+     * integer (the id of a genre). Multiple values can be specified.\n+     * @param withNetworks <em>Optional.</em> Filter TV shows to include a specific network. Expected value is an\n+     * integer (the id of a network).\n+     * @param firstAirDateGte <em>Optional.</em> The minimum release to include. Expected format is YYYY-MM-DD.\n+     * @param firstAirDateLte <em>Optional.</em> The maximum release to include. Expected format is YYYY-MM-DD.\n      */\n     @GET(\"/discover/tv\")\n-    MovieResultsPage discoverTv(\n+    TvResultsPage discoverTv(\n             @Query(\"page\") Integer page,\n             @Query(\"language\") String language,\n             @Query(\"sort_by\") SortBy sortBy,\n@@ -201,38 +132,5 @@ public interface DiscoverService {\n             @Query(\"first_air_date.gte\") Date firstAirDateGte,\n             @Query(\"first_air_date.lte\") Date firstAirDateLte\n     );\n-    \n-    /**\n-     * Discover TV shows by different types of data like average rating, number of votes, genres,\n-     * the network they aired on and air dates.\n-     *\n-     * @param page <em>Optional.</em> Minimum 1, maximum 1000.\n-     * @param language <em>Optional.</em> ISO 639-1 code.\n-     * @param sort_by <em>Optional.</em> Available options are: popularity.asc, popularity.desc, release_date.asc,\n-     * release_date.desc, revenue.asc, revenue.desc, primary_release_date.asc, primary_release_date.desc,\n-     * original_title.asc, original_title.desc, vote_average.asc, vote_average.desc,\n-     * vote_count.asc, vote_count.desc\n-     * @param first_air_date_year <em>Optional.</em> Filter the results release dates to matches that include\n-     * this value. Expected value is a year.\n-     * @param with_genres <em>Optional.</em> Only include TV shows with the specified genres. Expected value\n-     * is an integer (the id of a genre). Multiple values can be specified.\n-     * @param with_networks <em>Optional.</em> Filter TV shows to include a specific network.\n-     * Expected value is an integer (the id of a network).\n-     * @param first_air_date.gte <em>Optional.</em> The minimum release to include. Expected format is YYYY-MM-DD.\n-     * @param first_air_date.lte <em>Optional.</em> The maximum release to include. Expected format is YYYY-MM-DD.\n-     * \n-     * @return\n-     */\n-    @GET(\"/discover/tv\")\n-    TvResultsPage discoverTv(\n-            @Query(\"page\") Integer page,\n-            @Query(\"language\") String language,\n-            @Query(\"sort_by\") SortBy sortBy,\n-            @Query(\"first_air_date_year\") String firstAirDateYear,\n-            @Query(\"with_genres\") AppendToDiscoverResponse withGenres,\n-            @Query(\"with_networks\") AppendToDiscoverResponse withNetworks,\n-            @Query(\"first_air_date.gte\") Date firstAirDateGte,\n-            @Query(\"first_air_date.lte\") Date firstAirDateLte\n-    );\n \n }\n", "test_patch": "diff --git a/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java b/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\nindex b545112..8a29b0a 100644\n--- a/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\n+++ b/src/test/java/com/uwetrottmann/tmdb/services/DiscoverServiceTest.java\n@@ -16,8 +16,6 @@\n \n package com.uwetrottmann.tmdb.services;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n import com.uwetrottmann.tmdb.BaseTestCase;\n import com.uwetrottmann.tmdb.entities.AppendToDiscoverResponse;\n import com.uwetrottmann.tmdb.entities.BaseResultsPage;\n@@ -26,34 +24,38 @@ import com.uwetrottmann.tmdb.entities.TvResultsPage;\n import com.uwetrottmann.tmdb.enumerations.SortBy;\n import org.junit.Test;\n \n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class DiscoverServiceTest extends BaseTestCase {\n \n     private static final SimpleDateFormat JSON_STRING_DATE = new SimpleDateFormat(\"yyy-MM-dd\");\n-    \n+\n     @Test\n     public void test_discover_movie() throws ParseException {\n         MovieResultsPage results = getManager().discoverService().discoverMovie(false, true, null, 1,\n                 null, JSON_STRING_DATE.parse(\"1990-01-01\"), null, JSON_STRING_DATE.parse(\"1990-01-01\"), null,\n-                SortBy.POPULARITY_DESC, new AppendToDiscoverResponse(287), new AppendToDiscoverResponse(7467),\n+                SortBy.POPULARITY_DESC, null, null, null, null, new AppendToDiscoverResponse(287),\n+                new AppendToDiscoverResponse(7467),\n                 null, new AppendToDiscoverResponse(10749), null, null, null);\n-        \n+\n         assertResultsPage(results);\n         assertThat(results.results).isNotEmpty();\n     }\n-    \n+\n     @Test\n     public void test_discover_tv() throws ParseException {\n         TvResultsPage results = getManager().discoverService().discoverTv(null, null,\n-                SortBy.VOTE_AVERAGE_DESC, null, new AppendToDiscoverResponse(18, 10765),\n+                SortBy.VOTE_AVERAGE_DESC, null, null, null, new AppendToDiscoverResponse(18, 10765),\n                 new AppendToDiscoverResponse(49), JSON_STRING_DATE.parse(\"2010-01-01\"),\n                 JSON_STRING_DATE.parse(\"2014-01-01\"));\n-        \n+\n         assertResultsPage(results);\n         assertThat(results.results).isNotEmpty();\n     }\n-    \n+\n     private void assertResultsPage(BaseResultsPage results) {\n         assertThat(results.page).isPositive();\n         assertThat(results.total_pages).isPositive();\n"}
