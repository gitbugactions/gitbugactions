{"repository": "tinify/tinify-java", "clone_url": "https://github.com/tinify/tinify-java.git", "timestamp": "2023-05-30T20:57:34.057893Z", "commit_hash": "c8e8a53b124106c5ecdcb10e08ffc4a955de1842", "commit_message": "Implement possible fix for leaking responses.\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 792a5ff..cf8cf54 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -112,9 +112,9 @@\n     </profiles>\n     <dependencies>\n         <dependency>\n-            <groupId>com.squareup.okhttp</groupId>\n+            <groupId>com.squareup.okhttp3</groupId>\n             <artifactId>okhttp</artifactId>\n-            <version>2.5.0</version>\n+            <version>3.8.1</version>\n         </dependency>\n         <dependency>\n             <groupId>com.google.code.gson</groupId>\n@@ -140,9 +140,9 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n-            <groupId>com.squareup.okhttp</groupId>\n+            <groupId>com.squareup.okhttp3</groupId>\n             <artifactId>mockwebserver</artifactId>\n-            <version>2.5.0</version>\n+            <version>3.8.1</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\ndiff --git a/src/main/java/com/tinify/Client.java b/src/main/java/com/tinify/Client.java\nindex bb9e87e..f01206b 100644\n--- a/src/main/java/com/tinify/Client.java\n+++ b/src/main/java/com/tinify/Client.java\n@@ -1,7 +1,7 @@\n package com.tinify;\n \n import com.google.gson.Gson;\n-import com.squareup.okhttp.*;\n+import okhttp3.*;\n import java.io.IOException;\n import java.net.Proxy;\n import java.net.InetSocketAddress;\n@@ -42,7 +42,7 @@ public class Client {\n     }\n \n     public Client(final String key, final String appIdentifier, final String proxy) {\n-        client = new OkHttpClient();\n+        OkHttpClient.Builder builder = new OkHttpClient.Builder();\n \n         if (proxy != null) {\n             try {\n@@ -51,9 +51,9 @@ public class Client {\n                 Authenticator proxyAuthenticator = createProxyAuthenticator(url);\n \n                 if (proxyAddress != null) {\n-                    client.setProxy(proxyAddress);\n+                    builder.proxy(proxyAddress);\n                     if (proxyAuthenticator != null) {\n-                        client.setAuthenticator(proxyAuthenticator);\n+                        builder.proxyAuthenticator(proxyAuthenticator);\n                     }\n                 }\n             } catch (java.lang.Exception e) {\n@@ -61,10 +61,12 @@ public class Client {\n             }\n         }\n \n-        client.setSslSocketFactory(SSLContext.getSocketFactory());\n-        client.setConnectTimeout(0, TimeUnit.SECONDS);\n-        client.setReadTimeout(0, TimeUnit.SECONDS);\n-        client.setWriteTimeout(0, TimeUnit.SECONDS);\n+        builder.sslSocketFactory(SSLContext.getSocketFactory());\n+        builder.connectTimeout(0, TimeUnit.SECONDS);\n+        builder.readTimeout(0, TimeUnit.SECONDS);\n+        builder.writeTimeout(0, TimeUnit.SECONDS);\n+\n+        client = builder.build();\n \n         credentials = Credentials.basic(\"api\", key);\n         if (appIdentifier == null) {\n@@ -126,11 +128,7 @@ public class Client {\n         }\n \n         return new Authenticator() {\n-            @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n-                return null;\n-            }\n-\n-            @Override public Request authenticateProxy(Proxy proxy, Response response) throws IOException {\n+            @Override public Request authenticate(Route route, Response response) throws IOException {\n                 String credential = Credentials.basic(username, password);\n                 return response.request().newBuilder().header(\"Proxy-Authorization\", credential).build();\n             }\n@@ -179,7 +177,7 @@ public class Client {\n             Exception.Data data;\n             Gson gson = new Gson();\n             try {\n-                data = gson.fromJson(response.body().charStream(), Exception.Data.class);\n+                data = gson.fromJson(response.body().string(), Exception.Data.class);\n                 if (data == null) {\n                     data = new Exception.Data();\n                     data.setMessage(\"Error while parsing response: received empty body\");\ndiff --git a/src/main/java/com/tinify/Result.java b/src/main/java/com/tinify/Result.java\nindex cb8ffa9..609d7ee 100644\n--- a/src/main/java/com/tinify/Result.java\n+++ b/src/main/java/com/tinify/Result.java\n@@ -3,7 +3,7 @@ package com.tinify;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n-import com.squareup.okhttp.Headers;\n+import okhttp3.Headers;\n \n public class Result extends ResultMeta {\n     private final byte[] data;\ndiff --git a/src/main/java/com/tinify/ResultMeta.java b/src/main/java/com/tinify/ResultMeta.java\nindex ab4e2a4..29c5e6d 100644\n--- a/src/main/java/com/tinify/ResultMeta.java\n+++ b/src/main/java/com/tinify/ResultMeta.java\n@@ -1,6 +1,6 @@\n package com.tinify;\n \n-import com.squareup.okhttp.Headers;\n+import okhttp3.Headers;\n \n public class ResultMeta {\n     protected final Headers meta;\ndiff --git a/src/main/java/com/tinify/SSLContext.java b/src/main/java/com/tinify/SSLContext.java\nindex f9fd3f4..323f554 100644\n--- a/src/main/java/com/tinify/SSLContext.java\n+++ b/src/main/java/com/tinify/SSLContext.java\n@@ -13,7 +13,6 @@ import java.security.cert.CertificateFactory;\n import java.util.Collection;\n \n public class SSLContext {\n-\n     public static SSLSocketFactory getSocketFactory() {\n         try {\n             CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\ndiff --git a/src/main/java/com/tinify/Source.java b/src/main/java/com/tinify/Source.java\nindex b424943..68d0fe1 100644\n--- a/src/main/java/com/tinify/Source.java\n+++ b/src/main/java/com/tinify/Source.java\n@@ -1,6 +1,6 @@\n package com.tinify;\n \n-import com.squareup.okhttp.Response;\n+import okhttp3.Response;\n \n import java.io.IOException;\n import java.nio.file.Files;\n@@ -15,14 +15,16 @@ public class Source {\n     }\n \n     public static Source fromBuffer(final byte[] buffer) {\n-        Response response = Tinify.client().request(Client.Method.POST, \"/shrink\", buffer);\n-        return new Source(response.header(\"location\"), new Options());\n+        try (Response response = Tinify.client().request(Client.Method.POST, \"/shrink\", buffer)) {\n+            return new Source(response.header(\"location\"), new Options());\n+        }\n     }\n \n     public static Source fromUrl(final String url) {\n         Options body = new Options().with(\"source\", new Options().with(\"url\", url));\n-        Response response = Tinify.client().request(Client.Method.POST, \"/shrink\", body);\n-        return new Source(response.header(\"location\"), new Options());\n+        try (Response response = Tinify.client().request(Client.Method.POST, \"/shrink\", body)) {\n+            return new Source(response.header(\"location\"), new Options());\n+        }\n     }\n \n     public Source(final String url, final Options commands) {\n", "test_patch": "diff --git a/src/test/java/com/tinify/ClientEndpointTest.java b/src/test/java/com/tinify/ClientEndpointTest.java\nindex 28e8573..9a15e1f 100644\n--- a/src/test/java/com/tinify/ClientEndpointTest.java\n+++ b/src/test/java/com/tinify/ClientEndpointTest.java\n@@ -1,7 +1,7 @@\n package com.tinify;\n \n-import com.squareup.okhttp.OkHttpClient;\n-import com.squareup.okhttp.Request;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n import mockit.Expectations;\n import mockit.Mocked;\n import mockit.Verifications;\n@@ -9,7 +9,6 @@ import org.junit.Before;\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.lang.*;\n \n import static org.junit.Assert.assertEquals;\n \n@@ -40,7 +39,7 @@ public class ClientEndpointTest {\n         new Verifications() {{\n             Request request;\n             httpClient.newCall(request = withCapture());\n-            assertEquals(\"https://api.tinify.com/shrink\", request.urlString());\n+            assertEquals(\"https://api.tinify.com/shrink\", request.url().toString());\n         }};\n     }\n \n@@ -62,7 +61,7 @@ public class ClientEndpointTest {\n         new Verifications() {{\n             Request request;\n             httpClient.newCall(request = withCapture());\n-            assertEquals(url, request.urlString());\n+            assertEquals(url, request.url().toString());\n         }};\n     }\n }\ndiff --git a/src/test/java/com/tinify/ClientErrorTest.java b/src/test/java/com/tinify/ClientErrorTest.java\nindex 9e3dd1e..89663ec 100644\n--- a/src/test/java/com/tinify/ClientErrorTest.java\n+++ b/src/test/java/com/tinify/ClientErrorTest.java\n@@ -1,28 +1,12 @@\n package com.tinify;\n \n-import com.squareup.okhttp.OkHttpClient;\n-import com.squareup.okhttp.Request;\n-import com.squareup.okhttp.mockwebserver.MockWebServer;\n-import mockit.Expectations;\n-import mockit.Mocked;\n+import okhttp3.mockwebserver.MockWebServer;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Test;\n-\n import java.io.IOException;\n-import java.lang.*;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-import com.squareup.okhttp.Call;\n-import com.squareup.okhttp.Response;\n-import mockit.Invocation;\n-import mockit.Mock;\n-import mockit.MockUp;\n-\n public class ClientErrorTest {\n     Client subject;\n     MockWebServer server;\ndiff --git a/src/test/java/com/tinify/ClientTest.java b/src/test/java/com/tinify/ClientTest.java\nindex 74f7aaf..ea997b4 100644\n--- a/src/test/java/com/tinify/ClientTest.java\n+++ b/src/test/java/com/tinify/ClientTest.java\n@@ -1,12 +1,12 @@\n package com.tinify;\n \n import com.google.gson.Gson;\n-import com.squareup.okhttp.HttpUrl;\n-import com.squareup.okhttp.Call;\n-import com.squareup.okhttp.Response;\n-import com.squareup.okhttp.mockwebserver.MockResponse;\n-import com.squareup.okhttp.mockwebserver.MockWebServer;\n-import com.squareup.okhttp.mockwebserver.RecordedRequest;\n+import okhttp3.HttpUrl;\n+import okhttp3.Call;\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n import mockit.*;\n import org.apache.commons.codec.binary.Base64;\n import org.junit.After;\n@@ -14,9 +14,7 @@ import org.junit.Before;\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.lang.*;\n import java.net.URISyntaxException;\n-import java.net.URL;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.HashMap;\n@@ -43,14 +41,18 @@ public class ClientTest {\n         {\n             @Mock\n             @SuppressWarnings(\"unused\")\n-            HttpUrl parse(String input)\n+            HttpUrl parse(Invocation inv, String url)\n             {\n-                return new HttpUrl.Builder()\n-                        .scheme(\"http\")\n-                        .host(server.getHostName())\n-                        .port(server.getPort())\n-                        .encodedPath(\"/shrink\")\n-                        .build();\n+                if (url.contains(\"localhost\")) {\n+                    return inv.proceed();\n+                } else {\n+                    return new HttpUrl.Builder()\n+                            .scheme(\"http\")\n+                            .host(server.getHostName())\n+                            .port(server.getPort())\n+                            .encodedPath(\"/shrink\")\n+                            .build();\n+                }\n             }\n         };\n     }\n@@ -166,8 +168,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithTimeoutOnceShouldReturnResponse() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithTimeoutOnceShouldReturnResponse() throws Exception {\n+        new MockUp<T>() {\n             int count = 1;\n \n             @Mock\n@@ -189,8 +191,8 @@ public class ClientTest {\n     }\n \n     @Test(expected = ConnectionException.class)\n-    public void requestWithTimeoutRepeatedlyShouldThrowConnectionException() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithTimeoutRepeatedlyShouldThrowConnectionException() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new java.net.SocketTimeoutException(\"SocketTimeoutException\");\n@@ -201,8 +203,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithTimeoutRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithTimeoutRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new java.net.SocketTimeoutException(\"SocketTimeoutException\");\n@@ -218,8 +220,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithSocketErrorOnceShouldReturnResponse() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithSocketErrorOnceShouldReturnResponse() throws Exception {\n+        new MockUp<T>() {\n             int count = 1;\n \n             @Mock\n@@ -241,8 +243,8 @@ public class ClientTest {\n     }\n \n     @Test(expected = ConnectionException.class)\n-    public void requestWithSocketErrorRepeatedlyShouldThrowConnectionException() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithSocketErrorRepeatedlyShouldThrowConnectionException() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new java.net.UnknownHostException(\"UnknownHostException\");\n@@ -253,8 +255,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithSocketErrorRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithSocketErrorRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new java.net.UnknownHostException(\"UnknownHostException\");\n@@ -270,8 +272,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithUnexpectedExceptionOnceShouldReturnResponse() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithUnexpectedExceptionOnceShouldReturnResponse() throws Exception {\n+        new MockUp<T>() {\n             int count = 1;\n \n             @Mock\n@@ -293,8 +295,8 @@ public class ClientTest {\n     }\n \n     @Test(expected = ConnectionException.class)\n-    public void requestWithUnexpectedExceptionRepeatedlyShouldThrowConnectionException() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithUnexpectedExceptionRepeatedlyShouldThrowConnectionException() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new RuntimeException(\"Some exception\");\n@@ -305,8 +307,8 @@ public class ClientTest {\n     }\n \n     @Test\n-    public void requestWithUnexpectedExceptionRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n-        new MockUp<Call>() {\n+    public <T extends Call> void requestWithUnexpectedExceptionRepeatedlyShouldThrowExceptionWithMessage() throws Exception {\n+        new MockUp<T>() {\n             @Mock\n             public Response execute(Invocation inv) throws IOException {\n                 throw new RuntimeException(\"Some exception\");\ndiff --git a/src/test/java/com/tinify/Integration.java b/src/test/java/com/tinify/Integration.java\nindex 6903221..66067d4 100644\n--- a/src/test/java/com/tinify/Integration.java\n+++ b/src/test/java/com/tinify/Integration.java\n@@ -8,9 +8,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.io.File;\n import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.Collections;\n-\n import static org.junit.Assert.assertThat;\n import static org.hamcrest.Matchers.*;\n \ndiff --git a/src/test/java/com/tinify/ResultMetaTest.java b/src/test/java/com/tinify/ResultMetaTest.java\nindex 0f7c426..6bdaaf2 100644\n--- a/src/test/java/com/tinify/ResultMetaTest.java\n+++ b/src/test/java/com/tinify/ResultMetaTest.java\n@@ -4,7 +4,7 @@ import org.junit.Before;\n import org.junit.Test;\n \n import java.util.HashMap;\n-import com.squareup.okhttp.Headers;\n+import okhttp3.Headers;\n \n import static org.junit.Assert.assertThat;\n import static org.hamcrest.CoreMatchers.*;\ndiff --git a/src/test/java/com/tinify/ResultTest.java b/src/test/java/com/tinify/ResultTest.java\nindex 767b41a..16ecbae 100644\n--- a/src/test/java/com/tinify/ResultTest.java\n+++ b/src/test/java/com/tinify/ResultTest.java\n@@ -4,7 +4,7 @@ import org.junit.Before;\n import org.junit.Test;\n \n import java.util.HashMap;\n-import com.squareup.okhttp.Headers;\n+import okhttp3.Headers;\n \n import static org.junit.Assert.assertThat;\n import static org.hamcrest.CoreMatchers.*;\ndiff --git a/src/test/java/com/tinify/SourceTest.java b/src/test/java/com/tinify/SourceTest.java\nindex 0b6bdc4..d6bab76 100644\n--- a/src/test/java/com/tinify/SourceTest.java\n+++ b/src/test/java/com/tinify/SourceTest.java\n@@ -1,24 +1,21 @@\n package com.tinify;\n \n import com.google.gson.Gson;\n-import com.squareup.okhttp.HttpUrl;\n-import com.squareup.okhttp.mockwebserver.MockResponse;\n-import com.squareup.okhttp.mockwebserver.MockWebServer;\n-import com.squareup.okhttp.mockwebserver.RecordedRequest;\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n import mockit.*;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.lang.*;\n import java.net.URISyntaxException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.HashSet;\n import java.util.Map;\n-import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -40,14 +37,18 @@ public class SourceTest {\n         {\n             @Mock\n             @SuppressWarnings(\"unused\")\n-            HttpUrl parse(String input)\n+            HttpUrl parse(Invocation inv, String url)\n             {\n-                return new HttpUrl.Builder()\n-                        .scheme(\"http\")\n-                        .host(server.getHostName())\n-                        .port(server.getPort())\n-                        .encodedPath(\"/shrink\")\n-                        .build();\n+                if (url.contains(\"localhost\")) {\n+                    return inv.proceed();\n+                } else {\n+                    return new HttpUrl.Builder()\n+                            .scheme(\"http\")\n+                            .host(server.getHostName())\n+                            .port(server.getPort())\n+                            .encodedPath(\"/shrink\")\n+                            .build();\n+                }\n             }\n         };\n     }\ndiff --git a/src/test/java/com/tinify/TinifyTest.java b/src/test/java/com/tinify/TinifyTest.java\nindex 029b9b4..0aa78da 100644\n--- a/src/test/java/com/tinify/TinifyTest.java\n+++ b/src/test/java/com/tinify/TinifyTest.java\n@@ -1,18 +1,16 @@\n package com.tinify;\n \n-import com.squareup.okhttp.HttpUrl;\n-import com.squareup.okhttp.mockwebserver.MockResponse;\n-import com.squareup.okhttp.mockwebserver.MockWebServer;\n-import com.squareup.okhttp.mockwebserver.RecordedRequest;\n-import mockit.Mock;\n-import mockit.MockUp;\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n+import mockit.*;\n import org.apache.commons.codec.binary.Base64;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.lang.*;\n import java.net.URISyntaxException;\n import java.nio.file.Paths;\n import java.util.concurrent.TimeUnit;\n@@ -37,14 +35,18 @@ public class TinifyTest {\n         {\n             @Mock\n             @SuppressWarnings(\"unused\")\n-            HttpUrl parse(String url)\n+            HttpUrl parse(Invocation inv, String url)\n             {\n-                return new HttpUrl.Builder()\n-                        .scheme(\"http\")\n-                        .host(server.getHostName())\n-                        .port(server.getPort())\n-                        .encodedPath(url.replaceFirst(Client.API_ENDPOINT, \"\"))\n-                        .build();\n+                if (url.contains(\"localhost\")) {\n+                    return inv.proceed();\n+                } else {\n+                    return new HttpUrl.Builder()\n+                            .scheme(\"http\")\n+                            .host(server.getHostName())\n+                            .port(server.getPort())\n+                            .encodedPath(url.replaceFirst(Client.API_ENDPOINT, \"\"))\n+                            .build();\n+                }\n             }\n         };\n     }\n"}
